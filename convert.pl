#!/usr/bin/perl

# This script aims -- eventually -- to be something that can be run
# with a C++ source file from Rosegarden as its input, and that will
# produce another C++ source file that has as many conversions from
# Qt3 and KDE3 classes and idioms to their Qt4 and KDE4 equivalents as
# can easily be scripted in Perl.

# It works by reading the whole file into a single string and applying
# a series of regular expression transformations to that string, with
# the /s modifier to let Perl know to apply the regular expressions to
# the whole string rather than to single lines.  This allows us to
# make changes that may span any number of source code lines at once
# (essential to handle the fact that C++ syntax allows line breaks
# between tokens!).  Note that this does mean you can't use ^ and $ to
# anchor your regexps to the start and end of a line -- they anchor to
# the start and end of the file instead.

# You might test this using e.g.
# perl ./convert.pl ./src/gui/editors/eventlist/EventView.cpp

# Some aims should be:

# 1. MOST IMPORTANT OF ALL: Make sure that replacements don't care
# whether they are run once or many times.  It needs to be possible to
# run this script more than once over the same source file without
# breaking it!

# 2. Convert uses of Qt3 classes and idioms directly to uses of Qt4
# classes and idioms.  Don't use the Qt3 compatibility code in Qt4.

# 3. Convert uses of KDE3 classes and idioms to their "pure" Qt4
# equivalents if you know how to do so.  Otherwise, convert them to
# KDE4 equivalents if you know how to do so (we can always consider
# individual cases of KDE4->Qt4 later when we know more about what
# we're doing, if we want to).  Again, don't use the KDE3
# compatibility code in KDE4.

# 4. Don't waste much time (yet) trying to compile or test the results
# -- we'll probably have to do a lot of work before we can actually
# compile even a single file.  Instead, think about what each change
# is intended to achieve before writing the code for it, and aim to
# make sure it's semantically consistent rather than necessarily
# syntactically right.  If you don't know the right change, leave it
# alone for the moment (maybe add a comment saying you thought about
# it but aren't sure what to do with it).  It's much better to make
# code that doesn't compile but would be right if it did, than code
# that does compile but works wrong.  Of course this is easier said
# than done.

# 5. Don't care about efficiency (either runtime or in terms of
# duplication of Perl code).  If it takes you five minutes less time
# to write, it's better.

# 6. Comment every replacement to say why you think it's necessary.

# Give access to tools.
# How to use them is explained at the beginning of mechanization_tools.pm.
use mechanization_tools;

my $code = join '', <>; # read the entire file into a single string


####

# The proper form for including Qt headers has changed, from
# <qsomeclass.h> to <QSomeClass>.  The old headers do generally still
# work as well, but let's be proper.
#
# This list was generated by a bash script as follows:
# for x in /opt/qt/include/q*.h; do
#    x=`basename $x .h`
#    y=`ls /usr/include/Qt*/|grep -i "$x"'$'`
#    if [ -z "$y" ]; then continue; fi
#    echo "\$code =~ s/\#include <$x\.h>/\#include <$y>/s;"
# done

$code =~ s/\#include <qaccessible\.h>/\#include <QAccessible>/s;
$code =~ s/\#include <qaction\.h>/\#include <QAction>/s;
$code =~ s/\#include <qapplication\.h>/\#include <QApplication>/s;
$code =~ s/\#include <qassistantclient\.h>/\#include <QAssistantClient>/s;
$code =~ s/\#include <qbitarray\.h>/\#include <QBitArray>/s;
$code =~ s/\#include <qbitmap\.h>/\#include <QBitmap>/s;
$code =~ s/\#include <qbrush\.h>/\#include <QBrush>/s;
$code =~ s/\#include <qbuffer\.h>/\#include <QBuffer>/s;
$code =~ s/\#include <qbuttongroup.h>/\#include <QButtonGroup>/s;
$code =~ s/\#include <qcache\.h>/\#include <QCache>/s;
$code =~ s/\#include <qcdestyle\.h>/\#include <QCDEStyle>/s;
$code =~ s/\#include <qcheckbox\.h>/\#include <QCheckBox>/s;
$code =~ s/\#include <qclipboard\.h>/\#include <QClipboard>/s;
$code =~ s/\#include <qcolor\.h>/\#include <QColor>/s;
$code =~ s/\#include <qcolordialog\.h>/\#include <QColorDialog>/s;
$code =~ s/\#include <qcombobox\.h>/\#include <QComboBox>/s;
$code =~ s/\#include <qcommonstyle\.h>/\#include <QCommonStyle>/s;
$code =~ s/\#include <qcursor\.h>/\#include <QCursor>/s;
$code =~ s/\#include <qdatastream\.h>/\#include <QDataStream>/s;
$code =~ s/\#include <qdatetime\.h>/\#include <QDateTime>/s;
$code =~ s/\#include <qdatetimeedit\.h>/\#include <QDateTimeEdit>/s;
$code =~ s/\#include <qdesktopwidget\.h>/\#include <QDesktopWidget>/s;
$code =~ s/\#include <qdial\.h>/\#include <QDial>/s;
$code =~ s/\#include <qdialog\.h>/\#include <QDialog>/s;
$code =~ s/\#include <qdir\.h>/\#include <QDir>/s;
$code =~ s/\#include <qerrormessage\.h>/\#include <QErrorMessage>/s;
$code =~ s/\#include <qevent\.h>/\#include <QEvent>/s;
$code =~ s/\#include <qeventloop\.h>/\#include <QEventLoop>/s;
$code =~ s/\#include <qfile\.h>/\#include <QFile>/s;
$code =~ s/\#include <qfiledialog\.h>/\#include <QFileDialog>/s;
$code =~ s/\#include <qfileinfo\.h>/\#include <QFileInfo>/s;
$code =~ s/\#include <qfont\.h>/\#include <QFont>/s;
$code =~ s/\#include <qfontdatabase\.h>/\#include <QFontDatabase>/s;
$code =~ s/\#include <qfontdialog\.h>/\#include <QFontDialog>/s;
$code =~ s/\#include <qfontinfo\.h>/\#include <QFontInfo>/s;
$code =~ s/\#include <qfontmetrics\.h>/\#include <QFontMetrics>/s;
$code =~ s/\#include <qframe\.h>/\#include <QFrame>/s;
$code =~ s/\#include <qftp\.h>/\#include <QFtp>/s;
$code =~ s/\#include <qglcolormap\.h>/\#include <QGLColormap>/s;
$code =~ s/\#include <qgroupbox\.h>/\#include <QGroupBox>/s;
$code =~ s/\#include <qhostaddress\.h>/\#include <QHostAddress>/s;
$code =~ s/\#include <qhttp\.h>/\#include <QHttp>/s;
$code =~ s/\#include <qiconset\.h>/\#include <QIconSet>/s;
$code =~ s/\#include <qimage\.h>/\#include <QImage>/s;
$code =~ s/\#include <qinputdialog\.h>/\#include <QInputDialog>/s;
$code =~ s/\#include <qiodevice\.h>/\#include <QIODevice>/s;
$code =~ s/\#include <qkeysequence\.h>/\#include <QKeySequence>/s;
$code =~ s/\#include <qlabel\.h>/\#include <QLabel>/s;
$code =~ s/\#include <qlayout\.h>/\#include <QLayout>/s;
$code =~ s/\#include <qlcdnumber\.h>/\#include <QLCDNumber>/s;
$code =~ s/\#include <qlibrary\.h>/\#include <QLibrary>/s;
$code =~ s/\#include <qlineedit\.h>/\#include <QLineEdit>/s;
$code =~ s/\#include <qlist\.h>/\#include <QList>/s;
$code =~ s/\#include <qlistview\.h>/\#include <QListView>/s;
$code =~ s/\#include <qlocale\.h>/\#include <QLocale>/s;
$code =~ s/\#include <qmainwindow\.h>/\#include <QMainWindow>/s;
$code =~ s/\#include <qmap\.h>/\#include <QMap>/s;
$code =~ s/\#include <qmenubar\.h>/\#include <QMenuBar>/s;
$code =~ s/\#include <qmessagebox\.h>/\#include <QMessageBox>/s;
$code =~ s/\#include <qmetaobject\.h>/\#include <QMetaObject>/s;
$code =~ s/\#include <qmotifstyle\.h>/\#include <QMotifStyle>/s;
$code =~ s/\#include <qmovie\.h>/\#include <QMovie>/s;
$code =~ s/\#include <qmutex\.h>/\#include <QMutex>/s;
$code =~ s/\#include <qobject\.h>/\#include <QObject>/s;
$code =~ s/\#include <qobjectcleanuphandler\.h>/\#include <QObjectCleanupHandler>/s;
$code =~ s/\#include <qobjectlist\.h>/\#include <QObjectList>/s;
$code =~ s/\#include <qpaintdevice\.h>/\#include <QPaintDevice>/s;
$code =~ s/\#include <qpainter\.h>/\#include <QPainter>/s;
$code =~ s/\#include <qpair\.h>/\#include <QPair>/s;
$code =~ s/\#include <qpalette\.h>/\#include <QPalette>/s;
$code =~ s/\#include <qpen\.h>/\#include <QPen>/s;
$code =~ s/\#include <qpicture\.h>/\#include <QPicture>/s;
$code =~ s/\#include <qpixmap\.h>/\#include <QPixmap>/s;
$code =~ s/\#include <qpixmapcache\.h>/\#include <QPixmapCache>/s;
$code =~ s/\#include <qpoint\.h>/\#include <QPoint>/s;
$code =~ s/\#include <qprintdialog\.h>/\#include <QPrintDialog>/s;
$code =~ s/\#include <qprinter\.h>/\#include <QPrinter>/s;
$code =~ s/\#include <qprocess\.h>/\#include <QProcess>/s;
$code =~ s/\#include <qprogressbar\.h>/\#include <QProgressBar>/s;
$code =~ s/\#include <qprogressdialog\.h>/\#include <QProgressDialog>/s;
$code =~ s/\#include <qpushbutton\.h>/\#include <QPushButton>/s;
$code =~ s/\#include <qqueue\.h>/\#include <QQueue>/s;
$code =~ s/\#include <qradiobutton\.h>/\#include <QRadioButton>/s;
$code =~ s/\#include <qrect\.h>/\#include <QRect>/s;
$code =~ s/\#include <qregexp\.h>/\#include <QRegExp>/s;
$code =~ s/\#include <qregion\.h>/\#include <QRegion>/s;
$code =~ s/\#include <qscrollbar\.h>/\#include <QScrollBar>/s;
$code =~ s/\#include <qsemaphore\.h>/\#include <QSemaphore>/s;
$code =~ s/\#include <qsessionmanager\.h>/\#include <QSessionManager>/s;
$code =~ s/\#include <qsettings\.h>/\#include <QSettings>/s;
$code =~ s/\#include <qsignalmapper\.h>/\#include <QSignalMapper>/s;
$code =~ s/\#include <qsize\.h>/\#include <QSize>/s;
$code =~ s/\#include <qsizegrip\.h>/\#include <QSizeGrip>/s;
$code =~ s/\#include <qsizepolicy\.h>/\#include <QSizePolicy>/s;
$code =~ s/\#include <qslider\.h>/\#include <QSlider>/s;
$code =~ s/\#include <qsocketnotifier\.h>/\#include <QSocketNotifier>/s;
$code =~ s/\#include <qsound\.h>/\#include <QSound>/s;
$code =~ s/\#include <qspinbox\.h>/\#include <QSpinBox>/s;
$code =~ s/\#include <qsplashscreen\.h>/\#include <QSplashScreen>/s;
$code =~ s/\#include <qsplitter\.h>/\#include <QSplitter>/s;
$code =~ s/\#include <qsqldatabase\.h>/\#include <QSqlDatabase>/s;
$code =~ s/\#include <qsqldriver\.h>/\#include <QSqlDriver>/s;
$code =~ s/\#include <qsqldriverplugin\.h>/\#include <QSqlDriverPlugin>/s;
$code =~ s/\#include <qsqlerror\.h>/\#include <QSqlError>/s;
$code =~ s/\#include <qsqlfield\.h>/\#include <QSqlField>/s;
$code =~ s/\#include <qsqlindex\.h>/\#include <QSqlIndex>/s;
$code =~ s/\#include <qsqlquery\.h>/\#include <QSqlQuery>/s;
$code =~ s/\#include <qsqlrecord\.h>/\#include <QSqlRecord>/s;
$code =~ s/\#include <qsqlresult\.h>/\#include <QSqlResult>/s;
$code =~ s/\#include <qstack\.h>/\#include <QStack>/s;
$code =~ s/\#include <qstatusbar\.h>/\#include <QStatusBar>/s;
$code =~ s/\#include <qstring\.h>/\#include <QString>/s;
$code =~ s/\#include <qstringlist\.h>/\#include <QStringList>/s;
$code =~ s/\#include <qstyle\.h>/\#include <QStyle>/s;
$code =~ s/\#include <qstylefactory\.h>/\#include <QStyleFactory>/s;
$code =~ s/\#include <qstyleplugin\.h>/\#include <QStylePlugin>/s;
$code =~ s/\#include <qsyntaxhighlighter\.h>/\#include <QSyntaxHighlighter>/s;
$code =~ s/\#include <qt\.h>/\#include <Qt>/s;
$code =~ s/\#include <qtabbar\.h>/\#include <QTabBar>/s;
$code =~ s/\#include <qtabwidget\.h>/\#include <QTabWidget>/s;
$code =~ s/\#include <qtextbrowser\.h>/\#include <QTextBrowser>/s;
$code =~ s/\#include <qtextcodec\.h>/\#include <QTextCodec>/s;
$code =~ s/\#include <qtextcodecplugin\.h>/\#include <QTextCodecPlugin>/s;
$code =~ s/\#include <qtextedit\.h>/\#include <QTextEdit>/s;
$code =~ s/\#include <qtextstream\.h>/\#include <QTextStream>/s;
$code =~ s/\#include <qthread\.h>/\#include <QThread>/s;
$code =~ s/\#include <qthreadstorage\.h>/\#include <QThreadStorage>/s;
$code =~ s/\#include <qtimer\.h>/\#include <QTimer>/s;
$code =~ s/\#include <qtoolbar\.h>/\#include <QToolBar>/s;
$code =~ s/\#include <qtoolbox\.h>/\#include <QToolBox>/s;
$code =~ s/\#include <qtoolbutton\.h>/\#include <QToolButton>/s;
$code =~ s/\#include <qtooltip\.h>/\#include <QToolTip>/s;
$code =~ s/\#include <qtranslator\.h>/\#include <QTranslator>/s;
$code =~ s/\#include <qurl\.h>/\#include <QUrl>/s;
$code =~ s/\#include <qurlinfo\.h>/\#include <QUrlInfo>/s;
$code =~ s/\#include <quuid\.h>/\#include <QUuid>/s;
$code =~ s/\#include <qvalidator\.h>/\#include <QValidator>/s;
$code =~ s/\#include <qvariant\.h>/\#include <QVariant>/s;
$code =~ s/\#include <qvector\.h>/\#include <QVector>/s;
$code =~ s/\#include <qwaitcondition\.h>/\#include <QWaitCondition>/s;
$code =~ s/\#include <qwhatsthis\.h>/\#include <QWhatsThis>/s;
$code =~ s/\#include <qwidget\.h>/\#include <QWidget>/s;
$code =~ s/\#include <qwidgetlist\.h>/\#include <QWidgetList>/s;
$code =~ s/\#include <qwindowsstyle\.h>/\#include <QWindowsStyle>/s;
$code =~ s/\#include <qwizard\.h>/\#include <QWizard>/s;
$code =~ s/\#include <qwmatrix\.h>/\#include <QWMatrix>/s;
$code =~ s/\#include <qworkspace\.h>/\#include <QWorkspace>/s;

# I wonder whether we should even convert the remaining #include
# <qsomething.h> lines into #errors?  It'd be a pretty good way of
# making it very obvious that code saying e.g. #include <qcanvas.h> is
# going to need some real work.



####

# QIconSet has been renamed to QIcon

$code =~ s/QIconSet/QIcon/gs;


####

# QGridLayout::addMultiCellWidget(w, a, b, c, d, align) has changed to
# QGridLayout::addWidget(w, a, c, b - a + 1, d - c + 1, align).  Note
# that we can't actually distinguish between a call to
# QGridLayout::addMultiCellWidget and a call to
# SomeOtherClass::addMultiCellWidget -- in this case we're lucky
# because addMultiCellWidget is a unique name.

# This can't handle cases with nested expressions (i.e. anything with
# parens or commas inside the argument list), so we explicitly fail to
# match them rather than converting them wrongly.

# We convert the function name to something distinctive so that we can
# recognise it in the following expression and fix up some of the
# problems we can cause here.

$code =~ s/addMultiCellWidget\s*\(([^,;\(]+),([^,;\(]+),([^,;\(]+),([^,;\(]+),([^,;\(]+),([^,;\(]+)\)/PLOB_addWidget($1,$2,$4,$3-$2+1,$5-$4+1,$6)/gs;
$code =~ s/addMultiCellWidget\s*\(([^,;\(]+),([^,;\(]+),([^,;\(]+),([^,;\(]+),([^,;\(]+)\)/PLOB_addWidget($1,$2,$4,$3-$2+1,$5-$4+1)/gs;

# Simplify some constant expressions left over by the above.  \b is
# the magic Perl regexp syntax for "word break" -- we use it to ensure
# we aren't matching just a single digit from a longer string.
# e.g. \b1\b will match the 1 in ", 1+" but not the 1s in ", 11+".

$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b1- 1\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b2- 1\b/${1}1/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b3- 1\b/${1}2/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b4- 1\b/${1}3/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b5- 1\b/${1}4/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b6- 1\b/${1}5/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b7- 1\b/${1}6/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b8- 1\b/${1}7/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b9- 1\b/${1}8/gs;

$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b1- 1\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b2- 2\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b3- 3\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b4- 4\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b5- 5\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b6- 6\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b7- 7\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b8- 8\b/${1}0/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b9- 9\b/${1}0/gs;

$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b0\+1\b/${1}1/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b1\+1\b/${1}2/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b2\+1\b/${1}3/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b3\+1\b/${1}4/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b4\+1\b/${1}5/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b5\+1\b/${1}6/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b6\+1\b/${1}7/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b7\+1\b/${1}8/gs;
$code =~ s/(PLOB_addWidget\s*\([^;\)]*)\b8\+1\b/${1}9/gs;

# Then convert back the distinctive name

$code =~ s/PLOB_addWidget/addWidget/gs;


####

# We're going to use our own Command and NamedCommand classes, not KDE
# ones

$code =~ s/KCommand/Command/gs;
$code =~ s/KNamedCommand/NamedCommand/gs;
$code =~ s/KMacroCommand/MacroCommand/gs;
$code =~ s/<kcommand\.h>/"document\/Command.h"/gs;

# QT4 doesn't have AlignAuto; replace with AlignLeft

$code =~ s/AlignAuto/AlignLeft/gs;

# QCString is merged with QByteArray, with some pitfalls.  Will we encounter any
# of the pitfalls with a simple swap?
#
# NOTES:  There are lots of mysterious lines like
#
# /usr/include/qt4/QtCore/qbytearray.h:570: note:                 QDataStream&
# operator<<(QDataStream&, const QByteArray&)
#
# I'm not even sure what these mean, and they are also abundant in relation to
# myriad other classes, but it seems to be something of a red flag.
#
# I don't see any handy way to see at a glance what goes from what to what in
# the old QT3 QCString vs. the new merged functionality QT4 QByteArray.  It
# might have all the methods we need, with no functional changes, or it might
# not.
#
# replace the header:
# 
$code =~ s/qcstring\.h/QByteArray/gs;

# then any type declarations:
#
$code =~ s/QCString\b/QByteArray/gs;

####

# There is no QCStringList in QT4.  Chris says "it's just an opportunistic
# typedef in the KDE headers.  Actually, it's so opportunistic that the
# typedef appears several times in several different headers.
# Fortunately, it's the same each time...
# 
# Anyway, it's
# 
#     typedef QValueList<QCString> QCStringList;
#
# QValueList is just QList in Qt4-speak, so I think you should just be
# able to directly replace QCStringList with QList<QByteArray>
# throughout, and that will probably work."
#
# So let's try that:
$code =~ s/QCStringList\b/QList\<QByteArray\>/gs;
#
# NOTE: there were no occurrences of including a qcstringlist.h header, so I
# guess it came in through KDE or something.  We'll probably have to add an 
# include <QList> to the affected files manually, since there's nothing to
# replace per se.

####

# As came out of investigating the above, we find that QValueList is gone,
# replaced with QList (index-based) and QLinkedList (iterator-based.)  Grepping
# "QValueList" in our code reveals:
#
# ./src/gui/application/RosegardenIface.cpp:    QValueList<KAction *> lst = m_dcopActionProxy->actions();
# ./src/gui/application/RosegardenIface.cpp:    QValueList<KAction *>::ConstIterator it = lst.begin();
# ./src/gui/application/RosegardenIface.cpp:    QValueList<KAction *>::ConstIterator end = lst.end();
# ./src/gui/editors/notation/NotationView.cpp:    QValueList<int> pages = printer.pageList();
# ./src/gui/editors/notation/NotationView.cpp:    for (QValueList<int>::Iterator pli = pages.begin();
#
# Two uses.  Clearly both use the iterator version, even without drilling down
# into the actual code, so let's replace QValueList with QLinkedList, and swap
# the headers (although the first one looks DCOP-related, and might be going
# away anyway):

# (cc) I think these are actually QLists, not QLinkedLists -- QList
# has public iterators just as QLinkedList does, the reference to
# iterator-based is about the implementation detail rather than the
# public interface.  But I'm not certain, so maybe let's leave it for
# now until we can see more clearly what breaks.

$code =~ s/QValueList\b/QLinkedList/gs;
$code =~ s/qvaluelist\.h/QLinkedList/gs;

####

# KProcess is different now, and the old one is in a compatibility K3Process
# that isn't recommended for use.  QProcess has undergone a similar process.  I
# say we just switch to the new QProcess.  I'm automating the text swap, but
# this will require hand investigation that might not be scriptable, or if it
# is, it will require a lot more thought than a simple text swap.
#
$code =~ s/KProcess/QProcess/gs;
$code =~ s/kprocess\.h/QProcess/gs;

####

# This one is easy.  It looks like kstddirs.h has been deprecated for some time,
# and it has been replaced with kstandarddirs.h, which exists in my KDE4
# install.  So let's swap'em.
#
$code =~ s/kstddirs.h/kstandarddirs.h/gs;

####

# QValueVector no longer exists in QT4.  We must swap to QVector instead.
#
# There may or may not be problems with this swap, but I'm not getting any
# errors with "QVector" in them, so maybe we dodged trouble on that one.
#
# In case of trouble, see the porting guide.
#
# QValueVector<T>
#
# The QValueVector<T> class has been replaced by QVector<T> in Qt 4....
#
$code =~ s/QValueVector/QVector/gs;
$code =~ s/qvaluevector.h/QVector/gs;

####

# (NOT SO FAST ON THIS ONE!  FURTHER INVESTIGATION REQUIRED)
# KToolBar is gone.  QToolBar replaces it.  So first we swap all K for Q
#$code =~ s/KToolBar/QToolBar/gs;

# swap the header
#$code =~ s/ktoolbar\.h/QToolBar/gs;

####

# KStd* and kstd*.h have changed to KStandard* and kstd*.h
$code =~ s/kstd/kstandard/gs;
$code =~ s/KStd/KStandard/gs;

# Furthermore, KStdAccel became KStandardShortcut.  It looks safe to convert all
# references to accel to shortcut
$code =~ s/Accel/Shortcut/gs;
$code =~ s/accel/shortcut/gs;

####

# Lots of changes in QDataStream which aren't even mentioned in the porting
# guide.  Let's see if this simple change from IO_(Write|Read)Only to
# QIODevice::(Write|Read)Only will fix this.
$code =~ s/IO_WriteOnly/QIODevice\:\:WriteOnly/gs;
$code =~ s/IO_ReadOnly/QIODevice\:\:ReadOnly/gs;
$code =~ s/IO_Append/QIODevice\:\:Append/gs;

####

# QDataStream changes Bytes to Data, and we only have three Raw* to change, so
# this should work for both Write* and Read*:
$code =~ s/RawBytes/RawData/gs;

####

# Let's change KComboBox to QComboBox straight off (because there was always
# little difference between them anyway, and this is a simple case for going
# with pure QT without question)
$code =~ s/KComboBox/QComboBox/gs;
$code =~ s/kcombobox\.h/QComboBox/gs;

# Then currentItem() changes to currentIndex()
$code =~ s/currentItem/currentIndex/gs;
# setCurrentItem() changes to setCurrentIndex()
$code =~ s/setCurrentItem/setCurrentIndex/gs;
# setCurrentText() becomes setItemText()
$code =~ s/setCurrentText/setItemText/gs;
# insertStringList() to insertItems()
$code =~ s/insertStringList/insertItems/gs;
# text() becomes itemText() but this is not scriptable (eg. QLabel::text() and
# potentially myriad others)
#
# setSizeLimit() becomes (after quite a bit of homework, because it's not in any
# of the docs per se) setMaxVisibleItems()
$code =~ s/setSizeLimit/setMaxVisibleItems/gs;

$code =~ s/insertItem/addItem/gs;

# These are QSpinBox mostly, and probably other classes too.  These seem like
# safe global idiomatic changes that bring an end to a large number of errors,
# perhaps introducing a justifiable number of new errors as a consequence (or
# hopefully not)  (QSlider, )
$code =~ s/maxValue/maximum/gs;
$code =~ s/minValue/minimum/gs;
$code =~ s/setMaxValue/setMaximum/gs;
$code =~ s/setMinValue/setMinimum/gs;
$code =~ s/setLineStep/setSingleStep/gs;
$code =~ s/setTickmarks/setTickPosition/gs;


####

# "name" changes to "objectName" although I'm not sure why we ever actually use
# the name property anyway.  Not investigating why, just sedding the syntax

# introduced another 42 errors.  Damn.  This one looks tricky to fix, and might
# have to be done by hand
$code =~ s/\-\>name\(\)/\-\>objectName\(\)/gs;

# (at least some of the errors with the above will be because we also have
# Command::name() which is implemented in our own class and hasn't (& shouldn't)
# change to objectName(). must ponder...)

# (cc) I have changed Command::name() to Command::getName(), because
# it isn't really uniform with QObject::name() anyway and it's more
# appropriate to use our own convention.  So uncommenting the above to
# see how it does now.  I think it's sort of the right thing to do, we
# just need to fix the broken cases.


####

# QString methods
#
# Michael writes:
# 
#    If you read up on the individual methods in the QT3-compatibility
#    library, it shows you what to switch to what in the port (so we
#    could make the switches ourselves to avoid using the hack
#    library.)  For instance, QString::lower() has become
#    QString::toLower(), and so on.
#
#    I picked a few of these at random, and if these can be automated,
#    I don't have enough experience with batch text manipulation to
#    pull it off.  For every term that needs to be replaced, there are
#    at least twice as many occurrences of that term as there are
#    errors about QString not having that member.  "latin1" for
#    instance.  What else is using "latin1" and are all the other
#    classes switching from "latin1" to "toLatin1" like QString is?
#    Maybe, maybe not.
# 
# To be honest, I don't understand why there would appear to be many
# more references to these functions that don't involve QString.
# Perhaps it's just that the errors commenting on QString methods are
# masked by earlier errors in the file, and the compiler never gets as
# far as printing them.  In particular I can't think of any uses of
# methods called lower() and latin1() other than those in QString.
# So let's just try this and see how it goes.

$code =~ s/(\.|->)lower\(\)/$1toLower()/gs;
$code =~ s/(\.|->)utf8\(\)/$1toUtf8()/gs;
$code =~ s/(\.|->)simplifyWhiteSpace\(\)/$1simplified()/gs;
$code =~ s/(\.|->)stripWhiteSpace\(\)/$1trimmed()/gs;
$code =~ s/(\.|->)upper\(\)/$1toUpper()/gs;

# For most of these I'm not at all convinced that we really wanted
# latin1() rather than local8Bit() in the first place, but I guess
# this is not a good time to risk adding new weird bugs so we'd
# probably better stick with what we have.  Note that toLatin1()
# returns QByteArray whereas latin1() returned const char *, so a
# further conversion is needed.
$code =~ s/(\.|->)latin1\(\)/$1toLatin1().data()/gs;

# The big exception to this is QString::find(); there are definitely
# other classes with methods called find() in them
# (e.g. std::multimap, which we use a lot).  Let's leave that for now.


####

# QStringList::split(a, b, c) becomes either
# b.split(a, QString::KeepEmptyParts) if c == true, or
# b.split(a, QString::SkipEmptyParts) if c == false (or is absent)

# also change include for QStringList
$code =~ s/qstrlist\.h/QStringList/;

$code =~ s/QStringList::split\(\s*([^,\)]*),\s*([^,\)]*),\s*[Tt][Rr][Uu][Ee]\)/$2.split($1, QString::KeepEmptyParts)/gs;
$code =~ s/QStringList::split\(\s*([^,\)]*),\s*([^,\)]*),\s*[Ff][Aa][Ll][Ss][EE]\)/$2.split($1, QString::SkipEmptyParts)/gs;
$code =~ s/QStringList::split\(\s*([^,\)]*),\s*([^,\)]*)\s*\)/$2.split($1, QString::SkipEmptyParts)/gs;


####

# KDialogBase: this will be fun.
# This class has gone, there is no K3DialogBase, and the conversion
# is not trivial.
#
# Our usual pattern is (for the dialog constructor)
#
# OurDialog::OurDialog() :
#     KDialogBase(parent, <name>, <modal>, <title>, buttonmask)
# {
#     QHBox *hbox = makeHBoxMainWidget(); // or makeVBoxMainWidget
# ...
# }
#
# Now, assuming that we will subsequently make the substitution for
# QHbox/QVBox that follows this one, we probably want to change this
# to something like the following:
#
# OurDialog::OurDialog() :
#     QDialog(parent)
# {
#     setModal(<modal>);
#     setWindowTitle(<title>);
#     QGridLayout *metagrid = new QGridLayout;
#     setLayout(metagrid);
#     QHBox *hbox = new QHBox(this);
#     metagrid->addWidget(hbox, 0, 0);
# ...
#     QDialogButtonBox *buttonBox = new QDialogButtonBox(newbuttonmask);
#     metagrid->addWidget(buttonBox, 1, 0);
#     metagrid->setRowStretch(0, 10);
#     connect(buttonBox, SIGNAL(accepted()), this, SLOT(accept()));
#     connect(buttonBox, SIGNAL(rejected()), this, SLOT(reject()));
# }
#
# where newbuttonmask is the result of taking buttonmask and
# prepending QDialogButtonBox:: to each of the items in it (e.g. "Ok |
# Cancel" -> "QDialogButtonBox::Ok | QDialogButtonBox::Cancel").
#
# Oh boy.

if ($code =~ /KDialogBase/) {

    $code =~ s/\#include <kdialogbase\.h>/\#include <QDialog>\n\#include <QDialogButtonBox>/gs;
    $code =~ s/public KDialogBase/public QDialog/gs;

    # The case with a make[HV]BoxMainWidget in it
    $code =~ s/KDialogBase\(([^,\)]*),\s*[^,\)]*,\s*([^,\)]*),\s*([^,]*),\s*([^,\)]*)\)([^\{]*)\{([^\{\}]*?)Q([HV])Box\s*\*\s*([^ =]+)\s*=\s*make[HV]BoxMainWidget\(\);(.*?)\n\}/QDialog($1)$5\{$6setModal($2);\n    setWindowTitle($3);\n\n    QGridLayout *metagrid = new QGridLayout;\n    setLayout(metagrid);\n    Q$7Box *$8 = new Q$7Box(this);\n    metagrid->addWidget($8, 0, 0);\n$9\n    QDialogButtonBox *buttonBox = new QDialogButtonBox($4);\n    metagrid->addWidget(buttonBox, 1, 0);\n    metagrid->setRowStretch(0, 10);\n    connect(buttonBox, SIGNAL(accepted()), this, SLOT(accept()));\n    connect(buttonBox, SIGNAL(rejected()), this, SLOT(reject()));\n\}/gs;

    # The case without a make[HV]BoxMainWidget in it (assumes prior
    # replacement has already weeded out the other cases).  This will
    # leave the QDialogButtonBox needing to be added by hand, but I
    # don't think we can do much about that.  Add a #warning for this.
    $code =~ s/KDialogBase\(([^,\)]*),\s*[^,\)]*,\s*([^,\)]*),\s*([^,]*),\s*([^,\)]*)\)([^\{]*)\{/QDialog($1)$5\{\n    setModal($2);\n    setWindowTitle($3);\n\n\#warning Dialog needs QDialogButtonBox($4)\n/gs;

    # and finally, the coup de grace: a replacement so beautiful it
    # will make you weep with joy
    while ($code =~
	   s/(QDialogButtonBox)([^\)]*)(\(\s*|\|\s*)(\w+[,\) ])/$1$2$3$1::$4/gs)
	# (it's all about the tiny, quiet pause -- the heartbeat --
	# of the "::" before the final "$4" brings down the curtain)
    { }
}


####

# QHBox class no more exists.
# QWidget + QHBoxLayout replace it.
#
# Replace
#    #include <qhbox.h>
# with
#    #include <QWidget>
#    #include <QHBoxLayout>
#
# then change following code
#    QHBox *hbox = new QHBox(yyy));
#    ...
#    WidgetAaa *child1 = new WidgetAaa(uuu, hbox, vvv);
#    ...
#    WidgetBbb *child2 = new WidgetBbb(hbox);
#    ...
#    hbox->setSpacing(...);
#    ...
#    hbox->show();
#    ...
#
# to
#    QWidget *hbox = new QWidget(yyy);
#    QHBoxLayout *hboxLayout = new QHBoxLayout;
#    ...
#    WidgetAaa *child1 = new WidgetAaa(uuu, hbox, vvv);
#    hboxLayout->addWidget(child1);
#    ...
#    WidgetBbb *child2 = new WidgetBbb(hbox);
#    hboxLayout->addWidget(child2);
#    hbox->setLayout(hboxLayout);
#    ...
#    hboxLayout->setSpacing(...);
#    ...
#    hbox->show();
#    ...
#
{
    # If qhbox header is included
    while ($code =~ m/#include\s*<qhbox\.h>/s) {
        # remove it and add QWidget header if necessary
        if ($code =~ m/\n\s*#include\s*<QWidget>/s) {
            $code =~ s/\n\s*#include\s*<qhbox\.h>//gs;
        } else {
            $code =~ s/<qhbox\.h>/<QWidget>/g;
        }

        # then add QHBoxLayout header if necessary
        if ($code !~ m/\n\s*#include\s*<QHBoxLayout>/s) {
            $code =~ s/<QWidget>/<QWidget>\n#include <QHBoxLayout>/gs;
        }
    }
    
    # Then replace QHBox by QWidget + QHBoxLayout
    my $p = Process->new($code);

    $p->trigger('QHBox * ${hbox} = new QHBox ( ${parent} ) ;');
    $p->replacement('QWidget *${hbox} = new QWidget(${parent});');
    $p->replacement('QHBoxLayout *${hbox}Layout = new QHBoxLayout;');

        $p->target('${widget} * ${child} = new ${widget} ( @{before,} ${hbox} @{,after} ) ;', "A");
        $p->replacement('${widget} *${child} = new ${widget}(@{before,} ${hbox} @{,after});');
        $p->replacement('${hbox}Layout->addWidget(${child});');

        $p->target('${child} = new ${widget} ( @{before,} ${hbox} @{,after} ) ;', "A");
        $p->replacement('${child} = new ${widget}(@{before,} ${hbox} @{,after});');
        $p->replacement('${hbox}Layout->addWidget(${child});');

        $p->target('new ${widget} ( @{before,} ${hbox} @{,after} ) ;', "A");
        $p->replacement('${widget} *${child} = new ${widget}(@{before,} ${hbox} @{,after});');
        $p->replacement('${hbox}Layout->addWidget(${child});');

        $p->addAfterLast("A", '${hbox}->setLayout(${hbox}Layout);');


        # Some methods have moved from QVBox to QVBoxLayout

        $p->target('${hbox} -> setSpacing');
        $p->replacement('${hbox}Layout->setSpacing');

        $p->target('${hbox} -> setStretchFactor');
        $p->replacement('${hbox}Layout->setStretchFactor');

        $p->target('${hbox} -> setMargin');
        $p->replacement('${hbox}Layout->setMargin');

    $code = $p->exec();
}


####

# As QHBox, QVBox class no more exists.
# QWidget + QHBoxLayout replace it.
#
# Do with QHBox the same changes already done with QVBox
#
{
    # If qvbox header is included
    while ($code =~ m/#include\s*<qvbox\.h>/s) {
        # remove it and add QWidget header if necessary
        if ($code =~ m/\n\s*#include\s*<QWidget>/s) {
            $code =~ s/\n\s*#include\s*<qvbox\.h>//gs;
        } else {
            $code =~ s/<qvbox\.h>/<QWidget>/g;
        }

        # then add QVBoxLayout header if necessary
        if ($code !~ m/\n\s*#include\s*<QVBoxLayout>/s) {
            $code =~ s/<QWidget>/<QWidget>\n#include <QVBoxLayout>/gs;
        }
    }
        
    # Then replace QVBox by QWidget + QVBoxLayout
    my $p = Process->new($code);

    $p->trigger('QVBox * ${vbox} = new QVBox ( ${parent} ) ;');
    $p->replacement('QWidget *${vbox} = new QWidget(${parent});');
    $p->replacement('QVBoxLayout *${vbox}Layout = new QVBoxLayout;');

        $p->target('${widget} * ${child} = new ${widget} ( @{before,} ${vbox} @{,after} ) ;', "A");
        $p->replacement('${widget} *${child} = new ${widget}(@{before,} ${vbox} @{,after});');
        $p->replacement('${vbox}Layout->addWidget(${child});');

        $p->target('${child} = new ${widget} ( @{before,} ${vbox} @{,after} ) ;', "A");
        $p->replacement('${child} = new ${widget}(@{before,} ${vbox} @{,after});');
        $p->replacement('${vbox}Layout->addWidget(${child});');


        $p->addAfterLast("A", '${vbox}->setLayout(${vbox}Layout);');


        # Some methods have moved from QVBox to QVBoxLayout

        $p->target('${vbox} -> setSpacing');
        $p->replacement('${vbox}Layout->setSpacing');

        $p->target('${vbox} -> setStretchFactor');
        $p->replacement('${vbox}Layout->setStretchFactor');

        $p->target('${vbox} -> setMargin');
        $p->replacement('${vbox}Layout->setMargin');

    $code = $p->exec();    
}


####

# qcanvas.h features needs a major rewrite--use Qt3Support for these.
# substitute Qt3 variates for qcanavas classses
# Version 2
{
    # Change Widgets to Qt3Support Equiv.
    $code =~ s/\bQCanvas\b/Q3Canvas/gs;
    $code =~ s/\bQCanvasEllipse\b/Q3CanvasEllipse/gs;
    $code =~ s/\bQCanvasItem\b/Q3CanvasItem/gs;
    $code =~ s/\bQCanvasItemList\b/Q3CanvasItemList/gs;
    $code =~ s/\bQCanvasLine\b/Q3CanvasLine/gs;
    $code =~ s/\bQCanvasPixmap\b/Q3CanvasPixmap/gs;
    $code =~ s/\bQCanvasPixmapArray\b/Q3CanvasPixmapArray/gs;
    $code =~ s/\bQCanvasPolygon\b/Q3CanvasPolygon/gs;
    $code =~ s/\bQCanvasPolygonalItem\b/Q3CanvasPolygonalItem/gs;
    $code =~ s/\bQCanvasRectangle\b/Q3CanvasRectangle/gs;
    $code =~ s/\bQCanvasSpline\b/Q3CanvasSpline/gs;
    $code =~ s/\bQCanvasSprite\b/Q3CanvasSprite/gs;
    $code =~ s/\bQCanvasText\b/Q3CanvasText/gs;
    $code =~ s/\bQCanvasView\b/Q3CanvasView/gs;

    # Each old QCanvasXxx widget now has its own header file
    # All items use to fall under qcanvas.h

    # change all qcanvas classes to Qt3Support equiv.

    #create header insertion point
    if ($code =~ m/\n\#include\s/s) {
        $code =~ s/\n\#include\s/\n_PLOB_AddIncludes\n\#include /s;
    } else {
        $code =~ s/^/\n_PLOB_AddIncludes/s;
    }

    if ($code =~ m/\bQ3Canvas\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3Canvas>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasEllipse\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasEllipse>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasItem\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasItem>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasItemList\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasItemList>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasLine\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasLine>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasPixmap\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasPixmap>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasPixmapArray\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasPixmapArray>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasPolygon\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasPolygon>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasPolygonalItem\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasPolygonalItem>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasRectangle\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasRectangle>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasSpline\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasSpline>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasSprite\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasSprite>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasText\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasText>\n_PLOB_AddIncludes/s;
    }
    if ($code =~ m/\bQ3CanvasView\b/s) {
        $code =~ s/_PLOB_AddIncludes/\#include <Q3CanvasView>\n_PLOB_AddIncludes/s;
    }

    # Clean up _PLOB_ stuff
    $code =~ s/\n_PLOB_AddIncludes//gs;

    #Remove qcanvas header
    $code =~ s/\n\#include\s<qvcanvas\.h>//gs;
}


# QColor classes now are QColormap changed updated in convert.pl line 88
# static objects colors Qt::colorname now enums and need QColor(Qt::colorname)
{
    $code =~ s/\bQt::color0\b/QColor(Qt::color0)/gs;
    $code =~ s/\bQt::color1\b/QColor(Qt::color1)/gs;
    $code =~ s/\bQt::black\b/QColor(Qt::black)/gs;
    $code =~ s/\bQt::white\b/QColor(Qt::white)/gs;
    $code =~ s/\bQt::darkGray\b/QColor(Qt::darkGray)/gs;
    $code =~ s/\bQt::gray\b/QColor(Qt::gray)/gs;
    $code =~ s/\bQt::lightGray\b/QColor(Qt::lightGray)/gs;
    $code =~ s/\bQt::red\b/QColor(Qt::red)/gs;
    $code =~ s/\bQt::green\b/QColor(Qt::green)/gs;
    $code =~ s/\bQt::blue\b/QColor(Qt::blue)/gs;
    $code =~ s/\bQt::cyan\b/QColor(Qt::cyan)/gs;
    $code =~ s/\bQt::magenta\b/QColor(Qt::magenta)/gs;
    $code =~ s/\bQt::yellow\b/QColor(Qt::yellow)/gs;
    $code =~ s/\bQt::darkRed\b/QColor(Qt::darkRed)/gs;
    $code =~ s/\bQt::darkGreen\b/QColor(Qt::darkGreen)/gs;
    $code =~ s/\bQt::darkBlue\b/QColor(Qt::darkBlue)/gs;
    $code =~ s/\bQt::darkCyan\b/QColor(Qt::darkCyan)/gs;
    $code =~ s/\bQt::darkMagenta\b/QColor(Qt::darkMagenta)/gs;
    $code =~ s/\bQt::darkYellow\b/QColor(Qt::darkYellow)/gs;
    $code =~ s/\bQt::transparent\b/QColor(Qt::transparent)/gs;
    #remove duplicate QColor( if ran more than once
    $code =~ s/(QColor\(){2}(Qt::\w+)\)/QColor\($2/gs;

}

####

#  Type Names Direct Replacements
#  http://doc.trolltech.com/4.3/porting4.html

$code =~ s/\bQWMatrix\b/QMatrix/gs;
$code =~ s/\bQGuardedPtr\b/QPointer/gs;
$code =~ s/\bQStyle::SFlags\b/QStyle::State/gs;

####

#  Enum Values Direct Replacements
#  http://doc.trolltech.com/4.3/porting4.html
#  May be more without scoping, but not safe to
#  direct replace.

$code =~ s/\bQButton::NoChange\b/QCheckBox::NoChange/gs;
$code =~ s/\bQButton::Off\b/QCheckBox::Off/gs;
$code =~ s/\bQButton::On\b/QCheckBox::On/gs;
$code =~ s/\bQFrame::TabWidgetPanel\b/QFrame::StyledPanel/gs;
$code =~ s/\bQSlider::Below\b/QSlider::TicksBelow/gs;
# Qstyle & QTabBar subst. below mostly affect klearlook stuff--oh, well!
$code =~ s/\bQStyle::Style_Down\b/QStyle::State_DownArrow/gs;
$code =~ s/\bQStyle::Style_Enabled\b/QStyle::State_Enabled/gs;
$code =~ s/\bQStyle::Style_MouseOver\b/QStyle::State_MouseOver/gs;
$code =~ s/\bQStyle::Style_On\b/QStyle::State_On/gs;
$code =~ s/\bQStyle::Style_Raised\b/QStyle::State_Raised/gs;
$code =~ s/\bQStyle::Style_Sunken\b/QStyle::State_Sunken/gs;
$code =~ s/\bQTabBar::RoundedAbove\b/QTabBar::RoundedNorth/gs;
$code =~ s/\bQTabBar::RoundedBelow\b/QTabBar::RoundedSouth/gs;
$code =~ s/\bQTabBar::TriangularAbove\b/QTabBar::TriangularNorth/gs;
$code =~ s/\bQTabBar::TriangularBelow\b/QTabBar::TriangularSouth/gs;
$code =~ s/\bQWidget::NoFocus\b/Qt::NoFocus/gs;
$code =~ s/\bQWidget::WheelFocus\b/Qt::WheelFocus/gs;
$code =~ s/\bQt::AltButton\b/Qt::AltModifier/gs;
$code =~ s/\bQt::ControlButton\b/Qt::ControlModifier/gs;
$code =~ s/\bQt::Left\b/Qt::DockLeft/gs;
$code =~ s/\bQt::Right\b/Qt::DockRight/gs;
$code =~ s/\bQt::ShiftButton\b/Qt::ShiftModifier/gs;
$code =~ s/\bQt::ShowPrefix\b/Qt::TextShowMnemonic/gs;
$code =~ s/\bQt::Top\b/Qt::DockTop/gs;
$code =~ s/\bQt::TopLeft\b/Qt::TopLeftCorner/gs;
$code =~ s/\bQt::WordBreak\b/Qt::TextWordWrap/gs;

####

# ZoomSlider.h has some problems that snowball and make a few tiny problems show
# up as 150 errors.  I had to go to ridiculous pains on this, and it would have
# been less retarded of me just to commit some manual changes to the one file.
#
# Oh well.

$code =~ s/\bOrientation/Qt::Orientation/gs;
$code =~ s/\bBelow\b/TicksBelow/gs;

# which above calls up new errors to my attention, which seem easily fixable:
#
# If you use a Q3ButtonGroup, Q3HButtonGroup, or Q3VButtonGroup as a widget and
# want to port to Qt 4, you can replace it with QGroupBox. In Qt 4, radio
# buttons with the same parent are automatically part of an exclusive group, so
# you normally don't need to do anything else. See also the section on QGroupBox
# below.

$code =~ s/QButtonGroup/QGroupBox/gs;
$code =~ s/qbuttongroup\.h/QGroupBox/gs;
$code =~ s/QHButtonGroup/QGroupBox/gs;
$code =~ s/qhbuttongroup\.h/QGroupBox/gs;
$code =~ s/QVButtonGroup/QGroupBox/gs;
$code =~ s/qvbuttongroup\.h/QGroupBox/gs;

# (This all seems a little iffy.  Lots of new errors about QGroupBox.  Maybe
# they're fixable, and maybe the above was just a horrible idea.)

####

# QTable becomes either QTableView or QTableWidget.  I spent about four hours
# poking around on this one, as explained on the devel list.  I have concluded
# that the expedient thing to do is skip it and use the Q3Table for now.  If
# anyone has a brighter idea, please feel free to deal with this a different
# way, but that's the best I can manage.
#

# (THE RESULTING CONVERTED CODE DOESN'T WORK AS EXPECTED FOR SOME REASON, SO I'M
# COMMENTING OUT FOR NOW.  MAYBE I'M JUST TIRED.)
#$code =~ s/qtable\.h/Q3Table/gs;
#$code =~ s/qtableitem\.h/Q3TableItem/gs;
#$code =~ s/qcombotableitem\.h/Q3ComboTableItem/gs;
#$code =~ s/QTable/Q3Table/gs;
#$code =~ s/QComboTable/Q3ComboTable/gs;

####

# QDataStream (cast) fix:
# QDataStream takes a (qint??) cast not a (long) or (int) 
# my (Julie's) g++ comipler shows a sizeof 4 bytes for int, and long
# solution replace casts to (quint64)
{
    $code =~ s/\bstreamOut\s<<\s\((long|int)\)/streamOut << \(qint64\)/gs;
    $code =~ s/\bstreamOut\s<<\s(\d+)[lLiI]/streamOut << \(qint64\)$1/gs;
}

####

# QDataStream stream(In|Out)fix:
# QDataStream contructors first argument must be a pointer.
# solution is to send the address of data or replyData via '&'
# 
{
    $code =~ s/\bQDataStream\sstream(Out|In)\((\w+),/QDataStream stream$1\($2\&,/gs;
}


print $code;

