/* -*- c-basic-offset: 4 indent-tabs-mode: nil -*- vi:set ts=8 sts=4 sw=4: */

/*
    Rosegarden
    A MIDI and audio sequencer and musical notation editor.
    Copyright 2000-2009 the Rosegarden development team.

    Other copyrights also apply to some parts of this work.  Please
    see the AUTHORS file and individual file headers for details.

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License as
    published by the Free Software Foundation; either version 2 of the
    License, or (at your option) any later version.  See the file
    COPYING included with this distribution for more information.
*/

/* NOTE: using #setObjectNamedObject has higher specificity than
 * Rosegarden--OurClass, which is nearly worthless in most cases
 */

/* Start off with a global black background, because it has proven impossible to
 * address every last bit of background color without resorting to this.
 */
QWidget
{
    background: #000000;
    color: #FFFFFF; /* undocumented, but it works, and it's necessary */
}

QMainWindow::separator
{
    width: 5px; /* when vertical */
    height: 5px; /* when horizontal */
}

QMainWindow::separator:hover
{
    background-color: #CCDFFF;
}

QDockWidget
{
    border: none;
    titlebar-close-icon: url(:pixmaps/style/title-close.png);
    titlebar-normal-icon: url(:pixmaps/style/title-undock.png);
}

QDockWidget::close-button,
QDockWidget::float-button
{
    border: 1px solid #AAAAAA;
    border-radius: 3px;
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #999999, stop:1 #DDDDDD);
    color: #000000;
    padding: 0px;
    icon-size: 16px; /* maximum icon size */
}

/* Color the View (formerly RosegardenGUIView, not sure what the class will be
 * renamed to, so we're using the objectName to reference it) background
 * transparent, because this allows the overrides for the track buttons and
 * whatnot to show through.
 */
/*#View QWidget
{
    background-color: transparent;
}*/

/*#View QWidget > QWidget > QWidget > QWidget
{
    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #BBBBBB, stop:1 #DDDDDD);
    color: #000000;
}


#View QWidget > QWidget > QWidget > QWidget > QWidget
{
    background-color: #000000;
    color: #000000;
}*/


#View QDialog QWidget,
#MinorDialog QWidget,
#tempoview QWidget
{
    background-color: #000000;
}


/* QToolBar

Supports the box model.  The :top, :left, :right, :bottom pseudo states
depending on the area in which the tool bar is grouped.  The :first, :last,
:middle, :only-one pseudo states indicator the position of the tool bar within a
line group (See QStyleOptionToolBar::positionWithinLine).  The separator of a
QToolBar is styled using the ::separator subcontrol.  The handle (to move the
toolbar) is styled using the ::handle subcontrol. */

/* Toolbars use gradient backgrounds that must be light enough to allow contrast
 * with black icons.  Top/bottom and left/right require different gradients to
 * get the proper look.
 */
QToolBar::top,
QToolBar::bottom,
#App QToolBar::top,
#App QToolBar::bottom,
#matrixview QToolBar::top,
#matrixview QToolBar::bottom,
#tempoview QToolBar::top,
#tempoview QToolBar::bottom
{
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #999999, stop:1 #DDDDDD);
    color: #000000;
}

QToolBar::left,
QToolBar::right,
#App QToolBar::left,
#App QToolBar::right,
#matrixview QToolBar::left,
#matrixview QToolBar::right,
#tempoview QToolBar::left,
#tempoview QToolBar::right
{
    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #DDDDDD, stop:1 #999999);
    color: #000000;
}

/* Toolbars must be light enough for black icons, therefore black text on their
 * QLabels, rather than white, is more appropriate.
 */
QToolBar::top QLabel,
QToolBar::bottom QLabel,
#App QToolBar::top QLabel,
#App QToolBar::bottom QLabel,
#matrixview QToolBar::top QLabel,
#matrixview QToolBar::bottom QLabel,
#tempoview QToolBar::top QLabel,
#tempoview QToolBar::bottom QLabel,
QToolBar::left QLabel,
QToolBar::right QLabel,
#App QToolBar::left QLabel,
#App QToolBar::right QLabel,
#matrixview QToolBar::left QLabel,
#matrixview QToolBar::right QLabel,
#tempoview QToolBar::left QLabel,
#tempoview QToolBar::right QLabel
{
    background-color: transparent;
    color: #000000;
}

QToolBar::handle,
#tempoview QToolBar::handle,
#matrixview QToolBar::handle,
#App QToolBar::handle
{
    image: url(:/pixmaps/style/htoolbar-separator.png);
    
/*    background-color: #404040;
    width: 5px; */
}


/*  QLabel
 
Supports the box model. Does not support the :hover pseudo-state.  Since 4.3,
setting a stylesheet on a QLabel automatically sets the QFrame::frameStyle
property to QFrame::StyledPanel. */

/* QLabel is an awful lot of foreground text throughout the application,
 * including the contents of message boxes and various other texts one wouldn't
 * necessarily expect to be QLabel per se.
 */
QLabel,
#View QLabel,
#MinorDialog QLabel,
#tempoview QLabel,
#matrixview QLabel,
#RosegardenParameterArea QLabel,
#App QLabel
{
    background: transparent;
    color: white;
}

/*  QMenu
  
Supports the box model.  Individual items are styled using the ::item
subcontrol. In addition to the usually supported pseudo states, item subcontrol
supports the :selected, :default, :exclusive and the non-exclusive pseudo
states.  The indicator of checkable menu items is styled using the ::indicator
subcontrol.  The separator is styled using the ::separator subcontrol.  For
items with a sub menu, the arrow marks are styled using the right-arrow and
left-arrow.  The scroller is styled using the ::scroller.  The tear-off is
styled using the ::tear-off. */

QMenu,
#tempoview QMenu,
#matrixview QMenu,
#App QMenu,
#View QMenu
{
/*    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #AAAAAA stop:1 #999999);*/
    background-color: #EEEEEE;
    border: 1px solid black;
}

QMenu::item,
#tempoview QMenu::item,
#matrixview QMenu::item,
#App QMenu::item,
#View QMenu::item
{
    /* sets background of menu item. set this to something non-transparent
       if you want menu color and menu item color to be different */
       background-color: transparent;
       color: #000000;
       padding: 2px 25px 2px 20px;
       border: 1px solid transparent;
}

/* Menu selection background color
 */
QMenu::item:selected,
#tempoview QMenu::item:selected,
#matrixview QMenu::item:selected,
#App QMenu::item:selected,
#View QMenu::item:selected
{
    background-color: #80AFFF;
    color: #FFFFFF;
    font: bold;
}

/* non-exclusive indicator = check box style indicator (see QActionGroup::setExclusive) */
QMenu::indicator:non-exclusive:unchecked
{
    image: url(:pixmaps/style/checkbox_unchecked.png);
}

QMenu::indicator:non-exclusive:unchecked:selected
{
    image: url(:pixmaps/style/checkbox_unchecked_hover.png);
}

QMenu::indicator:non-exclusive:checked
{
    image: url(:pixmaps/style/checkbox_checked.png);
}

QMenu::indicator:non-exclusive:checked:selected
{
    image: url(:pixmaps/style/checkbox_checked_hover.png);
}

/* exclusive indicator = radio button style indicator (see QActionGroup::setExclusive) */
QMenu::indicator:exclusive:unchecked
{
    image: url(:pixmaps/style/radiobutton_unchecked.png);
}

QMenu::indicator:exclusive:unchecked:selected
{
    image: url(:pixmaps/style/radiobutton_unchecked_hover.png);
}

QMenu::indicator:exclusive:checked
{
    image: url(:pixmaps/style/radiobutton_checked.png);
}

QMenu::indicator:exclusive:checked:selected
{
    image: url(:pixmaps/style/radiobutton_checked_hover.png);
}

/*
#View QLabel
{
    background-color: transparent;
    color: #FFFFFF;
}*/

#TRACK_BUTTONS QWidget
{
    background-color: #DDDDDD;
    color: #000000;
}

/*#TrackButtonFrame QFrame
{
    color: red;
}*/

/*QInputDialog QLabel,
#View QInputDialog QLabel
{
    background-color: transparent;
    color #FFFFFF;
}*/




/*  QAbstractScrollArea.

Supports the box model. All derivatives of QAbstractScrollArea, including
QTextEdit, and QAbstractItemView (all item view classes), support scrollable
backgrounds using background-attachment. Setting the background-attachment to
fixed provides a background-image that does not scroll with the viewport.
Setting the background-attachment to scroll, scrolls the background-image when
the scroll bars move.  See Customizing QAbstractScrollArea for an example. */

QAbstractScrollArea
{
}

/*  QCheckBox

Supports the box model. The check indicator can be styled using the ::indicator
subcontrol. By default, the indicator is placed in the Top Left corner of the
Contents rectangle of the widget.  The spacing property specifies the spacing
between the check indicator and the text. */

QCheckBox QLabel,
QCheckBox
{
    color: #FFFFFF
}

QCheckBox::indicator
{
    background: url(:pixmaps/style/checkbox-checked.png);
}

QCheckBox
{
    spacing: 5px;
}

QCheckBox::indicator
{
    width: 13px;
    height: 13px;
}

QCheckBox::indicator:unchecked
{
    image: url(:pixmaps/style/checkbox_unchecked.png);
}

QCheckBox::indicator:unchecked:hover
{
    image: url(:pixmaps/style/checkbox_unchecked_hover.png);
}

QCheckBox::indicator:unchecked:pressed
{
    image: url(:pixmaps/style/checkbox_unchecked_pressed.png);
}

QCheckBox::indicator:checked
{
    image: url(:pixmaps/style/checkbox_checked.png);
}

QCheckBox::indicator:checked:hover
{
    image: url(:pixmaps/style/checkbox_checked_hover.png);
}

QCheckBox::indicator:checked:pressed
{
    image: url(:pixmaps/style/checkbox_checked_pressed.png);
}

QCheckBox::indicator:indeterminate
{
    image: url(:pixmaps/style/checkbox_indeterminate.png);
}

QCheckBox::indicator:indeterminate:hover
{
    image: url(:pixmaps/style/checkbox_indeterminate_hover.png);
}

QCheckBox::indicator:indeterminate:pressed
{
    image: url(:pixmaps/style/checkbox_indeterminate_pressed.png);
}


/*  QRadioButton

Supports the box model. The check indicator can be styled using the ::indicator
subcontrol. By default, the indicator is placed in the Top Left corner of the
Contents rectangle of the widget.  The spacing property specifies the spacing
between the check indicator and the text. */

QRadioButton QLabel
{
    color: #FFFFFF;
}

QRadioButton::indicator
{
    width: 13px;
    height: 13px;
}

QRadioButton::indicator::unchecked
{
    image: url(:pixmaps/style/radiobutton_unchecked.png);
}

QRadioButton::indicator:unchecked:hover
{
    image: url(:pixmaps/style/radiobutton_unchecked_hover.png);
}

QRadioButton::indicator:unchecked:pressed
{
    image: url(:pixmaps/style/radiobutton_unchecked_pressed.png);
}

QRadioButton::indicator::checked
{
    image: url(:pixmaps/style/radiobutton_checked.png);
}

QRadioButton::indicator:checked:hover
{
    image: url(:pixmaps/style/radiobutton_checked_hover.png);
}

QRadioButton::indicator:checked:pressed
{
    image: url(:pixmaps/style/radiobutton_checked_pressed.png);
}


/*  QColumnView

The grip can be styled be using the image property. The arrow indicators can by
styled using the ::left-arrow subcontrol and the ::right-arrow subcontrol. */

QColumnView
{
}


/*  QDateEdit   See QSpinBox.
    QDateTimeEdit   See QSpinBox. */


/*  QDialog

Supports only the background, background-clip and background-origin properties.
If you subclass from QDialog, you need to provide a paintEvent for your custom
QDialog as below:

void CustomDialog::paintEvent(QPaintEvent *) { QStyleOption opt; opt.init(this);
QPainter p(this); style()->drawPrimitive(QStyle::PE_Widget, &opt, &p, this); }

The above code is a no-operation if there is no stylesheet set.  Warning: Make
sure you define the Q_OBJECT macro for your custom widget. */

QDialog
{
    /*background: green; */
}


/*  QDialogButtonBox 

  The layout of buttons can be altered using the button-layout property. */

QDialogButtonBox
{
    background-color: yellow;
    color: red;
}


/*  QDoubleSpinBox   See QSpinBox. */


/*  QFrame

Supports the box model.  Since 4.3, setting a stylesheet on a QLabel
automatically sets the QFrame::frameStyle property to QFrame::StyledPanel. */

QFrame
{
    /* We probably want these to remain invisible, and not style them.  If there
     * are exceptions, they'll have to be addressed on a case by case basis,
     * because styling QFrame in general is definitely a BAD idea */
}


/*  QHeaderView 

Supports the box model. The sections of the header view are styled using the
::section sub control. The section Sub-control supports the :middle, :first,
:last, :only-one, :next-selected, :previous-selected, :selected pseudo states.
Sort indicator in can be styled using the ::up-arrow and the ::down-arrow
Sub-control. */

/* This is the headers for various list views in various dialogs, especially.
 * Apparently we can't style the background easily, and at this point I'm
 * willing to live with that. White on black it is.
 */
QHeaderView
{
    color: #FFFFFF;
}


/*  QListView (affects QListWidget)
  
Supports the box model. When alternating row colors is enabled, the alternating
colors can be styled using the alternate-background-color property.  The color
and background of the selected item is styled using selection-color and
selection-background-color respectively.  The selection behavior is controlled
by the #show-decoration-selected-prop property.  See QAbsractScrollArea to style
scrollable backgrounds. */

QListView,
#MinorDialog,
#tempoview QListView,
#App QListView
{
    background-color: green;
}

QList QWidget
{
    background-color: orange;
}


/*  QMenuBar
  
Supports the box model. The spacing property specifies the spacing between menu
items. Individual items are styled using the ::item subcontrol. */

QMenuBar,
#tempoview QMenuBar,
#App QMenuBar
{
    background-color: #202020;
}

QMenuBar::item,
#tempoview QMenuBar::item,
#App QMenuBar::item
{
    spacing: 3px; /* spacing between menu bar items */
    padding: 1px 4px;
    background: transparent;
    color: #FFFFFF;
}

/* Selected item background
 */
QMenuBar::item:selected,
#tempoview QMenuBar::item:selected,
#App QMenuBar::item:selected
{
    background-color: #80AFFF;
    color: #FFFFFF;
    font: bold;
}

QMenuBar::item:pressed,
#tempoview QMenuBar::item:pressed,
#App QMenuBar::item:pressed
{
/*    background: #EEEEEE;*/
    background-color: #BBCEFF;
}


/*  QMessageBox
  
The messagebox-text-interaction-flags property can be used to alter the
interaction with text in the message box. */

QMessageBox
{
    background: #404040;
}



/*  QProgressBar
  
Supports the box model. The chunks of the progress bar can be styled using the
::chunk subcontrol. The chunk is displayed on the Contents rectangle of the
widget.  If the progress bar displays text, use the text-align property to
position the text.  Indeterminate progress bars have the :indeterminate pseudo
state set. */

QProgressBar
{
}



/*  QScrollBar

Supports the box model. The Contents rectangle of the widget is considered to be
the groove over which the slider moves. The extent of the QScrollBar (i.e the
width or the height depending on the orientation) is set using the width or
height property respectively. To determine the orientation, use the :horizontal
and the :vertical pseudo states.  The slider can be styled using the ::handle
subcontrol. Setting the min-width or min-height provides size contraints for the
slider depending on the orientation.  The ::add-line subcontrol can be used to
style the button to add a line. By default, the add-line subcontrol is placed in
top right corner of the Border rectangle of the widget. Depending on the
orientation the ::right-arrow or ::down-arrow. By default, the arrows are placed
in the center of the Contents rectangle of the add-line subcontrol.  The
::sub-line subcontrol can be used to style the button to subtract a line. By
default, the sub-line subcontrol is placed in bottom right corner of the Border
rectangle of the widget. Depending on the orientation the ::left-arrow or
::up-arrow. By default, the arrows are placed in the center of the Contents
rectangle of the sub-line subcontrol.  The ::sub-page subcontrol can be used to
style the region of the slider that subtracts a page. The ::add-page subcontrol
can be used to style the region of the slider that adds a page. */

/* HORIZONTAL */
QScrollBar:left-arrow:horizontal
{
    image: url(:pixmaps/style/arrow-left.png);
}

QScrollBar::right-arrow:horizontal
{
    image: url(:pixmaps/style/arrow-right.png);
}

QScrollBar::add-page:horizontal,
QScrollBar::sub-page:horizontal
{
    background: #404040;
}

QScrollBar::add-line:horizontal
{
    border: 2px solid #404040;
    background: #808080;
    width: 20px;
    subcontrol-position: right;
    subcontrol-origin: margin;
}

QScrollBar::sub-line:horizontal
{
    border: 2px solid #404040;
    background: #808080;
    width: 20px;
    subcontrol-position: left;
    subcontrol-origin: margin;
}

QScrollBar:horizontal
{
    border: 2px solid #404040;
    background-color: none;
    height: 15px;
    margin: 0px 20px 0 20px;
}

QScrollBar::handle:horizontal
{
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #999999, stop:1 #DDDDDD);
    min-width: 20px;
}


/* VERTICAL */
QScrollBar:up-arrow:vertical
{
    image: url(:pixmaps/style/arrow-up.png);
}

QScrollBar::down-arrow:vertical
{
    image: url(:pixmaps/style/arrow-down.png);
}

QScrollBar::add-page:vertical,
QScrollBar::sub-page:vertical
{
    background: #404040;
}

QScrollBar::add-line:vertical
{
    border: 2px solid #404040;
    background: #808080;
    height: 20px;
    subcontrol-position: bottom;
    subcontrol-origin: margin;
}

QScrollBar::sub-line:vertical
{
    border: 2px solid #404040;
    background: #808080;
    height: 20px;
    subcontrol-position: top;
    subcontrol-origin: margin;
}

QScrollBar:vertical
{
    border: 2px solid #404040;
    background-color: none;
    width: 15px;
    margin: 20px 0 20px 0;
}

QScrollBar::handle:vertical
{
    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #999999, stop:1 #DDDDDD);
    min-width: 20px;
}



/*  QSizeGrip

Supports the width, height, and image properties. */

QSizeGrip
{
}


/*  QSlider

Supports the box model. For horizontal slides, the min-width and height
properties must be provided. For vertical sliders, the min-height and width
properties must be provided.  The groove of the slider is styled using the
::groove. The groove is positioned by default in the Contents rectangle of the
widget. The thumb of the slider is styled using ::handle subcontrol. The
subcontrol moves in the Contents rectangle of the groove subcontrol. */

QSlider::horizontal
{
    border: 0px solid transparent;
    background: transparent;
    min-width: 50px;
    min-height: 5px;
}

QSlider::handle:horizontal
{
    background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #b4b4b4, stop:1 #8f8f8f);
    border: 1px solid #5c5c5c;
    width: 8px;
    height 8px;
    margin: -5px 0;
    border-radius: 3px;
}

QSlider::groove:horizontal
{
    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 #E0E0E0, stop:1 #EEEEEE);
    height: 5px;
    position: absolute;
    left: 4px;
    right: 4px;
}



/*  QSpinBox
  
The frame of the spin box can be styled using the box model.  The up button and
arrow can be styled using the ::up-button and ::up-arrow subcontrols. By
default, the up-button is placed in the top right corner in the Padding
rectangle of the widget. Without an explicit size, it occupies half the height
of its reference rectangle. The up-arrow is placed in the center of the Contents
rectangle of the up-button.  The down button and arrow can be styled using the
::down-button and ::down-arrow subcontrols. By default, the down-button is
placed in the bottom right corner in the Padding rectangle of the widget.
Without an explicit size, it occupies half the height of its reference
rectangle. The bottom-arrow is placed in the center of the Contents rectangle of
the bottom-button. */

QSpinBox
{
    color: #FFFFFF;
}


/*  QSplitter

Supports the box model. The handle of the splitter is styled using the ::handle
subcontrol. */

QSplitter
{
    background: yellow;
}


/*  QStatusBar

Supports only the background property. The frame for individual items can be
style using the ::item subcontrol. */

QStatusBar
{
}



/*  QTabBar
  
Individual tabs may be styled using the ::tab subcontrol. The tabs support the
:only-one, :first, :last, :middle, :previous--selected, :next-selected,
:selected pseudo states.  The :top, :left, :right, :bottom pseudo states
depending on the orientation of the tabs.  Overlapping tabs for the selected
state are created by using negative margins or using the absolute position
scheme.  The tear indicator of the QTabBar is styled using the ::tear
subcontrol.  QTabBar used two QToolButtons for its scrollers that can be styled
using the QTabBar QToolButton selector. To specify the width of the scroll
button use the ::scroller subcontrol.  The alignment of the tabs within the
QTabBar is styled using the alignment property.  Warning: To change the position
of the QTabBar within a QTabWidget, use the tab-bar subcontrol (and set
subcontrol-position). */

/*QTabBar
{
    background-color: green;
    color: yellow;
    font: bold;
}*/

/* pasted demo code -- QTabBar and QTabWidget are somewhat complicated to
style, rather like menus */

QTabWidget::pane
{ /* The tab widget frame */
    border-top: 2px solid #C2C7CB;
}

QTabWidget::tab-bar
{
    left: 5px; /* move to the right by 5px */
}

/* Style the tab using the tab sub-control. Note that it reads QTabBar _not_ QTabWidget */
QTabBar::tab
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #E1E1E1, stop: 0.4 #DDDDDD, stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);
    border: 2px solid #C4C4C3;
    border-bottom-color: #C2C7CB; /* same as the pane color */
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
    min-width: 8ex;
    padding: 2px;
}

QTabBar::tab:selected,
QTabBar::tab:hover
{
    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #fafafa, stop: 0.4 #f4f4f4, stop: 0.5 #e7e7e7, stop: 1.0 #fafafa);
}

QTabBar::tab:selected
{
    border-color: #9B9B9B;
    border-bottom-color: #C2C7CB; /*same as pane color */
}

QTabBar::tab:!selected
{
    margin-top: 2px; /* make non-selected tabs look smaller*/
}


/*  QTabWidget

The frame of the tab widget is styled using the ::pane subcontrol. The left and
right corners are styled using the ::left-corner and ::right-corner
respectively. The position of the the tab bar is controlled using the ::tab-bar
subcontrol.  By default, the subcontrols have positions of a QTabWidget in the
QWindowsStyle. To place the QTabBar in the center, set the subcontrol-position
of the tab-bar subcontrol.  The :top, :left, :right, :bottom pseudo states
depending on the orientation of the tabs. */

/*QTabWidget
{
    background-color: #000000;
    color: #FFFFFF;
}*/



/*   QTableView (affects QTableWidget)

Supports the box model. When alternating row colors is enabled, the alternating
colors can be styled using the alternate-background-color property.  The color
and background of the selected item is styled using selection-color and
selection-background-color respectively.  The corner widget in a QTableView is
implemented as a QAbstractButton and can be styled using the "QTableView
QTableCornerButton::section" selector.  The color of the grid can be specified
using the gridline-color property.  See QAbsractScrollArea to style scrollable
backgrounds. */

QTableView
{
}


/*  QTextEdit

Supports the box model.  The color and background of selected text is styled
using selection-color and selection-background-color respectively.  See
QAbsractScrollArea to style scrollable backgrounds.  QTimeEdit   See QSpinBox.
*/

QTextEdit
{
}


/*  QTreeView (affects QTreeWidget)

Supports the box model. When alternating row colors is enabled, the alternating
colors can be styled using the alternate-background-color property.  The color
and background of the selected item is styled using selection-color and
selection-background-color respectively.  The branches of the tree view can be
styled using the ::branch subcontrol. The ::branch Sub-control supports the
:open, :closed, :has-sibling and :has-children pseudo states.  See
QAbsractScrollArea to style scrollable backgrounds. */

QTreeView,
#View QTreeView
{
    background-color: #FFFFFF;
    color: #000000;
}

#View QTreeView QLabel
{
    color: #FFFFFF;
}

QWidget#ROTARY
{
    background-color: transparent;
}

QWidget#LED
{
    background-color: transparent;
}

#Fader
{
    background-color: transparent;
}

/*QWidget##matrixview
{
    background-color: #000000;
}*/

/* the audio and MIDI mixer windows */
/* (actually only affects audio, because the MIDI mixer window is more
 * complicated) */
QWidget#MIXER_WINDOW
{
    background-color: #000000;
}

/* internal fader widgets need a style-set transparent background at a minimum
 * */
QWidget#FADER
{
    /* or maybe not...  this is actually too simplistic to work, and needs
     * further investigation */
    background-color: transparent;
}


/*  QGroupBox

Supports the box model. The title can be styled using the ::title subcontrol.
By default, the title is placed depending on QGroupBox::textAlignment.  In the
case of a checkable QGroupBox, the title includes the check indicator. The
indicator is styled using the the ::indicator subcontrol. The spacing property
can be used to control the spacing between the text and indicator. */

QGroupBox,
#View QGroupBox,
#App QGroupBox,
#App QWidget QGroupBox,
#RosegardenParameterArea QGroupBox
{
    background: #404040;
    color: #FFFFFF;
    border: 2px solid #BBBBBB;
    border-radius: 4px;
    padding: 2px;
    margin-top: 1ex;
}


QGroupBox::title,
#View QGroupBox::title,
#App QGroupBox:title,
#App QWidget QGroupBox:title,
#RosegardenParameterArea QGroupBox::title
{
    color: #FFFFFF;
    subcontrol-origin: margin;
    subcontrol-position: top center;
    padding: 0 5px;
}

QGroupBox QWidget,
#MinorDialog QGroupBox QWidget,
#tempoview QGroupBox QWidget,
#App QGroupBox QWidget
{
    background: #404040;
}


/*  QToolButton
  
Supports the box model.  If the QToolButton has a menu, is ::menu-indicator
subcontrol can be used to style the indicator. By default, the menu-indicator is
positioned at the bottom right of the Padding rectangle of the widget.  If the
QToolButton is in QToolButton::MenuButtonPopup mode, the ::menu-button
subcontrol is used to draw the menu button. ::menu-arrow subcontrol is used to
draw the menu arrow inside the menu-button. By default, it is positioned in the
center of the Contents rectangle of the the menu-button subcontrol.  When the
QToolButton displays arrows, the ::up-arrow, ::down-arrow, ::left-arrow and
::right-arrow subcontrols are used.  Warning: If you only set a background-color
on a QToolButton, the background will not appear unless you set the border
property to some value. This is because, by default, the QToolButton draws a
native border which completely overlaps the background-color. For example,
QToolButton { background-color: red; border: none; } */

/* We use tool buttons for the TPB collapsing frame texts, eg. "Playback
 * parameters" and for toolbar buttons
 */
QToolButton,
QToolButton::enabled,
#tempoview QToolButton,
#tempoview QToolButton::enabled,
#View QToolButton,
#View QToolButton::enabled,
#App QToolButton,
#App QToolButton::enabled,
#RosegardenParameterArea QToolButton,
#RosegardenParameterArea QToolButton::enabled
{
    color: #FFFFFF;
    background-color: transparent;
    border: 1px solid transparent;
    border-radius: 2px;
}

QToolButton::pressed,
QToolButton::checked,
#tempoview QToolButton::pressed,
#tempoview QToolButton::checked,
#View QToolButton::pressed,
#View QToolButton::checked,
#App QToolButton::pressed,
#App QToolButton::checked,
#RosegardenParameterArea QToolButton::pressed,
#RosegardenParameterArea QToolButton::checked
{
    border: 1px solid #AAAAAA;
    border-radius: 2px;
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #E0E0E0, stop:1 #EEEEEE);
}

QToolButton::enabled:hover,
#tempoview QToolButton::enabled:hover,
#View QToolButton::enabled:hover,
#App QToolButton::enabled:hover,
#RosegardenParameterArea QToolButton::enabled:hover
{
    border: 1px solid #AAAAAA;
    border-radius: 2px;
    background-color: #CCDFFF;
}

QToolButton::!enabled,
#tempoview QToolButton::!enabled,
#View QToolButton::!enabled,
#App QToolButton::!enabled,
#RosegardenParameterArea QToolButton::!enabled
{
    background-color: transparent;
}


/*  QPushButton
 
Supports the box model. Supports the :default, :flat, :checked pseudo states.
For QPushButton with a menu, the menu indicator is styled using the
::menu-indicator subcontrol. Appearance of checkable push buttons can be
customized using the :open and :closed pseudo-states. */

QPushButton::enabled,
#matrixview QPushButton::enabled,
#MinorDialog QPushButton::enabled,
#tempoview QPushButton::enabled,
QWidget#tempoview QPushButton::enabled,
#View QPushButton::enabled,
#View QDialog QPushButton::enabled,
#App QPushButton::enabled,
QInputDialog QPushButton::enabled,
QGroupBox QPushButton::enabled,
#App QGroupBox QPushButton::enabled,
#App QWidget QPushButton::enabled,
#RosegardenParameterArea QPushButton::enabled
{
    border: 1px solid #AAAAAA;
    border-radius: 3px;
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #999999, stop:1 #DDDDDD);
    color: #000000;
/*    min-width: 60px;*/
    padding: 0 5px 0 5px;
}

QPushButton::!enabled,
#matrixview QPushButton::!enabled,
#MinorDialog QPushButton::!enabled,
#tempoview QPushButton::!enabled,
QWidget#tempoview QPushButton::!enabled,
#View QPushButton::!enabled,
#View QDialog QPushButton::!enabled,
#App QPushButton::!enabled,
QInputDialog QPushButton::!enabled,
QGroupBox QPushButton::!enabled,
#App QGroupBox QPushButton::!enabled,
#App QWidget QPushButton::!enabled,
#RosegardenParameterArea QPushButton::!enabled
{
    border: 1px solid #808080;
    border-radius: 3px;
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #808080, stop:1 #999999); 
    color: #000000;
/*    min-width: 60px;*/
    padding: 0 5px 0 5px;
}

QPushButton:hover,
#matrixview QPushButton:hover,
#MinorDialog QPushButton:hover,
#tempoview QPushButton:hover,
#View QPushButton:hover,
#App QPushButton:hover, 
#App QWidget QPushButton:hover,
QInputDialog QPushButton:hover,
QGroupBox QPushButton:hover,
#App QGroupBox QPushButton:hover,
#RosegardenParameterArea QPushButton:hover 
{
    border: 1px solid #AAAAAA;
    border-radius: 3px;
/*    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #999FAF, stop:1 #CCDFFF);*/
    background-color: #CCDFFF;
    color: #000000;
/*    min-width: 60px;*/
}

QPushButton::checked,
QPushButton::pressed,
/*#MinorDialog QPushButton::checked,
#MinorDialog QPushButton::pressed,*/
#tempoview QPushButton::checked,
#tempoview QPushButton::pressed,
#App QPushButton::checked,
#App QPushButton::pressed,
#App QWidget QPushButton::checked,
#App QWidget QPushButton::pressed,
QInputDialog QPushButton::checked,
QInputDialog QPushButton:pressed,
#View QPushButton::checked,
#View QPushButton::pressed,
#RosegardenParameterArea
QPushButton::checked,
#RosegardenParameterArea QPushButton::pressed
{
    border: 1px solid #E0E0E0;
    border-radius: 3px;
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #E0E0E0, stop:1 #EEEEEE);
}


/*  QComboBox

The frame around the combobox can be styled using the box model. The drop-down
button can be styled using the ::drop-down subcontrol. By default, the
drop-down button is placed in the top right corner of the padding rectangle of
the widget. The arrow mark inside the drop-down button can be styled using the
::down-arrow subcontrol. By default, the arrow is placed in the center of the
contents rectangle of the drop-down subcontrol. */

QComboBox::enabled,
QComboBox,
#View QComboBox::enabled,
#View QComboBox,
#App QComboBox::enabled,
#App QComboBox,
#App QWidget QComboBox::enabled,
#App QWidget QComboBox,
QInputDialog QComboBox::enabled,
QInputDialog QComboBox,
#RosegardenParameterArea QComboBox::enabled,
#RosegardenParameterArea QComboBox
{
    border: 1px solid #AAAAAA;
    border-radius: 3px;
    padding: 0 5px 0 5px;
/*    min-width: 6em;*/
    min-width: 2em;
    color: #000000;
}

QComboBox::!enabled,
/*#MinorDialog QComboBox::enabled,*/
#View QComboBox::!enabled,
#App QComboBox::!enabled,
#App QWidget QComboBox::!enabled,
QInputDialog QComboBox::!enabled,
#RosegardenParameterArea QComboBox::!enabled
{
    border: 1px solid #808080;
    border-radius: 3px;
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #808080, stop:1 #999999); 
}

QComboBox::enabled:hover,
QComboBox:hover,
QComboBox::drop-down:hover,
QComboBox::down-arrow:hover,
#App QWidget QComboBox::enabled:hover,
#App QWidget QComboBox:hover,
#App QWidget QComboBox::drop-down:hover,
#App QComboBox::down-arrow:hover,
QInputDialog QComboBox::enabled:hover,
QInputDialog QComboBox:hover,
QInputDialog QComboBox::drop-down:hover,
QInputDialog QComboBox::down-arrow:hover,
#RosegardenParameterArea QComboBox::down-arrow:hover,
#RosegardenParameterArea QComboBox::enabled:hover,
#RosegardenParameterArea QComboBox:hover,
#RosegardenParameterArea QComboBox::drop-down:hover
{
/*    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #999FAF, stop:1 #CCDFFF);*/
    background-color: #CCDFFF;
}

QComboBox::editable,
/*#MinorDialog QComboBox::editable,*/
#View QComboBox::editable,
#App QComboBox::editable,
#App QWidget QComboBox::editable,
QInputDialog QComboBox::edtiable,
#RosegardenParameterArea QComboBox:editable
{
    background-color: orange;
}

QComboBox::!editable,
QComboBox::drop-down:!editable,
#App QWidget QComboBox::!editable,
#App QWidget QComboBox::drop-down:!editable,
QInputDialog QComboBox::drop-down:!edtiable,
#RosegardenParameterArea QComboBox:!editable,
#RosegardenParameterArea QComboBox::drop-down:!editable
{
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #999999, stop:1 #DDDDDD);
}

/* QComboBox gets the "on" state when the popup is open */
QComboBox::!editable:on,
QComboBox::drop-down:editable:on
#App QWidget QComboBox::!editable:on,
#App QWidget QComboBox::drop-down:editable:on,
QInputDialog QComboBox::drop-down:edtiable:on,
#RosegardenParameterArea QComboBox:!editable:on,
#RosegardenParameterArea QComboBox::drop-down:editable:on
{
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #E0E0E0, stop:1 #EEEEEE);
}

QComboBox::on,
#App QWidget QComboBox::on,
QInputDialog QComboBox::on,
#RosegardenParameterArea QComboBox:on
{ /* shift the text when the popup opens */
    padding-top: 3px;
    padding-left: 4px;
}

QComboBox::drop-down,
#App QWidget QComboBox::drop-down,
QInputDialog QComboBox::drop-down,
#RosegardenParameterArea QComboBox::drop-down
{
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 15px;

    border-left-width: 1px;
    border-left-color: #AAAAAA;
    border-left-style: solid; /* just a single line */
    border-top-right-radius: 3px; /* same radius as the QComboBox */
    border-bottom-right-radius: 3px;
}

QComboBox::down-arrow,
#App QWidget QComboBox::down-arrow,
QInputDialog QComboBox::down-arrow,
#RosegardenParameterArea QComboBox::down-arrow
{
    image: url(:pixmaps/style/arrow-down-small.png);
}

QComboBox::down-arrow:on,
#App QWidget QComboBox::down-arrow:on,
QInputDialog QComboBox::down-arrow:on,
#RosegardenParameterArea QComboBox::down-arrow:on
{
    top: 1px;
    left: 1px;
}

/* The pop-up of the QComboBox is a QAbstractItemView and is styled using the
descendant selector: */

QComboBox QAbstractItemView,
#App QWidget QComboBox QAbstractItemView,
QInputDialog QComboBox QAbstractItemView,
#RosegardenParameterArea QComboBox QAbstractItemView
{
    border: 1px solid #AAAAAA;
    background-color: #FFFFFF;
    selection-background-color: #80AFFF;
    selection-color: #FFFFFF;
    color: #000000;
    font: bold;
}

/*#RosegardenParameterArea QFrame
{
    background-color: transparent;
}

#RosegardenParameterArea QCheckBox
{
    background-color: transparent;
    color: #FFFFFF;
}

#RosegardenParameterArea QWidget#ROTARY
{
    background-color: transparent;
}

#RosegardenParameterArea QWidget#ROTARY QLabel
{
    background-color: transparent;
    color: #FFFFFF;
}

#RosegardenParameterArea QWidget#ROTARY_LABEL
{
    background-color: transparent;
}*/



QInputDialog,
QInputDialog QWidget,
#View QInputDialog,
#View QInputDialog QWidget,
#TrackLabel QInputDialog QWidget > QWidget,
#RosegardenParameterArea QInputDialog QWidget > QWidget
{
    background-color: #000000;
    color: #FFFFFF;
    selection-color: #FFFFFF;
    selection-background-color: #ABCDEF;
}

QWidget#SQUEEZED,
#RosegardenParameterArea QWidget#SQUEEZED
{
    background-color: transparent;
    color: #FFFFFF;
}

QWidget#SPECIAL_LABEL,
#RosegardenParameterArea QWidget#SPECIAL_LABEL
{
    color: #000000;
    background-color: #999999;
}


/* Give the non-LED parts of the dialog the groupbox "lighter black" background
 * for improved constrast, and set foreground color to "LED blue" as used
 * elsewhere
 */
#RosegardenTransport QWidget
{
    background-color: #404040;
    color: #C0D8FF;
}

#RosegardenTransport QFrame QWidget
{
    background-color: #000000;
}


/* Transport buttons are styled independently, with a smaller radius and a
 * lighter "pressed" state
 */
#RosegardenTransport QPushButton::enabled,
#RosegardenTransport QFrame QWidget QPushbutton
{
    border: 1px solid #AAAAAA;
    border-radius: 2px;
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #999999, stop:1 #DDDDDD);
    min-width: 0;
}

#RosegardenTransport QFrame QWidget QPushbutton:hover,
#RosegardenTransport QPushButton:hover
{
    border: 1px solid #AAAAAA;
    border-radius: 2px;
    background-color: #CCDFFF;
    color: #000000;
    min-width: 0;
}

#RosegardenTransport QFrame QWidget QPushbutton:checked,
#RosegardenTransport QFrame QWidget QPushbutton:pressed,
#RosegardenTransport QPushButton::checked,
#RosegardenTransport QPushButton::pressed
{
    border: 1px solid #E0E0E0;
    border-radius: 1px;
    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #E0E0E0, stop:1 #EEEEEE);
}


/*  QLineEdit

Supports the box model.  The color and background of the selected item is styled
using selection-color and selection-background-color respectively.  The password
character can be styled using the lineedit-password-character property. */

QLineEdit,
#View QLineEdit QWidget
{
    background-color: pink;
    color: purple;
}

#MatrixParameters QWidget
{
    background-color: #000000;
    color: #FFFFFF;
}

#MatrixParameters QLabel
{
    background: transparent;
    color: white;
}


#MatrixParameters QGroupBox
{
    background: #404040;
    color: #FFFFFF;
    border: 2px solid #BBBBBB;
    border-radius: 4px;
    padding: 2px;
    margin-top: 1ex;
}


#MatrixParameters QGroupBox::title
{
    color: #FFFFFF;
    subcontrol-origin: margin;
    subcontrol-position: top center;
    padding: 0 5px;
}

#MatrixParameters QGroupBox QWidget
{
    background: #404040;
}

/*  QToolTip

Supports the box model. The opacity property controls the opacity of the
tooltip. */

/* Tooltips are going to be hell to get right.  They're dependent on the styling
 * of whatever random widget under whatever random class happens to create them,
 * and to make matters worse, Qt is really buggy in this area, and tends to use
 * the same colors for the next tooltip as the last tooltip you picked, so it is
 * very, very easy to get false positives and think you've fixed something you
 * in fact haven't.  Ugh.
 */
QToolTip,
QWidget QToolTip,
QToolButton QToolTip,
#RosegardenTransport QPushButton QToolTip,
#RosegardenParameterArea QPushButton QToolTip,
#View QWidget QToolTip,
#App QWidget QToolTip
{
    background-color: #fffbd4;
    color: #000000;
}

