/* this file was generated by the MCOP idl compiler - DO NOT EDIT */

#ifndef MIDIARTS_H
#define MIDIARTS_H

#include "common.h"

// includes of other idl definitions
#include "arts/artsmidi.h"

class RosegardenMidiRecord;

class RosegardenMidiRecord_base : virtual public Arts::MidiPort_base {
public:
	static unsigned long _IID; // interface ID

	static RosegardenMidiRecord_base *_create(const std::string& subClass = "RosegardenMidiRecord");
	static RosegardenMidiRecord_base *_fromString(std::string objectref);
	static RosegardenMidiRecord_base *_fromReference(Arts::ObjectReference ref, bool needcopy);

	inline RosegardenMidiRecord_base *_copy() {
		assert(_refCnt > 0);
		_refCnt++;
		return this;
	}

	virtual std::vector<std::string> _defaultPortsIn() const;
	virtual std::vector<std::string> _defaultPortsOut() const;

	void *_cast(unsigned long iid);

	virtual bool record() = 0;
	virtual void record(bool newValue) = 0;
	virtual std::vector<Arts::MidiEvent> * getQueue() = 0;
	virtual void setMidiThru(Arts::MidiPort port) = 0;
};

class RosegardenMidiRecord_stub : virtual public RosegardenMidiRecord_base, virtual public Arts::MidiPort_stub {
protected:
	RosegardenMidiRecord_stub();

public:
	RosegardenMidiRecord_stub(Arts::Connection *connection, long objectID);

	bool record();
	void record(bool newValue);
	std::vector<Arts::MidiEvent> * getQueue();
	void setMidiThru(Arts::MidiPort port);
};

class RosegardenMidiRecord_skel : virtual public RosegardenMidiRecord_base, virtual public Arts::MidiPort_skel {
protected:
	// emitters for change notifications
	inline void record_changed(bool newValue) {
		_emit_changed("record_changed",newValue);
	}

public:
	RosegardenMidiRecord_skel();

	static std::string _interfaceNameSkel();
	std::string _interfaceName();
	bool _isCompatibleWith(const std::string& interfacename);
	void _buildMethodTable();
	void dispatch(Arts::Buffer *request, Arts::Buffer *result,long methodID);
};

#include "reference.h"
class RosegardenMidiRecord : public Arts::Object {
private:
	static Arts::Object_base* _Creator();
	RosegardenMidiRecord_base *_cache;
	inline RosegardenMidiRecord_base *_method_call() {
		_pool->checkcreate();
		if(_pool->base) {
			_cache=(RosegardenMidiRecord_base *)_pool->base->_cast(RosegardenMidiRecord_base::_IID);
			assert(_cache);
		}
		return _cache;
	}

protected:
	inline RosegardenMidiRecord(RosegardenMidiRecord_base* b) : Arts::Object(b), _cache(0) {}


public:
	typedef RosegardenMidiRecord_base _base_class;

	inline RosegardenMidiRecord() : Arts::Object(_Creator), _cache(0) {}
	inline RosegardenMidiRecord(const Arts::SubClass& s) :
		Arts::Object(RosegardenMidiRecord_base::_create(s.string())), _cache(0) {}
	inline RosegardenMidiRecord(const Arts::Reference &r) :
		Arts::Object(r.isString()?(RosegardenMidiRecord_base::_fromString(r.string())):(RosegardenMidiRecord_base::_fromReference(r.reference(),true))), _cache(0) {}
	inline RosegardenMidiRecord(const Arts::DynamicCast& c) : Arts::Object(RosegardenMidiRecord_base::_fromString(c.object().toString())), _cache(0) {}
	inline RosegardenMidiRecord(const RosegardenMidiRecord& target) : Arts::Object(target._pool), _cache(target._cache) {}
	inline RosegardenMidiRecord(Arts::Object::Pool& p) : Arts::Object(p), _cache(0) {}
	inline static RosegardenMidiRecord null() {return RosegardenMidiRecord((RosegardenMidiRecord_base*)0);}
	inline static RosegardenMidiRecord _from_base(RosegardenMidiRecord_base* b) {return RosegardenMidiRecord(b);}
	inline RosegardenMidiRecord& operator=(const RosegardenMidiRecord& target) {
		if (_pool == target._pool) return *this;
		_pool->Dec();
		_pool = target._pool;
		_cache = target._cache;
		_pool->Inc();
		return *this;
	}
	inline operator Arts::MidiPort() const { return Arts::MidiPort(*_pool); }
	inline RosegardenMidiRecord_base* _base() {return _cache?_cache:_method_call();}

	inline Arts::TimeStamp time();
	inline void processCommand(const Arts::MidiCommand& command);
	inline void processEvent(const Arts::MidiEvent& event);
	inline bool record();
	inline void record(bool _newValue);
	inline std::vector<Arts::MidiEvent> * getQueue();
	inline void setMidiThru(Arts::MidiPort port);
};

// Forward wrapper calls to _base classes:

inline Arts::TimeStamp RosegardenMidiRecord::time()
{
	return _cache?static_cast<Arts::MidiPort_base*>(_cache)->time():static_cast<Arts::MidiPort_base*>(_method_call())->time();
}

inline void RosegardenMidiRecord::processCommand(const Arts::MidiCommand& command)
{
	 _cache?static_cast<Arts::MidiPort_base*>(_cache)->processCommand(command):static_cast<Arts::MidiPort_base*>(_method_call())->processCommand(command);
}

inline void RosegardenMidiRecord::processEvent(const Arts::MidiEvent& event)
{
	 _cache?static_cast<Arts::MidiPort_base*>(_cache)->processEvent(event):static_cast<Arts::MidiPort_base*>(_method_call())->processEvent(event);
}

inline bool RosegardenMidiRecord::record()
{
	return _cache?static_cast<RosegardenMidiRecord_base*>(_cache)->record():static_cast<RosegardenMidiRecord_base*>(_method_call())->record();
}

inline void RosegardenMidiRecord::record(bool _newValue)
{
	 _cache?static_cast<RosegardenMidiRecord_base*>(_cache)->record(_newValue):static_cast<RosegardenMidiRecord_base*>(_method_call())->record(_newValue);
}

inline std::vector<Arts::MidiEvent> * RosegardenMidiRecord::getQueue()
{
	return _cache?static_cast<RosegardenMidiRecord_base*>(_cache)->getQueue():static_cast<RosegardenMidiRecord_base*>(_method_call())->getQueue();
}

inline void RosegardenMidiRecord::setMidiThru(Arts::MidiPort port)
{
	 _cache?static_cast<RosegardenMidiRecord_base*>(_cache)->setMidiThru(port):static_cast<RosegardenMidiRecord_base*>(_method_call())->setMidiThru(port);
}

#endif /* MIDIARTS_H */
