/* this file was generated by the MCOP idl compiler - DO NOT EDIT */

#include "MidiArts.h"

// Implementation
RosegardenMidiRecord_base *RosegardenMidiRecord_base::_create(const std::string& subClass)
{
	Arts::Object_skel *skel = Arts::ObjectManager::the()->create(subClass);
	assert(skel);
	RosegardenMidiRecord_base *castedObject = (RosegardenMidiRecord_base *)skel->_cast(RosegardenMidiRecord_base::_IID);
	assert(castedObject);
	return castedObject;
}

RosegardenMidiRecord_base *RosegardenMidiRecord_base::_fromString(std::string objectref)
{
	Arts::ObjectReference r;

	if(Arts::Dispatcher::the()->stringToObjectReference(r,objectref))
		return RosegardenMidiRecord_base::_fromReference(r,true);
	return 0;
}

RosegardenMidiRecord_base *RosegardenMidiRecord_base::_fromReference(Arts::ObjectReference r, bool needcopy)
{
	RosegardenMidiRecord_base *result;
	result = (RosegardenMidiRecord_base *)Arts::Dispatcher::the()->connectObjectLocal(r,"RosegardenMidiRecord");
	if(result)
	{
		if(!needcopy)
			result->_cancelCopyRemote();
	}
	else
	{
		Arts::Connection *conn = Arts::Dispatcher::the()->connectObjectRemote(r);
		if(conn)
		{
			result = new RosegardenMidiRecord_stub(conn,r.objectID);
			if(needcopy) result->_copyRemote();
			result->_useRemote();
			if (!result->_isCompatibleWith("RosegardenMidiRecord")) {
				result->_release();
				return 0;
			}
		}
	}
	return result;
}

std::vector<std::string> RosegardenMidiRecord_base::_defaultPortsIn() const {
	std::vector<std::string> ret;
	return ret;
}
std::vector<std::string> RosegardenMidiRecord_base::_defaultPortsOut() const {
	std::vector<std::string> ret;
	return ret;
}

void *RosegardenMidiRecord_base::_cast(unsigned long iid)
{
	if(iid == RosegardenMidiRecord_base::_IID) return (RosegardenMidiRecord_base *)this;
	if(iid == Arts::MidiPort_base::_IID) return (Arts::MidiPort_base *)this;
	if(iid == Arts::Object_base::_IID) return (Arts::Object_base *)this;
	return 0;
}

RosegardenMidiRecord_stub::RosegardenMidiRecord_stub()
{
	// constructor for subclasses (don't use directly)
}

RosegardenMidiRecord_stub::RosegardenMidiRecord_stub(Arts::Connection *connection, long objectID)
	: Arts::Object_stub(connection, objectID)
{
	// constructor to create a stub for an object
}

std::vector<Arts::MidiEvent> * RosegardenMidiRecord_stub::getQueue()
{
	long methodID = _lookupMethodFast("method:00000009676574517565756500000000112a417274733a3a4d6964694576656e7400000000020000000000000000");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	std::vector<Arts::MidiEvent> *_returnCode = new std::vector<Arts::MidiEvent>;
	if(!result) return _returnCode; // error occured
	Arts::readTypeSeq(*result,*_returnCode);
	delete result;
	return _returnCode;
}

void RosegardenMidiRecord_stub::setMidiThru(Arts::MidiPort port)
{
	long methodID = _lookupMethodFast("method:0000000c7365744d696469546872750000000005766f69640000000002000000010000000f417274733a3a4d696469506f72740000000005706f7274000000000000000000");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	Arts::writeObject(*request,port._base());
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(result) delete result;
}

bool RosegardenMidiRecord_stub::record()
{
	long methodID = _lookupMethodFast("method:0000000c5f6765745f7265636f72640000000008626f6f6c65616e00000000020000000000000000");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(!result) return false; // error occured
	bool returnCode = result->readBool();
	delete result;
	return returnCode;
}

void RosegardenMidiRecord_stub::record(bool newValue)
{
	long methodID = _lookupMethodFast("method:0000000c5f7365745f7265636f72640000000005766f696400000000020000000100000008626f6f6c65616e00000000096e657756616c7565000000000000000000");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->writeBool(newValue);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(result) delete result;
}

std::string RosegardenMidiRecord_skel::_interfaceName()
{
	return "RosegardenMidiRecord";
}

bool RosegardenMidiRecord_skel::_isCompatibleWith(const std::string& interfacename)
{
	if (interfacename == "RosegardenMidiRecord") return true;
	if (interfacename == "Arts::MidiPort") return true;
	if (interfacename == "Arts::Object") return true;
	return false;
}

std::string RosegardenMidiRecord_skel::_interfaceNameSkel()
{
	return "RosegardenMidiRecord";
}

// getQueue
static void _dispatch__RosegardenMidiRecord_00(void *object, Arts::Buffer *, Arts::Buffer *result)
{
	std::vector<Arts::MidiEvent> *_returnCode = ((RosegardenMidiRecord_skel *)object)->getQueue();
	Arts::writeTypeSeq(*result,*_returnCode);
	delete _returnCode;
}

// setMidiThru
static void _dispatch__RosegardenMidiRecord_01(void *object, Arts::Buffer *request, Arts::Buffer *)
{
	Arts::MidiPort_base* _temp_port;
	Arts::readObject(*request,_temp_port);
	Arts::MidiPort port = Arts::MidiPort::_from_base(_temp_port);
	((RosegardenMidiRecord_skel *)object)->setMidiThru(port);
}

// _get_record
static void _dispatch__RosegardenMidiRecord_02(void *object, Arts::Buffer *, Arts::Buffer *result)
{
	result->writeBool(((RosegardenMidiRecord_skel *)object)->record());
}

// _set_record
static void _dispatch__RosegardenMidiRecord_03(void *object, Arts::Buffer *request, Arts::Buffer *)
{
	bool newValue = request->readBool();
	((RosegardenMidiRecord_skel *)object)->record(newValue);
}

void RosegardenMidiRecord_skel::_buildMethodTable()
{
	Arts::Buffer m;
	m.fromString(
        "MethodTable:00000009676574517565756500000000112a417274733a3a4d6964"
        "694576656e74000000000200000000000000000000000c7365744d696469546872"
        "750000000005766f69640000000002000000010000000f417274733a3a4d696469"
        "506f72740000000005706f72740000000000000000000000000c5f6765745f7265"
        "636f72640000000008626f6f6c65616e000000000200000000000000000000000c"
        "5f7365745f7265636f72640000000005766f696400000000020000000100000008"
        "626f6f6c65616e00000000096e657756616c7565000000000000000000",
		"MethodTable"
	);
	_addMethod(_dispatch__RosegardenMidiRecord_00,this,Arts::MethodDef(m));
	_addMethod(_dispatch__RosegardenMidiRecord_01,this,Arts::MethodDef(m));
	_addMethod(_dispatch__RosegardenMidiRecord_02,this,Arts::MethodDef(m));
	_addMethod(_dispatch__RosegardenMidiRecord_03,this,Arts::MethodDef(m));
	Arts::MidiPort_skel::_buildMethodTable();
}

RosegardenMidiRecord_skel::RosegardenMidiRecord_skel()
{
}

Arts::Object_base* RosegardenMidiRecord::_Creator() {
	return RosegardenMidiRecord_base::_create();
}

unsigned long RosegardenMidiRecord_base::_IID = Arts::MCOPUtils::makeIID("RosegardenMidiRecord");

static Arts::IDLFileReg IDLFileReg_MidiArts("MidiArts",
    "IDLFile:000000010000000000000000000000000100000015526f736567617264656e"
    "4d6964695265636f726400000000010000000f417274733a3a4d696469506f72740000"
    "00000200000009676574517565756500000000112a417274733a3a4d6964694576656e"
    "74000000000200000000000000000000000c7365744d69646954687275000000000576"
    "6f69640000000002000000010000000f417274733a3a4d696469506f72740000000005"
    "706f727400000000000000000000000001000000077265636f72640000000008626f6f"
    "6c65616e000000001300000000000000000000000000000000"
);
