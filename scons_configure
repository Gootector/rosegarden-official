#! /usr/bin/env python
#
# Copyright 2005 Julien Antille
#

## This file can be reused freely for any project (see COPYING)

import time
import sys
import os
import re
import bksys


#this function parses and split the command line arguments. It returns a dictionnary with the key
#being the argument name, and the value the argument value. (ie. : dict['prefix'] = '/usr' )   
def parse_args(args):
    regexp = '--(.*)'
    dict = {}
    for argument in args:
        m = re.search(regexp, argument)
        if m:
            data = m.group(1).split('=')
            if len(data) == 2:
                dict[data[0]] = data[1]
            else:
                dict[data[0]] = None
    return dict

config_py_content = []
config_py_content.append('#\n')
config_py_content.append('# script generated by configure\n')
config_py_content.append('# '+ time.asctime() + '\n')
config_py_content.append('#\n\n')
config_py_content.append('def exists():\n\treturn True\n')
config_py_content.append('def generate(env):\n')
 
################################################
## parse the command-line arguments
args = parse_args(sys.argv[1:])

#user requested help
fetch_help_only = False
if args.has_key('help'):
    fetch_help_only = True
    
print "\nThis is bksys %s\n" % bksys.VERSION
for file in os.popen("ls bk*.py").read().strip().split('\n'):
    if file != 'bksys.py':
        module = __import__(file[:-3])
        if not hasattr(module, file[:-3] + "Module"):
            print "File " + file + " has no class " + file[:-3] + "Module, ignoring..."
            continue
        object = getattr(module, file[:-3] + "Module")()
        if fetch_help_only:
            for entry in object.options:
                if entry.display:
                    print str(entry)
            continue
        print '\n'
        print '***'
        print 'bksys : running module ' + bksys.GREEN + file[2:-3] + bksys.NORMAL + ' v' + object.version
        print '***'
        
        configure = object.configure(args)
        if configure and len(configure):
            config_py_content.append("\n")
            config_py_content.append("\t#\n")
            config_py_content.append("\t#code generated by module " + file[2:-3] + '\n')
            config_py_content.append("\t#\n")
            config_py_content.append("\n")
            for line in configure:
                config_py_content.append('\t%s\n' % line)
            
        elif configure == None:
            print bksys.RED + "A module failed to configure, bksys will now exit" + bksys.NORMAL
            sys.exit(1)
            
if fetch_help_only:
    sys.exit(0)
config_py_descr = open('config.py','w')
config_py_descr.writelines(config_py_content)
config_py_descr.close()

print
print "Start 'scons' or 'make' now (and 'scons install' or 'make install' as root to install)"
print "Make sure to read the output of ./configure --help if an error occurs"

sys.exit(0)
