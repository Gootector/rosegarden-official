#MIN_CONFIG

AM_INIT_AUTOMAKE(rosegarden,4-1.1_cvs)

dnl These are common macros that you might or might not want to use

dnl Image readers/writers
KDE_CHECK_KIMGIO
 
dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h stdlib.h paths.h)
AC_CHECK_FUNCS(usleep)
dnl AC_CHECK_LIB(z, gzgets,, AC_MSG_ERROR("gzgets not found in zlib - need zlib-1.0.9 or newer"))

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig

dnl check for Xft and fontconfig
AC_ARG_WITH(xft, [  --with-xft              enable Xft support (enabled by default when installed)],
  [ if test "$withval" = "yes"; then with_xft=yes; else with_xft=no; fi ],
  with_xft=yes)

if test "$with_xft" = "yes"; then
   PKG_CHECK_MODULES(XFT,xft >= 2.1.0,,[with_xft="no"])
fi

if test "$with_xft" = "yes"; then
    AC_DEFINE(HAVE_XFT, 1, [Define if you have Xft support])
fi

dnl check for LIRC
AC_ARG_WITH(lirc, [  --with-lirc             enable LIRC support (enabled by default when installed)],
  [ if test "$withval" = "yes"; then with_lirc=yes; else with_lirc=no; fi ],
  with_lirc=yes)

if test "$with_lirc" = "yes"; then
  AC_CHECK_HEADERS(lirc/lirc_client.h,,[with_lirc=no])
  if test "$with_lirc" = "yes"; then
    AC_CHECK_LIB(lirc_client,lirc_init,,[with_lirc=no])
  fi
fi

if test "$with_lirc" = "yes"; then
    AC_DEFINE(HAVE_LIRC, 1, [Define if you have LIRC support])
fi

dnl test for sound support at all
AC_ARG_ENABLE(sound,[  --disable-sound         disable sound support (default is enabled for ALSA)],
[
  if test "$enable_sound" = "no";
  then
      with_sound=no
  fi
])

dnl Disable sound system
dnl
if test "$with_sound" = "no";
then
    AC_DEFINE(NO_SOUND, 1, [Define if you don't want sound support - overrides all sound drivers])
else

dnl check whether user wants to use ALSA
AC_ARG_WITH(arts, [  --with-arts             enable aRts support (at cost of ALSA support)],
[
   if test $withval = "yes"; then
     with_alsa=no
   else
     with_alsa=yes
  fi
], with_alsa=yes)

if test "$with_alsa" = "yes"; then
  AM_PATH_ALSA(0.9.0, with_alsa=yes, with_alsa=no)
fi

dnl ARTS if no ALSA
if test "$with_alsa" = "no"; then
  KDE_FIND_PATH(mcopidl, MCOPIDL, [$kde_default_bindirs], [KDE_MISSING_ARTS_ERROR(mcopidl)])
  KDE_FIND_PATH(artsc-config, ARTSCCONFIG, [$kde_default_bindirs], [KDE_MISSING_ARTS_ERROR(artsc-config)])
  AC_SUBST(MCOPIDL)
  AC_SUBST(ARTSCCONFIG)
  AC_CHECK_FILE($kde_includes/arts/artsmidi.idl,, AC_MSG_ERROR("artsmidi.idl missing- you may need to install kdemultimedia, kdemultimedia-devel, and/or kdemultimedia-arts depending on your distro"))
  AC_CHECK_FILE($kde_includes/arts/reference.h,, AC_MSG_ERROR("aRts headers are missing"))
  with_jack=no
  with_ladspa=no
  with_dssi=no
  with_liblo=no
  with_liblrdf=no
else
  dnl ALSA is good
  AC_DEFINE(HAVE_ALSA, 1, [Define if you have ALSA support])

  dnl check whether user wants to use JACK
  AC_ARG_WITH(jack, [  --with-jack             enable JACK support (enabled by default when installed. requires ALSA.)],
  [
   if test "$withval" = "yes"; then
     with_jack=yes
   else
     with_jack=no
  fi
  ], with_jack=yes)

  if test "$with_jack" = "yes"; then
     PKG_CHECK_MODULES(JACK,jack >= 0.77.0,,[with_jack="no"])
  fi

  if test "$with_jack" = "yes"; then
    AC_CHECK_LIB(rt, shm_open)
    AC_DEFINE(HAVE_LIBJACK, 1, [Define if you have JACK support])

    dnl  AC_DEFINE(HAVE_JACK, 1, [Define if you have JACK support])
    dnl  AC_SUBST(JACKLIB)
    dnl  AC_CHECK_FUNCS(libRosegardenSequencer.la, [],
    dnl                 [JACKLIB="-ljack"])

  fi

  dnl check whether user wants to use liblo
  AC_ARG_WITH(liblo, [  --with-liblo             enable Lite OSC for plugin GUIs (enabled by default when installed)],
  [
   if test "$withval" = "yes"; then
     with_liblo=yes
   else
     with_liblo=no
  fi
  ], with_liblo=yes)

  if test "$with_liblo" = "yes"; then
      PKG_CHECK_MODULES(LIBLO,liblo >= 0.5,,[with_liblo="no"])
      PKG_CHECK_MODULES(LIBLO7,liblo >= 0.7,[with_liblo_threadstop="yes"],[with_liblo_threadstop="no"])
  fi

  if test "$with_liblo" = "yes"; then
      AC_DEFINE(HAVE_LIBLO, 1, [Define if you have the Lite OSC library])
  fi
  if test "$with_liblo_threadstop" = "yes"; then
      AC_DEFINE(HAVE_LIBLO_THREADSTOP, 1, [Define if your Lite OSC library has the lo_server_thread_stop function])
  fi

  dnl check whether user wants to have LADSPA
  AC_ARG_WITH(ladspa, [  --with-ladspa           enable LADSPA plugins (enabled by default when installed)],
  [
    if test "$withval" = "yes"; then
      with_ladspa=yes
    else
      with_ladspa=no
    fi
  ], with_ladspa=yes)

  dnl only use LADSPA when ladspa.h is found
  if test "$with_ladspa" = "yes"; then
    AC_CHECK_HEADERS(ladspa.h,,[with_ladspa=no])
  fi

  if test "$with_ladspa" = "yes"; then
    AC_DEFINE(HAVE_LADSPA, 1, [Define if you have LADSPA])

    dnl check whether user wants to have DSSI
    AC_ARG_WITH(dssi, [  --with-dssi             enable DSSI soft synth plugins (requires LADSPA; enabled by default when available)],
    [
      if test "$withval" = "yes"; then
        with_dssi=yes
      else
        with_dssi=no
      fi
     ], with_dssi=yes)

    if test "$with_dssi" = "yes"; then
      PKG_CHECK_MODULES(DSSI,dssi >= 0.4,,[with_dssi="no"])
    fi

    if test "$with_dssi" = "yes"; then
      AC_DEFINE(HAVE_DSSI, 1, [Define if you have DSSI as well as LADSPA])
    fi
  else
    with_dssi=no
  fi

  dnl check whether user wants to have liblrdf
  AC_ARG_WITH(liblrdf, [  --with-liblrdf          enable liblrdf metadata for LADSPA plugins (enabled by default when installed)],
  [
    if test "$withval" = "yes"; then
      with_liblrdf=yes
    else
      with_liblrdf=no
    fi
  ], with_liblrdf=yes)

  dnl only use liblrdf when lrdf library is found
  if test "$with_liblrdf" = "yes"; then
    AC_CHECK_HEADERS(lrdf.h,,[with_liblrdf=no])
      if test "$with_liblrdf" = "yes"; then
        AC_CHECK_LIB(lrdf,lrdf_init,,[with_liblrdf=no])
      fi
  fi

  dnl check for mad MP3 library
  AC_CHECK_LIB(mad, mad_bit_length)

dnl fi is for ALSA
fi

dnl fi is for no_sound
fi

dnl append RDKDE3 flag if we've found KDE3
if test $kde_qtver = 3; then
  CXXFLAGS="-DRGKDE3 $CXXFLAGS"
fi

dnl set -fno-gcse if using gcc; it's just too risky -- too many builds
dnl ruined by optimization bugs already
#if test "$GCC" = yes; then
#  CXXFLAGS="$CXXFLAGS -fno-gcse"
#fi

AC_MSG_CHECKING(for PTHREAD_MUTEX_RECURSIVE)
AC_TRY_COMPILE([ #include <pthread.h>], [
	pthread_mutexattr_t attr;
	pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
], [
	AC_MSG_RESULT(ok)
        AC_DEFINE(HAVE_PTHREAD_MUTEX_RECURSIVE, 1, [Define if you have PTHREAD_MUTEX_RECURSIVE instead of PTHREAD_MUTEX_RECURSIVE_NP])
], [
	AC_MSG_RESULT(no)
])

AC_MSG_CHECKING(for PTHREAD_MUTEX_RECURSIVE)
AC_TRY_COMPILE([ #include <pthread.h>], [
	pthread_mutexattr_t attr;
	pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_RECURSIVE);
], [
	AC_MSG_RESULT(ok)
        AC_DEFINE(HAVE_PTHREAD_MUTEX_RECURSIVE, 1, [Define if you have PTHREAD_MUTEX_RECURSIVE instead of PTHREAD_MUTEX_RECURSIVE_NP])
], [
	AC_MSG_RESULT(no)
])

dnl automake conditionals
dnl isn't this redundant to the above AC_DEFINE?
dnl
AM_CONDITIONAL(NO_SOUND, test "$with_sound" = "no")
AM_CONDITIONAL(HAVE_ALSA, test "$with_alsa" = "yes")

###################
# Try to be a bit more clever with kde dirs :
# If we can find a common base between kde_includes and
# kde_libraries, (e.g. /opt/kde/include, /opt/kde/lib => /opt/kde)
# then set our prefix to that.

dir1=$kde_includes
dir2=$kde_libraries

# Remove any trailing slashes
while test $dir1 = ${dir1%?}/; do
dir1=${dir1%?}; done
while test $dir2 = ${dir2%?}/; do
dir2=${dir2%?}; done

lengthDir1=${#dir1}
lengthDir2=${#dir2}

# Make directory paths equal in length
if test $lengthDir1 -gt $lengthDir2
then
    count=$(($lengthDir1 - $lengthDir2))
    while test $count -ne 0
    do
       dir1=${dir1%?}
       count=$(($count - 1))
    done
else
    count=$(($lengthDir2 - $lengthDir1))
    while test $count -ne 0
    do 
       dir2=${dir2%?}
       count=$(($count - 1))
    done
fi

# Chop off a path element at a time until
# we hit root, or they're equal.
while test $dir1 != "/" -a \
        $dir1 != $dir2
do
    dir1=${dir1%/?*}/
    dir2=${dir2%/?*}/
done
matchDir=$dir1        

if test $prefix = "/usr/local/kde"
then
    prefix=$matchDir
fi

echo
echo
echo "Installation Summary"
echo "--------------------"
echo
echo "Install Directory             : $prefix"
echo
echo "Xft notation font support     : ${with_xft}"
echo "LIRC remote control support   : ${with_lirc}"
if test "$with_sound" = "no"; then
    echo "No sound support configured."
else
    echo "ALSA MIDI support             : ${with_alsa}"
    echo "JACK audio support            : ${with_jack}"
    echo "LADSPA plugin support         : ${with_ladspa}"
    echo "DSSI synth plugin support     : ${with_dssi}"
    echo "Custom OSC plugin GUI support : ${with_liblo}"
    echo "LRDF plugin metadata support  : ${with_liblrdf}"
    
    if test "$with_alsa" = "no"; then
        echo "aRts MIDI and audio          : yes"
    fi
fi
echo
echo

if test "$with_xft" = "no"; then
    echo "* Score rendering quality and performance may be"
    echo "improved if Xft 2.1.0 and Freetype 2 are available, to permit"
    echo "Rosegarden to override the Qt font selection mechanism.  It"
    echo "may not be worth trying to install them if they aren't already" 
    echo "present in your distribution though."
    echo
fi
if test "$with_sound" = "no" -o "$with_alsa" = "no"; then
    echo "* Rosegarden requires the ALSA (Advanced Linux Sound Architecture) drivers"
    echo "for MIDI, and the JACK audio framework for audio sequencing."
    echo "Please see the documentation at http://www.rosegardenmusic.com/getting/"
    echo "for more information about these dependencies."
    echo
    if test "$with_sound" != "no"; then
	echo "(Rosegarden does contain some code for audio and MIDI using the KDE"
	echo "aRts multimedia service.  But it's unlikely to compile, let alone work.)"
    fi
    echo
else
    if test "$with_jack" = "no"; then
	echo "* Rosegarden uses the JACK audio server for audio recording and"
	echo "sequencing.  See http://jackit.sf.net/ for more information about"
	echo "getting and installing JACK.  If you want to use Rosegarden only"
	echo "for MIDI, then you do not need JACK."
	echo
    fi
    if test "$with_ladspa" = "no"; then
	echo "* Rosegarden supports LADSPA audio plugins if available.  See"	
	echo "http://www.ladspa.org/ for more information about LADSPA.  To"
	echo "build LADSPA support into Rosegarden, you need to make sure"
	echo "you have ladspa.h available on your system."
	echo
    fi
    if test "$with_dssi" = "no"; then
	echo "* Rosegarden supports DSSI audio plugins if available.  See"	
	echo "http://dssi.sf.net/ for more information about DSSI.  To"
	echo "build DSSI support into Rosegarden, you need to make sure"
	echo "you have dssi.h available on your system."
	echo
    fi
    if test "$with_liblo" = "no"; then
	echo "* Rosegarden supports custom GUIs for DSSI (and LADSPA) plugins using"
	echo "the Open Sound Control protocol, if the Lite OSC library liblo is"
	echo "available.  Go to http://www.plugin.org.uk/liblo/ to obtain liblo"
	echo "and http://dssi.sf.net/ for more information about DSSI GUIs."
	echo
    fi
    if test "$with_liblrdf" = "no"; then
	echo "* Rosegarden supports the LRDF metadata format for classification"
	echo "of LADSPA and DSSI plugins.  This will improve the usability of"
	echo "plugin selection dialogs.  You can obtain LRDF from"
	echo "http://www.plugin.org.uk/lrdf/."
	echo
    fi
fi
