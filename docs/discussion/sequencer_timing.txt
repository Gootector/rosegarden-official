Rosegarden Sequencer Timing Explained
Richard Bown 28.9.2001

Simlpe equations but they're never explained in the source code
are they?  I put this document here as a reminder to myself as
much as anyone else.

Chris reminds me that these justifications stink.  They do, well
thet did more, but hey they help me.

Ok, to convert our internal timing representation to a time at
which a note should be played we need to consider some basic
principles.  Note that aRts uses second and microsecond based
TimeStamps for Midi Events so this suits our purposes nicely.

A Sequencer runs at a specified granularity - usually written
in pulses per quarter note (PPQ) or known as the Timing Division.

Work out how long a beat last.  We'll work all of this out in
microseconds (usec).

Length of a Beat (usecs)  =   60.0 * 1000000   (usecs in a minute)
                              --------------
                                   Tempo       (Beats per minute)


For the moment forget time signature.  I was convinced that the
extra 4 we needed came from that - but I was probably making it
all up - extra four and all.  All I know is what I hear goddammit.

To find when a note should sound, convert its internal representation
of time into number of beats i.e. absolute time divided by length of
beat:

 Number of Beats at which note plays  =

                 internalTime   (internal time of note)
                 ------------
                    PPQ         (internal length of beat)


OK, so now trivially.  Time at which note plays:
                      
                60.0 * 1000000 *  internalTime
                -----------------------------------
                         PPQ * Tempo
              
Either I've gone mad or that's too simple or I've just been 
even more stupid than I ever imagined all this time.  At least
with aRts we deal with real measures of time anyway.

