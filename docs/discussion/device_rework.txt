
20020225 meeting notes [cc, rwb] for device/bank rework
-------------------------------------------------------

From the user perspective:

 * Current bank/program dialog remains (renamed from Manage Devices
   to something like Manage Banks, Manage Programs or Manage Presets).

 * Bank/program dialog allows editing of banks and programs for each
   device but nothing else (not adding or removing devices, not
   renaming devices, nothing).

 * New Manage Devices dialog which enumerates the devices (a list
   of names entirely under the user's control -- user can add, remove
   and rename) and associates each with a "Connection" (chosen from a
   dropdown of ALSA ports) and "Channels" (All or a subset of 1-16).
   Connection and Channels are settable in this dialog.

 * The default list of Devices (when you start up a fresh install of
   RG) contains one per ALSA port, with some dummy names and a GM map
   on each.

 * Instrument dropdown offers one entry per Device, and where a Device
   listens on more than one channel, it offers a submenu of Instruments
   corresponding to the channels for that Device.

From the code perspective:

 * Current Device classes remain, but internally become associated
   with ALSA Port + Channel Map instead of ALSA Client.

 * Current Instrument classes remain more or less unchanged.

 * Devices continue to have only user-provided name and a number
   counted up from zero -- i.e. the connection between Device and
   Port/Channel Map is entirely reconfigurable -- how does this
   affect saving/loading?  Save .rg files with the current config
   for Connections in them, but permit reload regardless of whether
   they match the current setup or not?


Implementation notes
~~~~~~~~~~~~~~~~~~~~

On the sequencer side, MappedDevice is just a container for
MappedInstruments.  These are concretely related to the ALSA
read/write destination via the AlsaPort list in AlsaDriver, which maps
instrument numbers onto ALSA ports.  The Device numbers themselves are
relatively abstract, being derived from the instruments.

On the GUI side, everything is already set up with the device list and
instrument sublists in pretty much the way we want; the problem is
just that the devices are being mapped directly onto concrete
MappedDevices.

We have two possibilities:

 1. The sequencer maintains the mapping of devices to "connections",
 where either

    a. the MappedDevice is the "connection" and a new Device class is
    introduced on the sequencer side to represent the virtual Device, or

    b. the MappedDevice becomes the virtual Device on the sequencer
    side and a new Connection class is introduced

 2. The GUI maintains the mapping of devices to "connections".  The
 Device class continues to be the virtual Device, the MappedDevice
 remains concrete, but a new class on the GUI side is introduced to be
 the thing that gets converted to the MappedDevice when communicating
 with the sequencer.

I suspect option 2 is probably simpler given the current setup,
although it's appealing to be able to contact the sequencer directly
to configure device/port mappings (i.e. option 1b is probably the most
elegant of the three).


Implementation strategy
~~~~~~~~~~~~~~~~~~~~~~~

1. Enforce a one-to-one correspondence between ALSA ports and
AlsaDriver MappedDevices.  We don't want to know about ALSA client on
the sequencer side except when querying the ports, and we don't want
to know about ports on the GUI side.  Possibly we could do this by
creating a new AlsaDriver (for test purposes) that pretends one port
per device but has a device corresponding to an ALSA port?


2. ...
