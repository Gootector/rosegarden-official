
20020301 task list (based on outstanding items from post-0.1.3 list below)
==================

 1. Support for displaying lyrics and random text from MIDI files

 2. Ponder help

 3. Implement "Collapse Notes" and inverse (see notes on paper)

 4. Tuplet GUI -- but how?

 5. See why accidentals appear to be wrong when not in treble clef (see paper)

 6. Speed up NotationHLayout::scanStaff (delay is possibly in
    the NotePixmapFactory::getXXXWidth methods)

 7. Compound commands such as move-many-segments, insert-key-everywhere
    [basic compound commands DONE, insert-key-everywhere DONE, need to
    deal with signal flow from segmentcanvas to trackeditor for
    move-many-segments; refresh is likely to be dreadfully slow for now]
 
 7a. Refresh for segment commands in edit views [DONEish]

 7b. Things like Split Segment and Resize Segment won't work correctly
    until the Segment's moveable start/end markers are implemented.  Look
    into this.

 7c. Refinements needed for Paste in notationcommands: we need to work
    out extent affected by removeRests so as to work out the end of the
    section to save; we also need to provide a way for the notation view
    to discover whether a paste did (or will) succeed [DONE]

 8. Add origin to start of hlayout, so that first bar is indented on both
    ruler and staff (preceded by staff name perhaps)

 9. Extend Chord (in notationsets) so as to handle case where some notes
    at a given time have stem up and some have stem down (explicitly set
    by user) -- make two chords instead of one.  NotationElementList is
    now sorted by pitch, which should make this easier.  Can we assign
    stem directions sensibly for chords that begin during other chords? 

10. As well as existing Paste menu function, add "Paste..." that gives
    options for pasting in a gap (as currently), opening a new gap to
    paste into, and overlaying (possibly even overlaying with ties
    versus overlaying raw), and allows you to choose one of these as
    the default paste function.  [DONEish, needs some work]  Also
    implement Cut-&-Close.

11. Add choice of start-from-here or start-from-start-of-bar to time
    signature dialog.

12. Create clef dialog with transposition options (maintain pitches,
    transpose entirely, transpose octaves only)

13. Merge Randall's optimisations to layout [DONE except for LinedStaff
    changes.  Might rework the API a bit, as it's still a bit rough
    because of the change to not using -1 as a special timeT value]

14. Why no rest-inserter menu? [DONE]

15. Ties don't always appear (e.g. load davy.mid with viability switched
    on in MidiFile.cpp)

16. Parameterise property names for quantizer [DONE]

17. Deal with this strstream/stringstream thing -- fix on one or the
    other, and make sure the memory management is correct

18. Run the test program -- wrong performance duration for first of
    group of four "tied" notes right at the end of the test program [DONE]

19. Quantizer: deal with these dynamically-generated PropertyNames;
    they really slow things down [DONE] -- also make save & reload
    preserve unquantized values (and now new requirement for beamed
    group id/type)

20. Investigate fucked-up rests after MIDI import (e.g. davy.mid)

21. Work out why clicking on a segment with the SegmentSelector or
    SegmentMover without moving it still causes a move command to
    happen, and stop it


Post-0.1.3 task list (superseding older ones)
====================

 1. Text, lyrics etc -- something like LoopRuler that places lyrics
    on a toggleable non-vertical-scrolling area at the top or
    bottom?  Place chord names on the same kind of area?  [DONE for chordnames]

 1a. Support for lyrics and random text from MIDI files

 2. Ponder help

 3. Implement "Collapse Notes" and inverse (see notes on paper)

 4. Tuplet GUI -- but how?

 5. See why accidentals appear to be wrong when not in treble clef (see paper)

 6. Speed up NotationHLayout::scanStaff (delay is possibly in
    the NotePixmapFactory::getXXXWidth methods)

 7. Work on signals/refresh for modifications other than BasicCommand ones
    [DONE]

 7a. Compound commands such as move-many-segments, insert-key-everywhere
 
 7b. Refresh for segment commands in edit views

 7c. Things like Split Segment and Resize Segment won't work correctly
    until the Segment's moveable start/end markers are implemented.  Look
    into this.

 8. Bring LoopRuler into NotationView [DONE apart from some work from G]

8a. Rework SegmentItem so as to make its bar units align with LoopRuler [DONE]

8b. Make signals work from LoopRuler in NotationView [DONE]

8c. Ditch StaffRuler [DONE]

8d. Add origin to start of hlayout, so that first bar is indented on both
    ruler and staff (preceded by staff name perhaps)

 9. Extend Chord (in notationsets) so as to handle case where some notes
    at a given time have stem up and some have stem down (explicitly set
    by user) -- make two chords instead of one.  NotationElementList is
    now sorted by pitch, which should make this easier.  Can we assign
    stem directions sensibly for chords that begin during other chords? 

10. Key signature GUI [DONE]

10a. Implement Transpose Rest of Staff and Insert Into All Tracks options
     on key signature GUI  [DONE]

10b. Look at refresh in NotationView: create a 2-bar-or-more empty segment,
    put some notes in 2nd bar, add a keysig to start of 1st bar.  The notes
    are changed according to keysig settings but aren't refreshed in this
    view.  Works for clefs though.  [DONE]

10c. Look at transpose in key/notation types?  Big negative pitch values?
    [DONE]

11. Rework Composition's bar methods so that truncate argument is no
    longer requested, assuming truncate = false always.
    Rename getBarRange(timeT) to getBarRangeForTime or something.
    We should then be able to substantially simplify getBarRange so as
    never to need to refer to the barSegment at all, only to time sigs.
    Ultimately we may find the barSegment isn't needed in any method,
    but this could take some testing. [DONE]

12. Potential bit of rejigging: make NotationRulerScale into a
    LayoutRulerScale that likes any sort of HorizontalLayoutEngine,
    and move it into rulerscale.h and then move that into base/.
    If we also make the HorizontalLayoutEngine use composition-wide
    bar numbers (with getFirstVisibleBar() and getLastVisibleBar())
    then we may be able to simplify things significantly in the end. [DONE]

13. Deal with potential infinite loop in notationstaff.cpp:303 and on [DONE]

14. Deal with potential infinite (or just very very slow) loop in
    SegmentNotationHelper::autoBeam when importing schumann.mid [DONE]

15. As well as existing Paste menu function, add "Paste..." that gives
    options for pasting in a gap (as currently), opening a new gap to
    paste into, and overlaying (possibly even overlaying with ties
    versus overlaying raw), and allows you to choose one of these as
    the default paste function.  Also implement Cut-&-Close.

Post-0.1.1 task list
====================

 !! Sometimes when you load glazunov.rose, the quantizer appears to be
 misbehaving -- it looks like it has maxDots equal to zero, and the
 legato slider is set to somewhere in the middle.  Why?

 !! Load glazunov.mid and open the first staff: it crashes with an
 attempt to get the LegatoDuration property on an event that doesn't
 have it.  Why?  [DONE -- but what on earth is that hemidemi rest
 doing in the middle of the staff?]

 !! Segment should barf meaningfully if getComposition without composition
 [No, it shouldn't]

 1. Sort out true legato quantization [DONE]

 2. Display real bar numbers and proportional bar durations on track
 canvas [DONE]

 3. Tuplets [DONE, apart from GUI to create them...]

 4. Text, lyrics etc -- need to talk about this, there are various
 possible ways to do it

 5. Slurs [DONE]

 6. Add time sig support to RG2.1 import [DONE]

 7. Ponder undo [DONE -- needs constant updating though]

 8. Ponder help

 9. Speed up MIDI import, particularly for files with lots of short rests
    [DONE]

10. Finish notationcanvasview stuff -- leger line position marker,
    setting up the correct dimensions for the markers from the staff
    [DONE]

11. Complete the plugging-in and testing of the notationview
    position-pointer stuff [DONE]

12. Investigate why making a beamed group doesn't always work (not all
    notes end up beamed)

13. Restore correct note stem lengths to beamed groups (following
    change to which note in a chord is primary) [DONE]

14. Why does it crash when I try to delete a slur?  Sure, deleting
    slurs probably isn't implemented yet, but that doesn't excuse
    crashing. [DONE, I think]

15. Various optimisations to render and relayout -- for example, the
    positionChord thing in notationhlayout will probably help somewhat,
    and we can do things like only repositioning on staffs other than
    the one on which a change happened from the start of the same bar
    as the one the change happened in, and ceasing repositioning
    afterwards if a position hasn't changed [DONE]

15a. Optimise NotationStaff::setLines and do "the
     positionChord thing in notationhlayout" [DONE]

16. Fix staff ruler so it's owned by the staff (and works in page mode);
    fix bar-at-end-of-row in page mode; switch to doubles instead of
    ints in notationhlayout x-coord calculations [DONE]

17. Fix storage for bars, time sigs, tempo events in Composition
    (new Segment-a-like as per email) [DONE]

18. Real-time timestamps only in mapped classes [moved to rwb]

19. XML files to use absoluteTime attribute instead of resync element;
    add an offset attribute giving time between end of last event and
    start of this one; make XML output actually use them [DONE, I think]

20. Fix ties, which are currently not appearing every time they should [DONE]

21. Do start index thing in Segment:

    "- we add a setSegmentStartIndex method in Composition
     - we move Segment::setStartIndex() to protected" [DONE]



Task list from 18/19th August meetings
======================================

Aim: "to make it apparent that the notation editor has the potential
to be nicer than those in most of the other applications out there".

References in round brackets are to 0.1_planned_features.txt.

 1. Merge rests on insertion [DONE]

 2. General split-on-insert [DONE, cleanup and some fixes needed]

 3. Auto-beaming on input [DONE]

 4. More than one track per editing window (for 0.1, I think it only
 has to be possible to display these tracks, we don't necessarily have
 to make editing work for any beyond the first).  Issue: particularly
 for layering work, things will be very difficult if the tracks have
 bar lines that are not at the same absolute time. (B8)

    4a. Basic data-structure stuff for NotationView to have multiple
    staffs, one track per staff [DONE]

    4b. Fix up Composition's cunning code for keeping time signatures
    in check between different Tracks by taking into account the
    starting time of the Track (or is absolute time now counted from
    the start of the whole piece? [YES, so DONE])

    4c. Modify NotationHLayout so layout() can work on multiple staffs
    at once -- needs sync track? coping with partial bars at start and
    end?  Need to think about this. [DONE]

    4d. Finish NotationView by making it possible to receive and
    locate mouse events across all staffs [DONEish]

 4.5. Handling events read from MIDI that don't quantize viably --
 using multiple tied notes (makeNoteViable).  Also handling tied
 events on conversion to MIDI [DONEish]

 5. Making key, clef and time signature appear in correct order [DONE]

 6. Beaming selected area (dependent on Guillaume's doing selection)
 [Selection has been POSTPONED]

 7. Various subtle improvements to notation layout, for example moving
 long notes to the right to be more central in their space (A9) [mostly DONE]

 8. Improvements to insert/split code in TrackNotationHelper --
 avoiding splitting rests when they're inserted over shorter notes,
 improving duration-list code to place the rests it suggests in a
 better order (e.g. after a quaver note, use quaver + crotchet rather
 than crotchet + quaver) [DONE in general], avoid using dotted rests
 in most cases [DONE avoiding double-dots anyway]

 9. Work out why clefs, keys and timesigs are all squashed up some of
 the time [DONE]

 10. Work out why clef isn't being properly taken into account on
 insertion

 11. Work out why RG2.1 import is getting the wrong pitches [DONE]

 12. Investigate curious case of the missing notes in playback [blamed
 on aRts for now]

 13. Work out why note stems sometimes don't reach their beams
 
 Throughout: Code documentation


Older task list
===============

D * Take a careful look at the situations in which accidentals
    do and don't appear, and make sure they're correct.

D * Handle the principle of hiding an accidental if it's already
    appeared once within the same bar.

gl * Make it possible to insert dotted notes and notes with
    accidentals. (May need help from Guillaume on the Qt side.)

D? * Tidy up the way notes and chords are drawn -- for example,
    notes with accidentals currently "eat" some of the space
    before them; chords with second intervals should have one
    notehead shifted (RG2.1 does this imperfectly but well
    enough for our purposes); chords usually have too long
    stems (a note on its own should have a stem longer than
    the length a chord stem extends from the notehead nearest
    its tail).

D * Add basic support for beamed groups
 
D * Make beam code cope properly with partial beams

D * Make sure clef/key/time-signature combinations appear
    in the correct order (this will probably be a real hack,
    just as it is in RG2.1, because it's very difficult to
    enforce an order in storage and much simpler to choose
    the order when assigning x-coordinates).

D * Sort out XML format so as to make bools unambiguous: the
    winning representation appears to be

      <event type="note" duration="minim">
      <property name="pitch" int="50"/>
      <property name="NoteStalkUp" bool="false"/>
      </event>

