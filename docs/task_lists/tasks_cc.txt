
Task list from 18/19th August meetings
======================================

Aim: "to make it apparent that the notation editor has the potential
to be nicer than those in most of the other applications out there".

References in round brackets are to 0.1_planned_features.txt.

 1. Merge rests on insertion [DONE]

 2. General split-on-insert [DONE, cleanup and some fixes needed]

 3. Auto-beaming on input [DONE]

 4. More than one track per editing window (for 0.1, I think it only
 has to be possible to display these tracks, we don't necessarily have
 to make editing work for any beyond the first).  Issue: particularly
 for layering work, things will be very difficult if the tracks have
 bar lines that are not at the same absolute time. (B8)

    4a. Basic data-structure stuff for NotationView to have multiple
    staffs, one track per staff [DONE]

    4b. Fix up Composition's cunning code for keeping time signatures
    in check between different Tracks by taking into account the
    starting time of the Track (or is absolute time now counted from
    the start of the whole piece? [YES, so DONE])

    4c. Modify NotationHLayout so layout() can work on multiple staffs
    at once -- needs sync track? coping with partial bars at start and
    end?  Need to think about this.

    4d. Finish NotationView by making it possible to receive and
    locate mouse events across all staffs [DONEish]

 4.5. Handling events read from MIDI that don't quantize viably --
 using multiple tied notes (makeNoteViable).  Also handling tied
 events on conversion to MIDI [DONEish]

 5. Making key, clef and time signature appear in correct order [DONE]

 6. Beaming selected area (dependent on Guillaume's doing selection)
 [Selection has been POSTPONED]

 7. Various subtle improvements to notation layout, for example moving
 long notes to the right to be more central in their space (A9) [some DONE]

 8. Improvements to insert/split code in TrackNotationHelper --
 avoiding splitting rests when they're inserted over shorter notes,
 improving duration-list code to place the rests it suggests in a
 better order (e.g. after a quaver note, use quaver + crotchet rather
 than crotchet + quaver) [DONE in general], avoid using dotted rests
 in most cases [DONE avoiding double-dots anyway]

 9. Work out why clefs, keys and timesigs are all squashed up some of
 the time [DONE]

 10. Work out why clef isn't being properly taken into account on
 insertion

 11. Work out why RG2.1 import is getting the wrong pitches

 12. Investigate curious case of the missing notes in playback
 
 Throughout: Code documentation


Older task list
===============

D * Take a careful look at the situations in which accidentals
    do and don't appear, and make sure they're correct.

D * Handle the principle of hiding an accidental if it's already
    appeared once within the same bar.

gl * Make it possible to insert dotted notes and notes with
    accidentals. (May need help from Guillaume on the Qt side.)

D? * Tidy up the way notes and chords are drawn -- for example,
    notes with accidentals currently "eat" some of the space
    before them; chords with second intervals should have one
    notehead shifted (RG2.1 does this imperfectly but well
    enough for our purposes); chords usually have too long
    stems (a note on its own should have a stem longer than
    the length a chord stem extends from the notehead nearest
    its tail).

D * Add basic support for beamed groups
 
D * Make beam code cope properly with partial beams

D * Make sure clef/key/time-signature combinations appear
    in the correct order (this will probably be a real hack,
    just as it is in RG2.1, because it's very difficult to
    enforce an order in storage and much simpler to choose
    the order when assigning x-coordinates).

D * Sort out XML format so as to make bools unambiguous: the
    winning representation appears to be

      <event type="note" duration="minim">
      <property name="pitch" int="50"/>
      <property name="NoteStalkUp" bool="false"/>
      </event>

