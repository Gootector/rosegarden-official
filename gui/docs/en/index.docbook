<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.1.2-Based Variant V1.0//EN" "dtd/kdex.dtd" [
  <!ENTITY rosegarden "<application>Rosegarden</application>">
  <!ENTITY MIDI "<acronym>MIDI</acronym>">
  <!ENTITY % English "INCLUDE" > <!-- change language only here -->
  <!ENTITY % addindex "IGNORE">
]>

<!-- The language must be changed in the <book> tag for translations. -->


<!--

    Notes on style and terminology for Rosegarden handbook
    ======================================================

     * Aim to be clear, brief and direct, but be informal.

     * Write instructions in the second person.

       Good:     "You can select segments by clicking on
                  them with the arrow tool."

       Bad:      "Segments can be selected by clicking on
                  them with the arrow tool."

       Very bad: "The arrow tool allows the user to select
                  segments by clicking on them."

       If you dislike the first of these because you want to
       make the phrase "the arrow tool" more obvious by placing
       it at the start of the sentence, then perhaps you
       should be using a variablelist instead and making
       "the arrow tool" a list item.

     * It's perfectly permissible to detour to explain why
       something is the way it is, particularly if it might
       not be obvious.

     * It's also entirely permissible to omit advanced stuff
       from the "Using Rosegarden" section and document it
       only in the reference section.  "Using Rosegarden"
       should be about understanding how and why, not about
       knowing every last clever detail.

     * Bear in mind we can link extensively from any part of
       the handbook to any other.  Unfortunately DocBook won't
       allow you to write a link to a target that doesn't
       exist yet, so if you want to link to something that's
       not yet been written, either make a note of the planned
       link in an XML comment, or go and create a stub for the
       bit that hasn't been written yet, or else just write in
       a way that allows for a link to be easily added later
       (we could do an editing phase specially for links).

     * Be strict about using the correct terminology for
       Rosegarden data structures (segment, event, track,
       instrument, composition), but don't capitalise the
       words.  Capitalisation is useful in technical documents
       to make it clear that you're referring to a precise
       concept, but you shouldn't have to do it to make your
       meaning clear in user documentation.  If something
       seems ambiguous without, try rewording it instead.


    About Screenshots
    =================

    Screenshots used with this documentation should use the
    following style, colour and font settings:

     * KDE Style: "Light Style, 3rd Revision"

     * Colour scheme: "Blue Slate", with high-contrast
       setting and with the standard widget background set
       to white.  (I have this saved as a new scheme.)

     * Fonts: Verdana 11px for general use and menus; Verdana
       11px bold for window titles; antialiasing on, but
       sub-pixel antialiasing off.  (For pictures of the
       segment and instrument parameter boxes I usually turn
       the size up to 13px, which perhaps says something about
       our use of font size in these boxes.)

     * Window Decorations: "Quartz"

    None of these would be my first choice for nice-looking
    screenshots now, but we're not here to sell Rosegarden in this
    document, we're here to provide clear and consistent help text.
    So the priority is to make new screenshots look like the existing
    ones, not to make them look fancy.  Also, I think there is an
    advantage to having screenshots in a help document look a bit
    distinct from the user's own window decorations surrounding the
    help text.

    Screenshots of the whole program or of whole matrix or
    notation windows may be taken using different themes if
    desired, but screenshots of individual dialogs or window
    components must use the above scheme.

-->

<!--
    Notes on Usability Defects
    ==========================

    This comment is a place to note anything I find difficult to
    document, or anything where the functions for two necessarily
    linked concepts are not actually linked in the GUI (etc).

    * The audio file directory (in document properties) can't be
      inspected or changed from the audio file manager.  This is
      arguably linked to a need for a project directory.  There
      are various other usability problems with the audio file
      manager as well, e.g. there's no way to tell it to pull all
      imported audio files into a single audio directory.

    * Track buttons showing sometimes-instrument, sometimes-label.

    * Can't usefully double-click / right-click on most rulers.
      This would be useful for a slower but clearer way to set
      loops; adding and editing markers; etc.  Setting loops is
      particularly opaque especially in notation and matrix views.

    * Hideous inconsistency (documented in an RFE already) between
      having to use RG for MIDI routing and being unable to use RG
      for audio routing.

    Troubleshooting
    ===============

    Shall we have a troubleshooting section?

    * I'm not seeing any MIDI outputs
    * I'm not hearing any sound from my MIDI outputs
    * I'm not seeing any audio outputs
    * I'm not hearing any sound from my audio outputs
    * I don't see any synth plugins

-->

<!--
    Still to do
    ===========

    * Recording
 
    * Instrument parameter boxes
 
    * Rest of quantization section

    * Control rulers

    * Event list

    * Audio mixer

    * MIDI mixer

    * Plugins

    * Tempo / timesig editor

    * Triggered segments

    * Matrix Quantize combo (there's a section for it, currently empty)

    * Synth plugins and native GUIs
 
    * Add images for the tools (move, split &c) when describing them

    * Update notation menu references

    * Add new notation stuff

    * Make sure the guimenuitem etc tags are being used for all menu refs

    * Go through again changing Rosegarden -> &rosegarden; and double-hyphen ->
      &ndash; or &mdash;

    * Troubleshooter

    * Fill gaps in revision history

-->


<book id="rosegarden" lang="en">

  <!-- This header contains all of the meta-information for the document such
  as Authors, publish date, the abstract, and Keywords -->

  <bookinfo>
    <title>The Rosegarden Handbook</title>
    <authorgroup>
      <author>
	<firstname>Richard</firstname>
	<surname>Bown</surname>
      </author>
      <author>
	<firstname>Chris</firstname>
	<surname>Cannam</surname>
      </author>
      <author>
	<firstname>Guillaume</firstname>
	<surname>Laurent</surname>
      </author>
      <!-- TRANS:ROLES_OF_TRANSLATORS -->
    </authorgroup>

    <copyright>
      <year>2002-2004</year>
      <holder>Richard Bown, Chris Cannam, Guillaume Laurent</holder>
    </copyright>

    <date>2004-08-04</date>
    <releaseinfo>0.9.9</releaseinfo>

    <abstract>
      <para>
	  <screenshot>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="rg-mainwindow.png" format="PNG"/>
              </imageobject>
	      <textobject>
	      <phrase>&rosegarden;</phrase>
	      </textobject>
	    </mediaobject>
	  </screenshot>

	Rosegarden is an audio and &MIDI; sequencer and musical notation
	editor.  This Handbook describes how to use it.

      </para>
    </abstract>

    <keywordset>
      <keyword>Rosegarden</keyword>
      <keyword>sequencer</keyword>
      <keyword>MIDI</keyword>
      <keyword>audio</keyword>
      <keyword>music</keyword>
      <keyword>notation</keyword>
      <keyword>score</keyword>
      <keyword>KDE</keyword>
    </keywordset>

  </bookinfo>

  <!-- The contents of the documentation begins here.  Label each
  chapter so with the id attribute. This is necessary for two reasons:
  it allows you to easily reference the chapter from other chapters of
  your document, and if there is no ID, the name of the generated HTML
  files will vary from time to time making it hard to manage for
  maintainers and for the CVS system. Any chapter labelled (OPTIONAL)
  may be left out at the author's discretion. Other chapters should
  not be left out in order to maintain a consistent documentation
  style across all KDE apps. -->

  <chapter id="introduction">
    <title>Introduction</title>

    <para>
      <application>Rosegarden</application> is a &MIDI; and audio
      sequencer and musical notation editor.  Rosegarden allows you to
      record, arrange and compose music, in the shape of traditional
      score or &MIDI; data, or of audio files either imported or
      recorded from a microphone, guitar or whatever audio source you
      care to specify.  You can write, edit, and organise music data
      to create a composition, which you can then synthesise, add
      effects to, and mix down for burning to CD or distribution on
      the web.  Rosegarden also contains professional notation editing
      support for high quality printed output.
    </para>

    <para>
      <application>Rosegarden</application> is designed to look and
      act in a manner familiar to experienced users coming to Linux
      from other platforms, whilst also being accessible and friendly
      to users new to music software generally.
    </para>

    <para>
    This handbook summarises the capabilities of &rosegarden; and
    provides a reference for some of the concepts involved.  If you
    would like to read a tutorial as well, <ulink
    url="http://www.rosegardenmusic.com/resources/tutorial/using_en.shtml">you
    can find one here</ulink>.</para>

    <para>If there's something else that you
    don't understand or require further help with, please visit
    <ulink url="http://www.rosegardenmusic.com/support/">the
    Rosegarden website</ulink> for Frequently Asked Questions and
    mailing list instructions.
    </para>
  </chapter>


<!--
  **********************************
 
   PART I:
   Discussion and tutorial material

  **********************************
  -->


  <chapter id="file-operations">
    <title>Rosegarden Files and Documents</title>
    <para>
      &rosegarden; stores each composition in its own document, using
      its own internal format.  When you save a document it is stored
      on disc as a file with the .rg extension.  &rosegarden; can also
      handle a number of other standard file formats.
    </para>

    <sect1 id="file-creating">
      <title>New compositions</title>
      <para>
	When &rosegarden; starts up, it does so with a new document,
	containing an "empty" composition ready to start editing.
	To put something in that composition, you must either record
	something, or create some blank lengths of music (referred
	to as "segments") that you can then fill in using the
	various editing facilities.
      </para>
      <para>See <link linkend="recording">Recording</link> for details of how to record music, and see the <link
	  linkend="segment-view">Track Editor</link> section for a
	description of how to create, edit, and manage segments of
	music.
      </para>
    </sect1>

    <sect1 id="file-midi">
      <title>Using MIDI files</title>
      <para>
	To import and export MIDI files, use the 
	<menuchoice>
	  <guimenu lang="en">File</guimenu>
	  <guimenuitem>Import</guimenuitem>
	  <guimenuitem>Import MIDI File</guimenuitem>
	</menuchoice>
	and
	<menuchoice>
	  <guimenu lang="en">File</guimenu>
	  <guimenuitem>Export</guimenuitem>
	  <guimenuitem>Export MIDI File</guimenuitem>
	</menuchoice>
	functions.
      </para>
      <para>
	Although &rosegarden; can load and save file formats such as
	MIDI, it does not store MIDI data internally.  You should
	generally prefer to save files in &rosegarden;'s own format,
	as &rosegarden; stores quite a lot of information that will
	be lost when exporting to MIDI.
      </para>
      <para>
	When a MIDI file is loaded, &rosegarden; splits out the
	music into one track per MIDI track or channel in the file,
	<link linkend="studio-midi-import">sets up the appropriate
	  instrument mappings</link>, and <link
	  linkend="nv-quantization">attempts to calculate plausible
	  notation</link> for the MIDI performance data.
      </para>
    </sect1>

    <sect1 id="file-merge">
      <title>Merging files</title> <para>As well as loading or
	importing files, you can also merge them into the current
	document, adding the segments found in the file to the ones
	already there.
      </para>
      
      <para>To merge a file, just use the relevant option on the
	<menuchoice>
	  <guimenu lang="en">File</guimenu>
	  <guimenuitem>Merge</guimenuitem>
	</menuchoice>
	submenu, instead of using the Open or
	Import option.
      </para>
    </sect1>

    <sect1 id="file-printing">
      <title>Printing</title>
      <para>
	You can print out a composition in the form of a musical
	score, using the
	<menuchoice>
	  <guimenu lang="en">File</guimenu>
	  <guimenuitem>Print</guimenuitem>
	</menuchoice>
	function.
      </para>

      <para>
	Producing a score from performance data is a hard task, and
	in most cases it's unreasonable to expect a default printout
	based on MIDI data to be very readable.  You should use the
	<link linkend="notation-view">notation editor</link> to tidy
	up the score before printing.  (See also <link
	  linkend="nv-quantization">Notation from performance
	  data</link>.)
      </para>

      <para>&rosegarden; is capable of producing very readable
	scores.  Even so, it is designed to be a screen editor and not
	primarily a typesetter.  If you want to produce true
	print-quality scores you should consider using <ulink
	  url="http://www.lilypond.org">Lilypond</ulink> in conjunction
	with &rosegarden;.  Lilypond is music typesetting software
	that reads a specialised text file format and produces
	high-quality typeset output.  &rosegarden; is capable of
	writing Lilypond files using the
	<menuchoice>
	  <guimenu lang="en">File</guimenu>
	  <guimenuitem>Export</guimenuitem>
	  <guimenuitem>Export Lilypond</guimenuitem>
	</menuchoice>
	function.  </para> </sect1>

  </chapter>

  <chapter id="segment-view">
    <title>The Track Editor</title>
    <sect1 id="segment-view-overview">
      <title>Overview</title>
      <para>
	&rosegarden;'s main layout is similar to many
	other popular sequencers.  It is based on a track
	structure &mdash; the main window shows a track editor with
	a list of tracks and their associated instruments down the
	left hand side.  You can manipulate and move blocks of
	music data (referred to as &ldquo;segments&rdquo;) on the
	track editor as well as opening the segments themselves in
	specialised editors (<link
	  linkend="notation-view">notation</link>, <link
	  linkend="matrix-view">matrix</link>, and <link
	  linkend="event-view">event list</link>).
      </para>
      
      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-trackeditor.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s Track Editor showing two segments of music data</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>
	Tracks can be assigned to a range of &MIDI;, plugin synth, or
	audio instruments.  In the picture above we see three segments
	in the track editor on tracks assigned to General MIDI
	instruments.
      </para>
      
      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-trackbutton-labels.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s Track buttons showing track labels</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>
	The button area to the left of the segment canvas shows you
	the track number, mute and record status, and the label of the
	track.  You can mute or unmute a track by clicking on the blue
	LED-style button, and select a particular track as a record
	target by clicking on the red one.  To change the track label,
	double-click on it.
      </para>
      
      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-trackbutton-instruments.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s Track buttons showing instrument assignments</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>
	Track labels are only shown if the
	<menuchoice>
	  <guimenu lang="en">Settings</guimenu>
	  <guimenuitem>Show Track Labels</guimenuitem>
	</menuchoice>
	menu option is enabled.
	Otherwise, as in this picture, the instrument assignments for
	the tracks are shown instead.</para>

    </sect1>
    <sect1 id="segment-view-instruments">
      <title>Tracks and instruments</title>
      <para>
	Each track must have an instrument assigned to it, in order to
	be heard.  By default the first 16 tracks are assigned to the
	16 instruments of the first available MIDI device, and the
	next 16 tracks are assigned to audio.</para>

      <para>To change the instrument assignment for a track,
      right-click on the track label: a pop-up menu will appear from
      which you can select among all the available instruments.
      </para>
      
      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-trackbutton-instrumentmenu.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s Instrument menu</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>
	An instrument can be understood as a single channel on a
	&MIDI; device, or as a mono or stereo audio output or an audio
	synth plugin.  Tracks containing note data should be assigned
	to &MIDI; or synth plugin instruments, and those containing
	audio to audio instruments.  You can assign more than one
	track to the same instrument, in which case the multiple
	tracks will use the same sounds.
      </para>
      <para>
	You can change various properties of the instrument
	associated with a track using the <link
	  linkend="segment-view-instrumentparameterbox">Instrument
	  Parameter Box</link>.  This is where, for example, you would
	set a MIDI instrument to use a particular patch and so
	produce a particular sound (piano, strings etc).
      </para>
      <para>
	See the
	<link linkend="studio-introduction">Studio</link> section
	for more about instruments.
      </para>
	
    </sect1>

    <sect1 id="segment-view-creating">
      <title>Creating segments</title>
      <para>
	To create an empty segment, in order to begin composing
	something new, you need to use the pencil tool.  Click on
	the pencil on the toolbar, and then click at the point where
	you want the segment to start (at the correct height for the
	track you want the segment to be on, and at a distance
	across the editor window corresponding to the correct time)
	and drag rightwards until the segment is the right number of
	bars long.
      </para>

      <para>
	Usually each new segment starts on a barline and extends bar
	by bar, but this snap-to-grid effect can be prevented by
	holding down Shift while clicking and dragging.
      </para>

      <para>
	Once you have created a segment, you can then begin editing
	using the <link linkend="matrix-view">matrix</link> or <link
	  linkend="notation-view">notation</link> editors.  To use one
	of these editors, either double-click on the segment, or
	else click with the right mouse button and choose the editor
	you want from the context menu.
      </para>

      <para>
	If you are intending to record from a MIDI device or audio
	input, you don't need to create a new segment to record into
	first -- each separate recording always goes into a new
	segment, created automatically during recording.
      </para>
    </sect1>

    <sect1 id="segment-view-audio-segments">
      <title>Audio segments</title>
      <para>
	An audio segment contains recorded or sampled audio data,
	instead of editable note-event data.  Rosegarden allows you to
	record, play, arrange and split audio segments, but does not
	contain audio waveform editing facilities.
	</para>
      <para>To create an audio segment, you can <link
      linkend="recording">record</link> from an audio source onto a
      track assigned to an audio instrument, or you can work with
      existing WAV files.  To do this, you need to use the audio
      manager dialog (reached via <menuchoice><guimenu
      lang="en">Segments</guimenu><guimenuitem>Manage Audio
      Segments</guimenuitem></menuchoice>).
	</para>
      <para>
        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="rg-audiofilemanager.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>The audio file manager</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>You can drag-and-drop audio files from the KDE file
      browser or your KDE desktop into the audio file manager, or you
      can open them using its File menu.  Then you can either
      drag-and-drop them onto Rosegarden's track canvas, or use the
      audio file manager's <menuchoice><guimenu
      lang="en">Action</guimenu><guimenuitem>Insert into Selected
	    Audio Track</guimenuitem></menuchoice> menu function, provided the current
      selected track in the main window is assigned to an audio
      instrument.  Newly-recorded audio segments also appear in the
      audio file manager dialog.</para>

      <para>Details of the audio files associated with a particular
      composition are saved with that composition, but the audio files
      themselves are not.  You should ensure your document has a
      sensible audio file search path (via <menuchoice><guimenu
      lang="en">Composition</guimenu><guimenuitem>Edit Document
      Properties...</guimenuitem><guimenuitem>Audio</guimenuitem></menuchoice>)
      so as to keep your audio files accessible together.</para>

      <para>The audio manager dialog also shows the sample-rate and other
      information for each audio file, and marks with an asterisk any
      audio file whose sample rate does not match that of the current
      JACK audio session that Rosegarden is using.  Rosegarden will
      resample these files at playback time using a fast (but
      correspondingly very low quality) linear resampler.  You are
      advised to resample them separately using a separate
      dedicated audio editor instead.
      </para>

    </sect1>
    
    <sect1 id="segment-view-manipulating">
      <title>Manipulating segments</title>
      <para>
	The main window contains a selection of "tools" for editing
	segments.  These are available from the main toolbar: first
	select the tool you want from the toolbar, and then click
	and drag on the segments on the main canvas.
      </para>

      <sect2 id="segment-view-selector">
	<title>The Select tool</title>
	<para>
	  The "select tool" (the arrow tool) is actually a
	  multipurpose tool: it can be used to select, move, copy,
	  resize and create segments.</para>

	<para>The most obvious use is
	  selection: select a single segment by clicking on it with
	  the select tool, or select several by clicking with Shift
	  held down, or by clicking in an empty area of the window and
	  dragging out an area.
	</para>

	<para>To move segments with the select tool, simply click and
	  drag on the segment.  To create copies, click and drag with
	  Ctrl held down.  To resize a segment, click and drag on the
	  right-hand edge of the segment; and to create new segments,
	  click and drag on an empty area with the middle mouse button.
	</para>

	<para>
	  The select tool doesn't replace the other tools completely,
	  though &mdash; sometimes you need to be more precise about
	  which operation you intend, particularly when working on small
	  segments.
	</para>

      </sect2>

      <sect2 id="segment-view-move-resize">
	<title>Move and Resize tools</title>
	<para>To move a segment to a different start time or track,
	  use the Move tool and click and drag on the segment you want
	  to move.  If you hold down the Ctrl key while dragging, the
	  segment will be copied instead of moved.</para>

	<para>To resize a segment, use the Resize tool, and click
	  and drag on the right-hand end of the segment.</para>

	<para>For both move and resize you can hold Shift for fine
	positioning, to avoid snapping to a particular grid position.
	</para>

      </sect2>

      <sect2 id="segment-view-split-join">
	<title>Split tool</title>
	<para>
	  You can use the split tool 
	  <inlinemediaobject>
	    <imageobject>
	      <imagedata fileref="rg-split.png"/>
	</imageobject>
	</inlinemediaobject>
	  to split a single segment
	  into two separate segments.  To split your segment, select the
	  split tool and click on the segment you wish to split.
	</para>
	<para>
	  By default segments are split on the closest barline to the
	  cursor, but this can be prevented by holding down Shift
	  while splitting the segment.
	</para>
      </sect2>
    </sect1>

    <sect1 id="segment-view-segmentparameterbox">
      <title>The Segment Parameter Box</title>

      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-segmentparameterbox.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s segment parameter box</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>
	The segment parameter box allows you to modify some aspects of the
	selected segments.  If a single segment is currently selected, its
	parameters will be shown in the segment parameter box and can be
	edited there.  If several segments are selected, the parameter box
	will only show the current values where they are the same for all
	of the selected segments -- but you can still edit them, and your
	changes will apply to the whole selection.

	<variablelist>
	  <varlistentry>
	    <term>Label</term>
	    <listitem>
	      <para>Shows the label of the selected segment (or segments, if
		they all have the same label).  Click the "..." button to edit
		the label.</para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term>Repeat</term>
	    <listitem>
	      <para>Switches repeat on or off for the selected segments.  A
		repeating segment will repeat until the start of the following
		segment on the same track, or until the end of the composition
		if there is no following segment.</para>

	      <para>The repeated parts of a repeating segment are shown on
		the main canvas in a fainter colour than the original segment.
		You can turn them into real editable copies of the original
		segment either by using
	<menuchoice>
	  <guimenu lang="en">Segments</guimenu>
	  <guimenuitem>Turn Repeats into Copies</guimenuitem>
	</menuchoice>, or simply by double-clicking on the
		individual repeating blocks.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Quantize</term>
	    <listitem>
	      <para>
		Shows the quantization setting for the selected
		segments.  You can change this to quickly quantize
		the start times of all their notes.  For more
		advanced quantization, use <menuchoice>
	  <guimenu lang="en">Segments</guimenu>
	  <guimenuitem>Quantize...</guimenuitem>
	</menuchoice>.  See <link
		  linkend="quantization">Quantization</link> for more
		details.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Transpose</term>
	    <listitem>
	      <para>Shows the transposition (in semitones) currently applied
		to the selected segments.  This transposition is applied when
		the segment is played, and is not shown in the notes displayed
		in the matrix, notation or event list editors.  You can use
		this to quickly change the pitch of part or all of a composition.</para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Delay</term>
	    <listitem>
	      <para>Shows the delay currently in effect on the selected
		segments.  You can set a delay here in order to cause an entire
		segment to play later than written.  This delay is applied when
		the segment is played, and is not shown in the notes displayed
		in the matrix, notation or event list editors.
	      </para>
	      <para>
		You can set a delay either in musical time (by
		choosing a note duration from the delay dropdown),
		in which time the exact delay will depend on the
		tempo, or in real time (by choosing a time in
		milliseconds from the dropdown).
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Colour</term>
	    <listitem>
	      <para>Shows the colour being used for the display of the
		selected segments.  You can choose another colour from the
		dropdown, or choose the "Add New Colour" option if you want a
		colour not in the dropdown.
	      </para>
	      <para>
		You can also manage and rename colours using
<menuchoice>
	  <guimenu lang="en">Composition</guimenu>
	  <guimenuitem>Edit Document Properties...</guimenuitem>
	</menuchoice>
		(then choose the Colour page on the document properties
		dialog).  The modified colour palette will be saved
		with the composition in the Rosegarden file.
		<screenshot>
		  <mediaobject>
		    <imageobject>
		      <imagedata fileref="rg-colours.png" format="PNG"/>
	      </imageobject>
		<textobject>
		  <phrase>&rosegarden;'s colour manager</phrase>
		</textobject>
	      </mediaobject>
	      </screenshot>
	      </para>
	    </listitem>
	  </varlistentry>
	  
	</variablelist>
      </para>
    </sect1>

    <sect1 id="recording">
      <title>Recording</title>
      <para>
	
      </para>
    </sect1>

    <sect1 id="segment-view-instrumentparameterbox">
      <title>The Instrument Parameter Box</title>
      <para>
      </para>

      <sect2 id="segment-view-instrumentparameterbox-midi">
	<title>MIDI Instrument Parameters</title>
      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-ipb-midi.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s instrument parameter box for a MIDI instrument</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>
      </sect2>

      <sect2 id="segment-view-instrumentparameterbox-synth">
	<title>Synth Plugin Instrument Parameters</title>
      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-ipb-synth.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s instrument parameter box for a synth plugin instrument</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>
      </sect2>

      <sect2 id="segment-view-instrumentparameterbox-audio">
	<title>Audio Instrument Parameters</title>
      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-ipb-audio.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s instrument parameter box for an audio instrument</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>
      </sect2>

    </sect1>
  </chapter>

  <chapter id="transport">
    <title>The Transport</title>
    <para>
      When you play a composition,
      &rosegarden; sweeps a playback pointer across
      the tracks from left to right playing the contents of the
      segments as it crosses them.  The pointer's position on the
      screen is tracked and controlled by a dialog called the
      Transport.
    </para>
    
    <para>
      <screenshot>
        <mediaobject>
          <imageobject>
            <imagedata fileref="rg-transport.png" format="PNG"/>
    </imageobject>
      <textobject>
	<phrase>&rosegarden;'s Transport dialog</phrase>
      </textobject>
    </mediaobject>
    </screenshot>
    </para>

    <para>
      If the Transport isn't visible, you can activate it with <menuchoice> <guimenu lang="en">Settings</guimenu> 
	<guimenuitem>Show Transport</guimenuitem> </menuchoice>.
    </para>
    
    <para>The Transport shows the time reached by the playback
      pointer, in seconds by default.  You can switch it to show
      musical time (bar and beat counts), musical time with a flashing
      visual metronome, or audio sample frame times, using the topmost
      of the small buttons on the left of the transport window.  The
      button immediately below that toggles the display so as to show
      time remaining to the end of the composition instead of from the
      start.</para>

    <para>
      The main controls on the transport start the sequencer playing
      and pause it, fast forward the pointer position, rewind it, stop
      it or jump to beginning or end of composition.
    </para>

    <para> Additional controls and a &MIDI; event display are hidden
      on the bottom flap on the transport, which can be toggled on or
      off using the arrow button next to it at the left.  Also on this
      extra portion there are buttons for recording, setting loops,
      soloing individual tracks, turning on or off the metronome, and
      silencing your MIDI devices (panic button).  </para>

  </chapter>

  <chapter id="studio">
    <title>The Studio</title>

    <sect1 id="studio-introduction">
      <title>Devices, instruments and connections</title>

      <para>Rosegarden uses the term Studio to refer to everything it
      knows about the sound systems attached to the computer.  This
      may include &MIDI; and audio hardware and other sound software,
      and includes information about connections, configuration,
      &MIDI; patches and so on.  The Studio is built-in to every
      composition you create with Rosegarden.</para>

      <para>Three pieces of terminology are essential here:

	<variablelist>

	  <varlistentry>
	    <term>Device</term>
	    <listitem>
	      <para>A <quote>device</quote>, as far as Rosegarden is
		concerned, is simply something capable of producing
		sounds.  This may be a MIDI synth or an audio device.
		MIDI devices do not necessarily correspond directly to
		physical MIDI ports: they are just things with names
		that you can refer to, expected to work in particular
		ways.  Configuration information such as MIDI patch
		maps can be attached to devices.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Instrument</term>
	    <listitem>
	      <para>Each device has a number of
		<quote>instruments</quote>, each of which is assumed
		to make a particular sound.  These are the things that
		you can assign tracks to in order to choose which
		sound they play.  By default, a device contains 16
		instruments, created for you at startup: if the device
		is a MIDI device, then these will each be initialised
		to one of the 16 MIDI channels.  The instrument is
		where you set all the properties of a particular
		voice, such as program settings, reverb, volume etc.
	      </para>
	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>Connection</term>
	    <listitem>
	      <para>While a MIDI device is simply a name and a
		collection of configuration information, the
		<quote>connection</quote> specifies which MIDI port it
		is physically attached to.  This can be configured in
		the Manage MIDI Devices dialog.  (Audio devices do not
		have connections in the same way.)
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>

      <para>For example, imagine a setup consisting of a PC with two
	physical MIDI ports, one of which has an external synth
	attached to it.  Here you would normally configure Rosegarden
	so as to have one MIDI device, corresponding to the synth.
	You could then configure this device with the correct name and
	patch map, and then specify a connection for it that
	corresponded to the relevant MIDI port on your soundcard.
	Each of the 16 default instruments on the device could then be
	configured with a suitable program, and you would then assign
	tracks to those.</para>

      <para>
	In practice, Rosegarden will by default create a device for
	each of the available connections on startup.  So in the
	example above, two MIDI devices will be created by default
	even though you only need one.  You would generally then
	rename and apply patch maps to the first, and delete or
	simply not use the second.  Remember that there is no way
	for Rosegarden to know what synths you actually have plugged
	in to the MIDI ports on your computer: for this reason, the
	devices created at startup are just intended to be a default
	set, and it's up to you to ensure that the devices you
	configure match those you are really using.
      </para>

      <para>Once configured, the studio setup is stored with every
	Rosegarden-format file you save.</para>

    </sect1>

    <sect1 id="studio-device-editor">
      <title>Managing MIDI devices</title>

      <para>
        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="rg-devicemanager.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>The MIDI device manager</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>
	The MIDI device manager dialog shows you the MIDI devices
	that you currently have available to you, and where they are
	connected.  To reach this dialog, use	<menuchoice>
	  <guimenu lang="en">Composition</guimenu>
	  <guimenuitem>Studio</guimenuitem>
	  <guimenuitem>Manage MIDI Devices</guimenuitem>
	</menuchoice>.
      </para>

      <para>
	As described in the <link
	  linkend="studio-introduction">Devices, Instruments and
	  Connections</link> section, by default Rosegarden tries to
	provide a plausible set of devices for you at startup, and
	to make sensible connections for those devices.  But the
	default configuration might not always be suitable, and so
	this dialog allows you to rename devices and modify their
	connections and play/record direction.
      </para>
      
      <para>
	Each of the Play devices listed here provides a target for
	MIDI tracks to talk to: if you add a new Play device, you
	will then have 16 new instruments on this device which you
	can assign tracks to.  If you then assign a connection for
	that device, the tracks assigned to it will play to the
	appropriate channel (depending on the instrument) of any
	MIDI synth attached to that connection.
      </para>

      <para> The Record devices listed here represent possible
	sources for recording MIDI.  You can make one or more of them
	current (so that Rosegarden will listen to them when
	recording) using the checkboxes on each line, as shown in this
	dialog.  </para>

    </sect1>

    <sect1 id="studio-bank-editor">
      <title>Managing banks and programs for MIDI devices</title>

      <para>
        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="rg-bankeditor.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>The MIDI bank and program editor</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>
	Remember that each MIDI device contains a number of
	instruments, and that you can assign tracks to those
	instruments.  In MIDI terms, each instrument corresponds to
	a single channel on your MIDI synth.  You can choose which
	of the available voices (sounds) on your synth each
	instrument uses, but in order to do this, you need to let
	Rosegarden know the names for all of the available voices.
      </para>

      <para>
	This dialog allows you to attach banks of programs (names for
	voices) to your MIDI devices, thus permitting each
	instrument on a device to be set to use one of those voices
	in the <link
	  linkend="segment-view-instrumentparameterbox">Instrument
	  Parameter Box</link>.
      </para>

      <para>
	The usual way to set up the program names for a device is
	simply to import them from one of the supplied device
	(".rgd") files.  To do this, select a device in the list on
	the left of the dialog, then click the Import button below
	the list and choose the .rgd file corresponding to your
	synth.
      </para>

      <para>
        If there is no current .rgd file available for your synth,
        then you can use this dialog to create a new bank.  To do this
        you will have to find the program map in your synth's MIDI
        Implementation Chart and enter all the names by hand: you can
        then Export them to a .rgd file to share with other Rosegarden
        users.  Contact the rosegarden-user mailing list if you have
        made a new .rgd file and would like to share it.  (This is how
        all of the existing .rgd files have come to be included with
        Rosegarden: other users have contributed them.)
      </para>

      <sect2 id="studio-soundfonts">
	<title>SoundFonts</title>

	<para>
	  If you happen to be using a soft-synth or soundcard synth
	  that uses SoundFont (.sf2) files, you can simply load the
	  correct program names directly from your .sf2 file into this
	  dialog.  Just ask to Import as normal, and then choose the
	  .sf2 file that you are using instead of a .rgd file.
	</para>

	<para>Note that the Studio only manages information about
	  existing MIDI devices for Rosegarden, it does not actually
	  handle tasks such as loading a SoundFont to your soundcard in
	  the first place.  If you want to make sure a SoundFont is
	  loaded to your soundcard when Rosegarden starts up, you should
	  use the special "Load SoundFont to SoundBlaster card at
	  startup" option in the sequencer configuration in
	<menuchoice>
	  <guimenu lang="en">Settings</guimenu>
	  <guimenuitem>Configure Rosegarden...</guimenuitem>
	</menuchoice>.
	</para>
      </sect2>

      <sect2 id="studio-variations">
	<title>Variations</title>

	<para>
	  Some MIDI devices (for example, those from Roland)
	  organise their program names using a scheme known as
	  "variations".  For these devices, you generally want to
	  select a program by first selecting the basic program name
	  &mdash; such as a piano &mdash; and then selecting one
	  of a set of variations on that program &mdash; such as an
	  electric piano.  This is in contrast to General MIDI-based
	  synths, which organise their programs into banks and
	  expect you to choose a bank first and then a program from
	  that bank.
	</para>

	<para>
	  Rosegarden can support devices that use variations, but
	  you still have to enter the program names in a bank
	  format.  Internally, devices that use variations still use
	  MIDI bank select controllers to choose between the
	  variations; you need to find out from your synth's
	  documentation whether your device uses the LSB or MSB bank
	  select to choose variations, and which bank number
	  corresponds to which variation.  You can then enter the
	  banks as normal, and use the "Show Variation list based on
	  MSB/LSB" option on the bank dialog to tell Rosegarden to
	  show variations instead of banks when displaying that
	  device in an instrument parameter box.
	</para>
      </sect2>

    <sect2 id="studio-midi-import">
      <title>Program mapping on &MIDI; import</title>
      <para>
	
	When you import a &MIDI; file into a composition, &rosegarden;
	uses the existing studio setup to determine how to map the
	&MIDI; programs onto &rosegarden; instruments.  The aim is to
	ensure that every &MIDI; program gets mapped to an instrument
	that really exists in your studio (and thus is actually
	attached to your computer), so that all the &MIDI; tracks
	can be heard.

      </para><para>

	The &MIDI; program-change and bank-select events found in the
	imported file are used when importing, but only as an aid to
	help find the appropriate instrument for each &MIDI; track
	from the set of instruments in your studio.  So, for
	example, if your studio is currently set up to contain only
	<acronym>GM</acronym> instruments, and you import a &MIDI; file with <acronym>GS</acronym> program
	changes onto it, &rosegarden; will remap the <acronym>GS</acronym> banks back
	onto <acronym>GM</acronym> because they're all it knows that you have at the
	time you import the file.  It doesn't remember the original
	<acronym>GS</acronym> program numbers.

      </para><para>

	This means that you should always ensure that your studio is
	correctly configured for the devices you actually have,
	before you import the &MIDI; file.  Otherwise the program data
	in the &MIDI; file may be lost.

      </para>
    </sect2>

    </sect1>

    <sect1 id="studio-metronome">
      <title>Metronomes</title>
      <para>
	Rosegarden has two built-in metronomes, one for use during
	recording and one that can be switched on during normal
	playback.  They work by sending notes to a MIDI instrument,
	and both metronomes use the same instrument, pitch and
	velocity information.
      </para>

      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-metronome.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s metronome configuration dialog</phrase>
	</textobject>
      </mediaobject>
      </screenshot>

	To configure the metronomes, use
	<menuchoice>
	  <guimenu lang="en">Composition</guimenu>
	  <guimenu lang="en">Studio</guimenu>
	  <guimenuitem>Manage Metronome</guimenuitem>
	</menuchoice>
	to bring up the metronome dialog.
	Here you can select a MIDI instrument for the metronome and
	choose the metronome's resolution (whether it should tick
	once per beat, once per subdivision of a beat, or only once
	per bar), pitch, and velocities.  Properties such as the
	actual voice the MIDI synth uses for the metronome tick
	depend on the instrument selected, just as the voice used
	for a MIDI track depends on the instrument that track is
	assigned to.  You can configure the instrument by assigning
	a track to it on the main window and selecting the correct
	program from the instrument parameter box.
      </para>

      <para>
	The record and play metronomes can be switched on or off
	from the Transport window, using the metronome button.  This
	button controls the record metronome when recording is armed
	or in progress, and the play metronome at other times.  By
	default, the record metronome is switched on and the play
	metronome switched off.
      </para>

      <para>
	Rosegarden also has a "visual metronome": the transport window
	can be told to flash brightly to mark each beat.  See <link
	linkend="transport">the Transport section</link> for more
	details.</para>
    </sect1>

    <sect1 id="studio-midi-filters">
      <title>MIDI filters</title>
      <para>
        <screenshot>
          <mediaobject>
            <imageobject>
              <imagedata fileref="rg-midifilter.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>The MIDI filter dialog</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>
        Using this dialog you can decide which MIDI events Rosegarden
        will ignore or accept, either when forwarding events using
        MIDI THRU or when simply recording them.  Use the check boxes
        on this dialog to tell Rosegarden which types of MIDI events
        you don't want to forward or record.
      </para>

    </sect1>

  </chapter>

  <chapter id="quantization">
    <title>Quantization</title>
    <para>
      "Quantization" is the process of repositioning notes and other
      events so that they start or finish on exact beat divisions.  It
      is traditionally used to make an approximate performance into a
      precise but rather mechanical-sounding one -- either because
      precision is the desired effect, or for reasons such as making
      the notes clearer in notation.
    </para>

    <para>
      <screenshot>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="rg-gridquantizer.png" format="PNG"/>
    </imageobject>
      <textobject>
	<phrase>&rosegarden;'s quantize dialog</phrase>
      </textobject>
    </mediaobject>
    </screenshot>
      For general quantization, use
      	<menuchoice>
	  <guimenu lang="en">Segments</guimenu>
	  <guimenuitem>Quantize</guimenuitem>
	</menuchoice>
      in the main window or
	<menuchoice>
	  <guimenu lang="en">Adjust</guimenu>
	  <guimenuitem>Quantize</guimenuitem>
	</menuchoice>
      in matrix or notation editors.  This shows you a dialog in which
      you can select the precise quantization parameters you need, and
      then it applies these to all of the selected segments or notes.
    </para>

    <para>
      <!-- !!! to be continued -->
    </para>

    <para>
      A quicker way to quantize something simply is to do it in the
      main window, using the <guimenuitem>Quantize</guimenuitem> menu on the <link
      linkend="segment-view-segmentparameterbox">Segment Parameter
      Box</link>.  If you select some segments and change the value
      shown in the menu, the segments will immediately be
      grid-quantized to the resolution shown in the menu.
    </para>
    
  </chapter>
  
  <chapter id="matrix-view">
    <title>The Matrix editor</title>
    <para>
      The &rosegarden; matrix editor enables you to view and edit
      music in a simple, logical format: each note represented as a
      block in a grid, at a height corresponding to the pitch.
    </para>
    <para>
      <screenshot>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="rg-matrixview.png" format="PNG"/>
    </imageobject>
      <textobject>
	<phrase>&rosegarden;'s matrix editor</phrase>
      </textobject>
    </mediaobject>
    </screenshot>
      Each matrix editor window shows a single segment.  To edit a
      segment, just right-click on it in the main canvas and select
      the matrix editor from the menu.  Alternatively, you can
      configure Rosegarden to make the matrix editor the default
      editor available when you double-click on a segment.
    </para>

    <sect1 id="matrix-insertion">
      <title>Inserting notes</title>
      <para>
	The simplest way to enter a note in the matrix view is to
	use the mouse.  To do this, select the pencil tool on the
	toolbar, and then click and drag on the matrix editor.  The
	note will be entered at the time and pitch corresponding to
	the point you click at, and will have a duration
	corresponding to the distance you drag before releasing the
	mouse button.</para>

      <para>By default, the time and duration are snapped to a
	particular grid unit, according to the Grid setting on the
	View menu or the toolbar.  You can prevent this effect by
	holding down Shift while clicking and dragging.
      </para>

      <sect2 id="matrix-insertion-keyboard">
	<title>Typing notes with the PC keyboard</title>

	<sect3>
	  <title>Duration</title>

	  <para>The durations of notes entered from the keyboard are
	    controlled by the Grid setting on the View menu or
	    toolbar.  You can set this using the number keys:</para>

	  <itemizedlist>
	    <listitem><para><keycap>5</keycap> &ndash; Whole bar</para></listitem>
	    <listitem><para><keycap>1</keycap> &ndash; Beat</para></listitem>
	    <listitem><para><keycap>2</keycap> &ndash; Half note (minim)</para></listitem>
	    <listitem><para><keycap>4</keycap> &ndash; Quarter note (crotchet)</para></listitem>
	    <listitem><para><keycap>8</keycap> &ndash; Eighth note (quaver)</para></listitem>
	    <listitem><para><keycap>6</keycap> &ndash; Sixteenth note (semiquaver)</para></listitem>
	    <listitem><para><keycap>3</keycap> &ndash; Thirty-second note (demisemiquaver)</para></listitem>
	    <listitem><para><keycap>0</keycap> &ndash; Sixty-fourth note (hemidemisemiquaver)</para></listitem>
	  </itemizedlist>
	  
	</sect3>

	<sect3>
	  <title>Pitch</title>

	  <para>Once the correct duration is selected in the Grid
	    menu, you can insert a note at the current position of the
	    <link linkend="nv-rulers">insert cursor</link> by pressing
	    one of the pitch keys:</para>

	  <itemizedlist>
	    <listitem><para><keycap>A</keycap> &ndash; Do (the tonic of the current key in the current clef)<!-- !!! FIXME: no clef in matrix view --></para></listitem>
	    <listitem><para><keycap>S</keycap> &ndash; Re</para></listitem>
	    <listitem><para><keycap>D</keycap> &ndash; Mi</para></listitem>
	    <listitem><para><keycap>F</keycap> &ndash; Fa</para></listitem>
	    <listitem><para><keycap>J</keycap> &ndash; So</para></listitem>
	    <listitem><para><keycap>K</keycap> &ndash; La</para></listitem>
	    <listitem><para><keycap>L</keycap> &ndash; Ti</para></listitem>
	  </itemizedlist>

	  <para>Holding <keycap>Shift</keycap> while pressing a key
	    will sharpen the note (except for Mi and Ti, which don't
	    have sharpened versions) and holding <keycap>Shift</keycap>
	    and <keycap>Ctrl</keycap> together will flatten it (except
	    for Fa and Do).</para>

	  <para>To enter notes an octave higher, use the corresponding
	    keys on the next row up: <keycap>Q</keycap>,
	    <keycap>W</keycap>, <keycap>E</keycap>, <keycap>R</keycap>,
	    <keycap>U</keycap>, <keycap>I</keycap>, and
	    <keycap>O</keycap>.  Likewise to enter notes an octave
	    lower, use <keycap>Z</keycap>, <keycap>X</keycap>,
	    <keycap>C</keycap>, <keycap>V</keycap>, <keycap>B</keycap>,
	    <keycap>N</keycap> and <keycap>M</keycap>.</para>

	</sect3>

	<sect3>
	  <title>Other remarks</title>

	  <para>All of the insertion commands are also available on a
	    submenu of the Tools menu.  It's unlikely you'd ever want to
	    navigate the menus just to insert a single note, but the
	    menus show the keyboard shortcuts and so provide a useful
	    reference in case you forget which key is which.</para>

	  <para>The keyboard shortcuts are currently designed for use
	    with a QWERTY-layout keyboard.  There is not yet any way to
	    remap the keys for another layout, short of reassigning each
	    key individually using <menuchoice>
	  <guimenu lang="en">Settings</guimenu>
	  <guimenuitem>Configure Shortcuts...</guimenuitem>
	</menuchoice>.</para>

	</sect3>

      </sect2>

      <sect2 id="matrix-insertion-midi">
	<title>Entering notes using a MIDI keyboard</title>

	<para>
	  You can enter notes into the matrix editor one at a time
	  using a MIDI keyboard or other MIDI control device.  The
	  matrix editor uses the pitches you play on the keyboard,
	  but the durations you have selected in the Grid setting of
	  the editor itself.  This is known as "step recording".
	</para>

	<para>
	  To start entering notes from a MIDI keyboard, first make
	  sure the keyboard is configured as your default MIDI
	  record device.  Then make sure you have the right Grid
	  setting in the View menu or toolbar, as this controls the
	  note duration.  Then press the <!-- !!!  image of button
	  --> step recording button on the matrix editor's toolbar,
	  or select Step Recording from the Tools menu.  From that
	  point on all notes pressed on the MIDI keyboard will be
	  inserted at the current insertion time in that window,
	  until step recording is switched off again or activated in
	  a different window or the window is closed.
	</para>

	<para>
	  You can change the Grid setting while step recording is in
	  progress, in order to insert notes of different durations.
	</para>
      </sect2>
    </sect1>

    <sect1 id="matrix-quantize">
      <title>The Quantize control</title>
      <para>
	<!-- !!! -->
      </para>
    </sect1>

    <sect1 id="matrix-selection">
      <title>Selecting notes</title> <para>To select notes in the
	matrix editor, switch to the Select (arrow) tool and then
	outline a rectangular area containing the notes you want to
	select.  The selected events will then be highlighted in blue.
	If you instead click on a single event, just that event will
	be selected.

      </para><para>If you hold <keycap>Shift</keycap> while dragging
	out a rectangle or clicking on a note, the new selection will
	be added to any existing selection instead of replacing it.
      </para>

      <para>
	To clear a selection, click in an empty space on the matrix
	editor, or hit the Escape key.</para>
      
      <para>You can also select all of the notes of a given pitch,
	by shift-clicking on a key in the piano keyboard down the left
	side of the matrix editor.  You can also shift-click and drag
	to select a range of pitches.  This selection is added to any
	existing selection you have, so if you want a clean new
	selection, clear the old one first.
      </para>
    </sect1>

    <sect1 id="matrix-editing">
      <title>Moving and copying notes</title>
      <para>
	You can move notes in both time and pitch on the matrix
	editor by either clicking and dragging them with the Move
	tool, or selecting them and then dragging them with the
	Select tool.
      </para>
      <para>
	To copy notes, select them and then use the standard copy
	and paste functions.  After the paste the pasted notes will
	be selected instead, and you can then drag them wherever you
	need them.
      </para>
    </sect1>

    <sect1 id="matrix-view-options">
      <title>Configuring the matrix view</title>
      <para>
	<!-- zoom, rulers etc -->
      </para>
    </sect1>
  </chapter>

  <chapter id="notation-view">
    <title>The Notation editor</title>

    <!-- Introduction, purpose -->

    <sect1 id="nv-introduction">
      <title>Introduction</title>

      <para>

	The &rosegarden; notation editor enables you to view and edit
	one or more staffs in traditional score notation.

      </para><para>

	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-notationview.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s notation editor</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
	&rosegarden; aims to present scores with the best possible
	layout compatible with its primary focus as a sequencer
	application.  This means that although the editor supports
	chords, overlapping and nested beamed groups, triplets and
	arbitrary tuplets, grace notes, dynamics, accents, text and so
	on, it does not provide as much fine control over layout
	(especially in contrapuntal music) as a dedicated score
	editing program might. &rosegarden; does not aim to produce
	typeset-quality score, although it can export Lilypond files,
	which may form a good basis for typesetting.

      </para>
    </sect1>

    <!-- Single and multiple staffs, and "current staff" -->

    <sect1 id="nv-staffs">
      <title>Single and multiple staffs</title>

      <para>
	There are three ways to open a notation editor from the
	&rosegarden; main window.  (They all require that you
	have some existing segments in the main window first,
	so if you're starting a new composition, you should
	create your segments before you start thinking about
	how to edit them.)

	<variablelist>

	  <varlistentry>
	    <term>Double-clicking on segments</term>
	    <listitem>
	      
	      <para>The most obvious way is just to double-click on
		a segment in the main canvas.  This opens the segment
		in whatever you have configured <!-- !!!Link --> as
		the default editor (notation, matrix, or event list),
		and by default this is the notation editor.  So
		double-clicking a single segment will open it as a
		single staff in a Notation editor window.</para>
	      
	      <para>You can also open a multi-staff editor this way:
		holding down the Shift key, select (with a single
		mouse click) each of the segments on the main view
		that you want to open, but double-click on the last
		one.  All of the selected segments will then be opened
		together in a single notation window.</para>

	    </listitem>
	  </varlistentry>

	  <varlistentry>
	    <term>The Open in Default Editor menu function (the Return key)</term>
	    <listitem>

	      <para>The Return key is a shortcut for the Open in
		Default Editor menu function, which does much the same
		thing as double-clicking: opens all of the currently
		selected segments together in a notation editor, or in
		whichever other editor you have configured as your
		default. </para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term>The Open in Notation Editor menu functions</term>
	    <listitem>

	      <para>Alternatively, you can use the main window's
		Open in
		Notation Editor menu function, either on
		the Segments menu or on the right-button popup menu on
		a segment in the canvas.  Select the segments you want
		to edit (by shift-clicking as above, or by using the
		Select All Segments function) and
		then select Open in
		Notation Editor.</para>
	    </listitem>
	    
	  </varlistentry>
	</variablelist>

      </para>

      <para>
	If you have more than one staff (i.e. segment) visible in the notation
	editor, only one of them can be "current" at once.  The
	current staff can be distinguished because it has the insert
	cursor on it (see <link linkend="nv-rulers">Rulers and
	  Cursors</link>), and this is the staff on which any editing
	operations that use the insert cursor will take place.  The
	topmost staff is the current one by default, but you can
	switch to a different staff by ctrl-clicking on it <!--- !!! check this --> or by using the Move Cursor Up Staff and Move Cursor Down Staff menu functions.
      </para>

    </sect1>

    <!-- Linear and page layouts -->

    <sect1 id="nv-layout">
      <title>Linear and page layouts</title>

      <para>
	The usual way the notation editor displays staffs is known
	as Linear layout: one staff on top of another, with each
	staff as a single, horizontally scrollable long line.  Some
	of the functions of the editor (such as the <link
	  linkend="nv-rulers">Rulers</link>) are only available in
	Linear layout.
      </para>

      <para>
	However, you can also display staffs in two different
	page-based layouts: Continuous Page and Multiple Page.</para>

      <para>In Continuous Page layout, the music is arranged in one
	infinitely-tall page of the same width as the window.  Each
	staff breaks at the end of a line, starting a new line below
	the remaining staffs.</para>

      <para>In Multiple Page layout, the music is divided up into
	real pages much as it will be when printed.  The size of each
	page is calculated so that approximately the same amount of
	music will fit on each line as it will when actually printed
	(according to the point size specified for the printing
	resolution in the configuration dialog).  The printed version
	is unlikely to be exactly the same, as it depends on the
	precise paper size and margins in use when printing, but it
	should be fairly close if you happen to be using A4
	paper.</para>

      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-notationview-multipage.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s notation editor in Multiple Page layout</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
        Most, but not all, of the display and editing functions
	work in the page layout modes as well as in linear layout.
      </para>

      <para>
	To switch between these layout modes, use the Linear Layout, Continuous Page Layout and Multiple Page Layout menu functions.
      </para>
    </sect1>

    <!-- Rulers and Cursors -->

    <sect1 id="nv-rulers">
      <title>Rulers and cursors</title>

      <para>
	The &rosegarden; Notation editor window includes two rulers
	and two cursors.  The rulers are the horizontal strips
	divided up with tickmarks at top and bottom of the main
	notation canvas, and the cursors are the coloured vertical
	lines shown initially at the start of the top staff in the
	editor.  <!-- !!! screenshot -->
      </para>

      <para>
	The purple cursor is the insert cursor.  It shows the point
	at which operations such as insert and paste will take
	place.  You can reposition the insert cursor by clicking or
	dragging on the top ruler, or by clicking with the Select
	tool on an empty part of the staff (avoiding any events), or
	by clicking anywhere with <keycap>Ctrl</keycap> held down.
      </para>

      <para>You can also use the left and right arrow keys to move
	the insert cursor one event at a time.  If you hold <keycap>Ctrl</keycap> while
	pressing the arrow keys, the cursor will move a whole bar at a
	time; if you hold Shift, the cursor will <link
	  linkend="nv-tools-selections">select the events</link> as it
	passes over them.
      </para>

      <para>
	The blue cursor is the playback pointer.  Just like the
	similar cursors in the main window and the matrix views,
	this shows the location of the current playback or record
	position.  It can be repositioned using the bottom ruler.
      </para>

      <para>
	Note that the rulers are only shown in <link
	  linkend="nv-layout">Linear layout</link> mode.
      </para>

    </sect1>

    <!-- Display conventions (annotated picture with some selected notes,
    some quantized notes, a bar of incorrect length etc) -->

    <!-- Tools and Selections -->

    <sect1 id="nv-tools-selections">
      <title>Tools and selections</title>
      <para>
	Most of the menu and toolbar editing functions in the
	&rosegarden; Notation editor fall into one of three
	categories: <quote>tools</quote>, <quote>functions that
	  operate on selections</quote>, and <quote>drag
	  operations</quote>.
      </para>

      <variablelist>
	<varlistentry>
	  <term>Tools</term>
	  <listitem>
	    <para>
	      The basic tools are the selection tool, the erase
	      tool, and those for inserting notes, rests, text and so
	      on, which are usually accessed from the toolbar buttons.
	      Choosing a tool changes the default behaviour of the
	      mouse buttons on the main notation canvas, at least
	      until another tool is chosen instead.  For example,
	      choosing the selection tool allows you to make
	      selections and so to use the selection-based functions
	      (below); choosing an insertion tool (such as one of the
	      notes) switches the <acronym>GUI</acronym>'s behaviour so as to insert
	      notes by clicking on the canvas; choosing the erase tool
	      allows you to remove events by clicking on them.
	    </para>
	    <para>
	      You can also change the current tool using the Tools menu.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Functions that operate on selections</term>
	  <listitem>
	    <para>
	      The majority of the remaining menu functions require a
	      selection to be made on the canvas before they can be
	      used. Some of them (such as <guimenuitem>Cut</guimenuitem> 
	      or the <guimenuitem>Note Style</guimenuitem>
	      functions) will operate on any selected events; others
	      (such as the <guimenuitem>Grace Notes</guimenuitem> 
	      or <guimenuitem>Stem Directions</guimenuitem> functions)
	      will refuse to work unless the selection contains 
	      some notes.
	    </para>
	    <para>
	      To select some events on the canvas, switch to the
	      Select (arrow) tool and then outline a rectangular area
	      containing the events you want to select. The selected
	      events will then be highlighted in blue. If you click
	      on a single event, just that event will be selected <footnote> 
		<para> You can also double-click on a single event to open an
		  editing dialog for that event, but that's got nothing to
		  do with selections.</para> </footnote>).
	    </para><para>If you hold 
	      <keycap>Shift</keycap> while dragging
	      out a rectangle, its contents will be added to any
	      existing selection instead of replacing it.
	    </para>
	    <para>
	      To select a whole bar, double-click with the Select tool
	      on some empty space within that bar; to select the whole
	      staff, click three times. The Edit menu carries
	      functions for selecting extended areas based on the
	      location of the insert cursor, and you can also select
	      events around the insert cursor by holding Shift and
	      pressing the left or right arrow keys.
	    </para>
	    <para>
	      It is not possible to select events from more than
	      one staff at once.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Drag operations</term>
	  <listitem>
	    <para>
	      You can also do a certain amount of editing just by
	      dragging things around.  Switch to the Select (arrow)
	      tool, and then you can change the pitch of notes by
	      just click-and-dragging their heads up or down, and
	      change the times of notes and other events by dragging
	      them left or right.  (You can't drag rests or time
	      signatures, but you can drag everything else.  If you
	      have more than one event selected, the whole selection
	      will be dragged at once.)
	    </para>
	    <para>
	      Dragging is usually a less accurate way of editing
	      things than using the menu or toolbar functions, but
	      it can be easier.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1>

    <!-- Insertion: notes, auto-ties, accidentals -->

    <sect1 id="nv-insertion">
      <title>Inserting notes and rests</title>

      <para>To insert a note, you generally just select one of the
	note tools by clicking on a particular duration of note on the
	toolbar, and then click on the staff at the point where you
	want to add the note.</para>

      <para>If you add a note at the same time as an existing note of
	different duration, the editor will generally assume that you
	want to create chords and will split the existing or new note
	accordingly so as to create one or more chords with ties.  If
	you really do want to chord two different durations, you can
	select the tied noteheads and use the Collapse Equal-Pitch Notes
	function to merge them together. Alternatively, the default
	behaviour can be changed in the &rosegarden; configuration dialog
	so as not to do the split at all.</para>

      <para>If you add a note exactly over an existing note of
	different duration (i.e. at the same pitch), the duration of the
	existing note will be changed to that of the new one.</para>

      <para>If you add a rest at the same time as an existing note,
	the note will be silenced for the duration of the rest,
	shortening or possibly removing it altogether.</para>

      <sect2 id="nv-insertion-keyboard">
	<title>Typing notes and rests with the PC keyboard</title>

	<sect3>
	  <title>Duration</title>

	  <para>First, ensure a notation tool is selected to indicate
	    the duration of note (or rest) you wish to insert.  You can
	    select the various note types using the number keys:</para>

	  <itemizedlist>
	    <listitem><para><keycap>5</keycap> &ndash; Breve</para></listitem>
	    <listitem><para><keycap>1</keycap> &ndash; Whole note (semibreve)</para></listitem>
	    <listitem><para><keycap>2</keycap> &ndash; Half note (minim)</para></listitem>
	    <listitem><para><keycap>4</keycap> &ndash; Quarter note (crotchet)</para></listitem>
	    <listitem><para><keycap>8</keycap> &ndash; Eighth note (quaver)</para></listitem>
	    <listitem><para><keycap>6</keycap> &ndash; Sixteenth note (semiquaver)</para></listitem>
	    <listitem><para><keycap>3</keycap> &ndash; Thirty-second note (demisemiquaver)</para></listitem>
	    <listitem><para><keycap>0</keycap> &ndash; Sixty-fourth note (hemidemisemiquaver)</para></listitem>
	  </itemizedlist>
	  
	  <para>Holding the <keycap>Ctrl</keycap> key while pressing a
	    number will select the corresponding dotted-note
	    tool.</para>

	  <para>You can switch to a triplet version of the note
	    duration by pressing the <keycap>G</keycap> key.  Pressing it
	    again will switch back to the normal duration.  The status
	    bar at the bottom of the window will notify you of when a
	    triplet duration is active.</para>
	</sect3>

	<sect3>
	  <title>Pitch</title>

	  <para>Once a notation tool is selected, you can insert a
	    note at the current position of the <link
	      linkend="nv-rulers">insert cursor</link> by pressing one of
	    the pitch keys:</para>

	  <itemizedlist>
	    <listitem><para><keycap>A</keycap> &ndash; Do (the tonic of the current key in the current clef)</para></listitem>
	    <listitem><para><keycap>S</keycap> &ndash; Re</para></listitem>
	    <listitem><para><keycap>D</keycap> &ndash; Mi</para></listitem>
	    <listitem><para><keycap>F</keycap> &ndash; Fa</para></listitem>
	    <listitem><para><keycap>J</keycap> &ndash; So</para></listitem>
	    <listitem><para><keycap>K</keycap> &ndash; La</para></listitem>
	    <listitem><para><keycap>L</keycap> &ndash; Ti</para></listitem>
	  </itemizedlist>

	  <para>Holding <keycap>Shift</keycap> while pressing a key
	    will sharpen the note (except for Mi and Ti, which don't
	    have sharpened versions) and holding <keycap>Shift</keycap>
	    and <keycap>Ctrl</keycap> together will flatten it (except
	    for Fa and Do).</para>

	  <para>To enter notes an octave higher, use the corresponding
	    keys on the next row up: <keycap>Q</keycap>,
	    <keycap>W</keycap>, <keycap>E</keycap>, <keycap>R</keycap>,
	    <keycap>U</keycap>, <keycap>I</keycap>, and
	    <keycap>O</keycap>.  Likewise to enter notes an octave
	    lower, use <keycap>Z</keycap>, <keycap>X</keycap>,
	    <keycap>C</keycap>, <keycap>V</keycap>, <keycap>B</keycap>,
	    <keycap>N</keycap> and <keycap>M</keycap>.</para>

	</sect3>

	<sect3>
	  <title>Rests</title>
	  
	  <para>To insert a rest instead of a note, press
	    <keycap>P</keycap>.  Alternatively, you can use the
	    <keycap>T</keycap> and <keycap>Y</keycap> keys to switch the
	    current tool to a rest tool and back to a note tool again.</para>

	</sect3>

	<sect3>
	  <title>Chords</title>

	  <para>The default behaviour of the notation editor is to
	    move the insert cursor forward after inserting a note, so as
	    to be ready to insert another note after it in a melody;
	    this can be changed using the <keycap>H</keycap> key, which
	    switches to chord mode so that subsequent insertions occur
	    at the same time as the last one.  Pressing
	    <keycap>H</keycap> again switches back to the melody
	    insertion behaviour.</para>

	</sect3>

	<sect3>
	  <title>Other remarks</title>

	  <para>All of the insertion commands are also available on a
	    submenu of the Tools menu.  It's unlikely you'd ever want to
	    navigate the menus just to insert a single note, but the
	    menus show the keyboard shortcuts and so provide a useful
	    reference in case you forget which key is which.</para>

	  <para>The keyboard shortcuts are currently designed for use
	    with a QWERTY-layout keyboard.  There is not yet any way to
	    remap the keys for another layout, short of reassigning each
	    key individually using the "Configure Shortcuts..." option
	    on the Settings menu.</para>

	</sect3>

      </sect2>

      <sect2 id="nv-insertion-midi">
	<title>Entering notes using a MIDI keyboard</title>

	<para>
	  You can enter notes into the notation editor one at a time
	  using a MIDI keyboard or other MIDI control device.  The
	  notation editor uses the pitches you play on the keyboard,
	  but the durations you have selected in the editor itself.
	  This is known as "step recording".
	</para>

	<para>
	  To start entering notes from a MIDI keyboard, first make
	  sure the keyboard is configured as your default MIDI
	  record device.  Then make sure a notation tool is selected
	  to set a duration.  Then press the <!-- !!!  image of
	  button --> step recording button on the notation editor's
	  toolbar, or select Step Recording from the Tools menu.
	  From that point on all notes pressed on the MIDI keyboard
	  will be inserted at the current insertion time in that
	  notation window, until step recording is switched off
	  again or activated in a different window or the window is
	  closed.
	</para>

	<para>
	  You can select another notation tool while step recording
	  is in progress, in order to insert notes of different
	  durations; and you can also switch into Chord mode <!--
	  !!! link --> to insert chords.
	</para>
      </sect2>
      
    </sect1>

    <!-- Keys, Clefs and Time Signatures -->

    <sect1 id="nv-signatures">
      <title>Clefs, keys, tempo and time signatures</title>
      
      <para>The first thing to know about the way &rosegarden; handles
	these is that time-related changes (tempos and time
	signatures) are treated entirely differently from clefs and
	keys. In order to simplify managing playback and recording as
	well as notation, &rosegarden; requires that when the tempo or
	time signature changes, it does so in all staffs at once.  You
	can't have one staff in 3/4 and another in 4/4 simultaneously,
	or one staff playing at 120 to the beat and another at 90.
	This applies only to time: there is no such restriction on the
	use of clef and key changes.</para>

      <para>To change the clef, key, tempo or time signature within a
      notation editor window, position the <link
      linkend="nv-rulers">insert cursor</link> at the point where you
      want the change to happen, and use one of the Edit menu's Add
      Clef Change..., Add Key Change..., Add Tempo Change... and Add
      Time Signature Change... functions.  You will then see a dialog
      box in which you can choose the particular clef, key, tempo or
      time signature setting you want to apply, as follows.</para>

      <sect2 id="nv-signatures-clef">
	<title>Clef</title>
	<para>
	  <screenshot>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="rg-clefdialog.png" format="PNG"/>
	</imageobject>
	  <textobject>
	    <phrase>&rosegarden;'s clef dialog</phrase>
	  </textobject>
	</mediaobject>
	</screenshot>
	</para>

	<para>The dialog allows you to choose a clef, but also
	  to choose how you want the clef to be applied, in
	  cases where there are already some notes following
	  the point where the clef is to be inserted.  You
	  must choose one of the following:

	  <variablelist>

	    <varlistentry>
	      <term>Maintain current pitches</term>
	      <listitem>
		<para>
		  Any notes following the clef will keep
		  their current performance pitches.
		</para>
		<para>
		  For example, inserting a
		  tenor clef in the middle of a previously
		  treble-clef section will cause the notes following
		  the clef to be moved an octave
		  higher up the staff, because they will still have
		  their treble-clef pitches.
		</para>
	      </listitem>
	    </varlistentry>
	    
	    <varlistentry>
	      <term>Transpose into appropriate octave</term>
	      <listitem>
		<para>
		  Any notes following the clef will
		  retain their pitch within the octave, but
		  may be moved into a different octave to
		  match the new clef, and therefore will play
		  at a new pitch.
		</para>
		<para>
		  For example, inserting a tenor clef in the
		  middle of a previously treble-clef section
		  will cause the notes following the clef to
		  move by one staff line only to adjust to the new
		  clef, but to play an octave lower than before.
		</para>
	      </listitem>
	    </varlistentry>
	    
	  </variablelist>
	  
	</para>
      </sect2>
      
      <sect2 id="nv-signatures-key">
	<title>Key</title>
	<para>
	  <screenshot>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="rg-keysigdialog.png" format="PNG"/>
	</imageobject>
	  <textobject>
	    <phrase>&rosegarden;'s key signature dialog</phrase>
	  </textobject>
	</mediaobject>
	</screenshot>
	</para>
      </sect2>
      
      <sect2 id="tempo">
	<title>Tempo</title>
	<!-- Should be in general section, not notation -->
	<para>
	  <screenshot>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="rg-tempodialog.png" format="PNG"/>
	</imageobject>
	  <textobject>
	    <phrase>&rosegarden;'s tempo dialog</phrase>
	  </textobject>
	</mediaobject>
	</screenshot>
	</para>
      </sect2>
      
      <sect2 id="time-signature">
	<title>Time signature</title>
	<!-- Should be in general section, not notation -->
	<para>
	  <screenshot>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="rg-timesigdialog.png" format="PNG"/>
	</imageobject>
	  <textobject>
	    <phrase>&rosegarden;'s time signature dialog</phrase>
	  </textobject>
	</mediaobject>
	</screenshot>
	</para>
      </sect2>
    </sect1>

    <!-- Text -->

    <sect1 id="nv-text">
      <title>Text and lyrics</title>
      
      <para>A staff can contain various sorts of text, in text
	events.  There are two basic classes of text event: single
	text items used for point annotations etc., and lyrics.  The
	former can be created (and so associated with a particular
	time in the staff) using the Text tool, which is available on
	the button marked with a big <guilabel>T</guilabel> in the toolbar.  Lyrics can
	also be created this way, but are more easily created using
	the <link linkend="nv-text-lyrics">lyric editor</link>.</para>

      <para>To add a piece of text, select the Text tool and click
	at the point where you want to add it.  A dialog box will
	appear, into which you can type the text and choose its
	intended purpose.  (Rosegarden prefers to store what the text
	is for, rather than how it should look; this is so that in
	future we may be able to configure how the various sorts of
	text are presented for each individual user.) The available
	purposes (or styles) are:</para>

      <variablelist>

	<varlistentry><term>Dynamic</term><listitem><para> Used for
	      minor local indications such as the dynamic marks "p", "mf"
	      etc. Shown below the staff in small italic
	      type by default.  </para></listitem></varlistentry>

	<varlistentry><term>Direction</term><listitem><para> Used
	      when indicating significant changes in style or mood.  Shown
	      above the staff in large roman type by default.
	    </para></listitem></varlistentry>

	<varlistentry><term>Local Direction</term><listitem><para>
	      Used to indicate less significant changes in style or mood.
	      Shown below the staff in a smaller bold-italic roman type by
	      default.  </para></listitem></varlistentry>

	<varlistentry><term>Tempo</term><listitem><para> Used to
	      indicate significant changes in tempo.  Shown above the
	      staff in large bold roman type by default.
	    </para></listitem></varlistentry>

	<varlistentry><term>Local Tempo</term><listitem><para> Used
	      to indicate more minor or local changes in tempo.  Shown
	      above the staff in a small bold roman type by default.
	    </para></listitem></varlistentry>

	<varlistentry><term>Lyric</term><listitem><para> Although
	      lyrics are usually created in the <link
		linkend="nv-text-lyrics">lyric editor</link>, they can also
	      be entered word by word if necessary using this style.  This
	      style is shown below the text in a small roman type by
	      default.  (Warning: if you enter lyrics this way and later
	      edit the staff's lyrics using the lyric editor, any lyrics
	      entered this way may be modified or moved if their
	      positioning is not compatible with that expected by the
	      lyric editor.)  </para></listitem></varlistentry>

	<varlistentry><term>Annotation</term><listitem><para> Used
	      for helpful text that is not strictly considered part of the
	      score.  Shown below the staff, boxed-out in a yellow
	      sticky-label-style box by default.
	    </para></listitem></varlistentry>

      </variablelist>

      <para>You can also edit text after creating it, by clicking on
	the existing text with the text tool.</para>
      
      <sect2 id="nv-text-lyrics">
	<title>Editing lyrics</title>
	
	<para>The Lyric editor, available from the <guimenuitem>Open Lyric
	    Editor</guimenuitem> option of the <guimenu>View</guimenu> menu, allows you to edit all of
	  the lyric events for a single staff at once, using a fairly
	  rudimentary textual editing system.  To use it, just
	  activate the menu option, edit the lyric text in the
	  resulting dialog, and then hit OK.</para>

	<para>The lyrics you enter should follow a particular
	  format.  Bar lines are vital to avoid the editor getting
	  confused, and are represented with a slash ("/").  Within
	  each bar the individual syllables are separated by spaces
	  (at least one space: the editor doesn't care about any extra
	  whitespace). Each syllable in turn will be attached to the
	  next subsequent note or chord within that bar (although at
	  the moment the editor can get quite confused by chords that
	  are not exact, i.e. that require smoothing or
	  quantizing).</para>

	<para>If you want a note to have no syllable attached to it,
	  you need to provide a dot (".") as the syllable for that
	  note.  (This is why the default lyric text for a segment is
	  usually full of dots.)  Remember to separate the dots with
	  spaces, so that they are clearly separate syllables.</para>
	
	<para>If you want more than one syllable on the same note,
	  with a space between them, use a tilde ("~") instead of the
	  space.  It will be shown as a space on the score.</para>

	<para>If you want to split a syllable across two notes, with
	  a hyphen, you need to enter a space following the hyphen so
	  the editor knows to treat it as two syllables.  (Hyphens get
	  no special treatment within syllables.)</para>

	<para>Syllables consisting only of numbers surrounded by
	  square brackets (like "[29]") will be ignored; this is the
	  format used for the automatically-generated bar numbers
	  shown in the editor.</para>

	<para>You should also be aware that the textual format of
	  lyrics is only used for editing:  the lyrics are actually
	  stored as distinct text events (one per syllable).  This
	  means that the text format may potentially change in the
	  future to accommodate more advanced editing capabilities,
	  although the event format should not change and so your
	  saved files should continue to be compatible.</para>

      </sect2>

    </sect1>

    <!-- Indications -->

    <sect1 id="nv-indication">
      <title>Slurs and hairpins</title>

      <para>Slur and hairpin dynamic markings are stored as events,
	just like notes or rests.  To create one, select the area you
	want it to cover (a series of notes or whatever), and then use
	the <guimenuitem>Add Slur</guimenuitem>, 
	<guimenuitem>Add Crescendo</guimenuitem> or 
	<guimenuitem>Add Decrescendo</guimenuitem> options from
	the <guimenu>Group</guimenu> menu.</para>

      <para>You remove a slur or hairpin in the same way as any
	other event: either select it with the selection tool and then
	hit <keycap>Delete</keycap>, or click on it with the erase tool active.</para>

    </sect1>

    <!-- Stem direction, slashes etc -->

    <sect1 id="nv-note-qualities">
      <title>Note stems and slashes</title>

      <para>You can set the stem direction of any selected notes
	(provided they are a sort that have stems) using the three
	Stem Direction options on the Notes menu.  The options allow
	you to either fix the stems up or down, or revert to the stem
	direction that &rosegarden; would otherwise have chosen.  See
	also <link linkend="nv-beamed-groups">Beams</link>.</para>

      <para>The <guimenu>Notes</guimenu> menu also contains options for adding slashes
	across note stems, for example to indicate short repeated
	notes or drum rolls.  These are currently purely notational;
	&rosegarden; will not take them into account when playing the
	staff or generating &MIDI;.</para>
    </sect1>
    
    <!-- Beamed groups, including overlapping and nesting them -->

    <sect1 id="nv-beamed-groups">
      <title>Beams</title>
      
      <para>Adding beams to notes is considered a grouping operation
	in the &rosegarden; Notation editor, available on the <guimenu>Group</guimenu>
	menu.  Select the notes you want to beam, and use the Beam
	<guimenu>Group</guimenu> menu option.  To remove a beam, select the notes and use
	the <guimenuitem>Unbeam</guimenuitem> menu option.</para>

      <para>It is possible to have more than one beamed group
	happening at the same time &mdash; you just select and beam the
	separate groups one at a time &mdash; but Rosegarden is usually not
	yet clever enough to work out which notes should have stems up
	and which should have stems down for simultaneous beamed
	groups, so you will probably have to set the stem directions
	of the notes in the groups explicitly as well as beaming them.</para>

      <para>&rosegarden; can attempt to guess a sensible beaming for a
	piece of music, provided it's not too complicated.  To invoke
	this, select the notes you want to calculate the beaming for
	(for example by triple-clicking to select a whole staff) and
	then use the <guimenuitem>Auto-Beam</guimenuitem> option on the 
	<guimenu>Group menu</guimenu>.  Auto-beaming
	is also done automatically when loading a &MIDI; file, for
	example, and the editor also does some automatic beaming as
	you enter notes (this can be disabled by changing the
	"Auto-Beam when appropriate" setting on the configuration
	dialog or the insertion tool's right-button menu).</para>

    </sect1>

    <!-- Tuplets -->

    <sect1 id="nv-tuplets">
      <title>Triplets and other tuplets</title>

      <para>A triplet group consists of three notes or chords played
	in the time of two.  (More precisely, it consists of notes
	with a total duration of three arbitrary units played in the
	time of two of those units.)</para>

      <para>We use the word <quote>tuplet</quote> to describe the general
	situation in which notes with a total duration of any given
	number of units are played in the time of a different number
	of those units: nine notes in the time of eight, or six in the
	time of four, or a crotchet and a quaver in the time of a
	single crotchet, or even two notes in the time of three.  (At
	present &rosegarden; does not support the last example &mdash; tuplet
	groups must always be played with a shorter duration than
	written.)</para>

      <para>The triplet and tuplet menu functions work by taking an
	existing series of notes or rests and squashing them so they
	play quicker, filling in the left-over space at the end of the
	series with a final rest and drawing the whole as a tuplet
	group.  You can therefore create a new series of triplets by
	entering the first two notes of the series (in their normal
	form), making them into triplets, and then filling in the rest
	left over by the triplet operation with the final note of the
	triplet.  Or you can apply the triplet operation before you
	enter any notes, thus turning the original rest itself into
	triplet form, and then insert the notes of the triplet on top
	of it.  Some examples may help:</para>

      <!-- Need examples and screenshots -->
      
      <!-- Then discuss general tuplet dialog... -->

      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-tupletdialog.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s general tuplet dialog</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>

      <para>To specify a general tuplet group, we need to know what
	the base note is (for example, if we play three crotchets in
	the time of two then the base is a crotchet) and the ratio of
	the number of base notes written to the number played.</para>

      <!-- Then discuss "tuplet mode": with a subtitle? -->

    </sect1>

    <!-- Grace notes -->

    <!-- Paste -->

    <sect1 id="nv-paste-types">
      <title>Paste types</title>

      <para>
	The meaning of <quote>cut and paste</quote> is less obvious for a music
	editing program than it is for something like a word
	processor in which the letters and words go in a simple
	linear order.  Accordingly, &rosegarden;'s Notation editor
	offers several different types of Paste operation, as well
	as separate Cut and Cut and
	  Close functions.
      </para>

      <para>
	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-pastedialog.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s paste-type dialog</phrase>
	</textobject>
      </mediaobject>
      </screenshot>

	The types of Paste operation are:</para>

      <variablelist>

	<varlistentry>
	  <term>Restricted</term>
	  <listitem>
	    <para>Requires an existing gap (containing nothing but
	      rests) of enough duration to completely contain the
	      clipboard's contents.  The contents are pasted into
	      the gap.  If there is no gap long enough, the paste
	      is not carried out.
	    </para>
	    <para>
	      This is the default paste type.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Simple</term>
	  <listitem>
	    <para>Erases enough events to make a gap long enough to
	      paste into, and then pastes into that.  The pasted 
	      events therefore completely replace any existing ones 
	      in the time covered by the paste.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Open and Paste</term>
	  <listitem>
	    <para>The opposite of Cut and
		Close. <!-- !!! define that --> Makes room for the paste by moving all of the
	      subsequent events further towards the end of the
	      composition.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Note Overlay</term>
	  <listitem>
	    <para>Carries out a paste in the way that it would
	      happen if you entered each of the notes in the clipboard
	      yourself using the notation editor: if there are other
	      notes overlapping with them, the new or existing notes
	      will be split into ties appropriately.
	    </para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Matrix Overlay</term>
	  <listitem>
	    <para>Carries out a paste in the way that it would
	      happen if you entered each of the notes in the clipboard
	      yourself using the matrix editor: the notes presently
	      in the way of the paste will be ignored, allowing the new 
	      notes to overlap arbitrarily with them.
	    </para>
	  </listitem>
	</varlistentry>

      </variablelist>

      <para>All of these take effect at the current position of the 
	insert cursor on the current staff.  To choose between the various 
	paste types, use the Paste...
	menu option (with dots) on the Edit menu.
      </para>

    </sect1>

    <sect1 id="nv-adjustments">
      <title>Adjusting Notation</title>


      <sect2 id="nv-adjustments-note-rest-durations">
	<title>Adjusting note and rest durations</title>
	
	<sect3 id="nv-normalize-rests">
	  <title>Normalizing Rests</title>

	  <para>Sometimes as a result of editing or quantization
	  operations, a piece of notation can end up with incorrect
	  rest durations for the current time signature.  You can use
	  the <guimenuitem>Normalize Rests</guimenuitem> function to
	  fix these.  This function examines each sequence of
	  consecutive rests found in the selection, and adjusts,
	  splits and merges rests as necessary to ensure that the
	  rests have theoretically correct durations and fall on the
	  correct boundaries.
	  </para>
	  
	  <para>For example, a 4/4 bar containing a crotchet
	    (quarter-note), then a minim (half-note) rest and a
	    crotchet rest will be rearranged to place the crotchet
	    rest first, as the minim rest should not cross the
	    central beat boundary of the bar.
	  </para>
	</sect3>
<!--
	    <varlistentry id="commands-nv-menu-transforms-make-viable">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Make Notes Viable</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Splits notes at displayable
		    durations.</action> This function is intended to deal
		  with notes that have excessively long durations that
		  overflow barlines or that are too long to be displayed
		  as a single note.  It takes any such notes and splits
		  them into shorter, tied notes.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-de-counterpoint">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>De-Counterpoint</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Turns counterpoint into a series of split-and-tied notes and chords.</action>

		  &rosegarden; has no explicit support for counterpoint
		  (multiple lines of notes edited separately on the
		  same staff), but it will do its best to approximate
		  it when it finds notes in a segment that are
		  apparently contrapuntal, i.e. that overlap but that
		  are not precise enough to be treated as chords.  For
		  example, when a short note starts shortly after a
		  longer note, Rosegarden will show the longer note
		  and a short <quote>spacing</quote> rest together, followed by the
		  shorter note.  Unfortunately this often isn't what
		  you want.
		</para>

		<para>The De-Counterpoint function can be applied to a
		  selection that contains overlapping notes.  It will
		  split overlapping notes at the point where they
		  overlap, and tie together the resulting split notes,
		  ensuring that the music takes the form of a series of
		  chords and/or single notes starting and ending in neat
		  blocks, with some notes possibly tied.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="nv-transpose">
	    <title>Transpose</title>
		<para><action>Alters the pitch of the selected
		    notes.</action> This submenu contains basic
		  transposition functions which move the selected notes
		  up or down a semitone or a whole octave in pitch, as
		  well as a general transpose function that allows you
		  to choose how far up or down you want to transpose the
		  selection.
		</para>

		<para>These functions simply change the stored pitches
		of the notes in the selection, so that they both play
		and appear at the new pitches.  They do not deal with
		performance transposition (displaying one pitch and
		playing another), for which see the main window's
		segment parameter box; nor do they help you with
		transposing from one key into another, for which see
		<link linkend="nv-signatures-key">Key
		Signatures</link>.
		</para>
	    </varlistentry>
-->
      </sect2>
    </sect1>

    <sect1 id="nv-interpret">
      <title>Interpreting Performance Cues in Notation</title>
      <!-- !!! -->
      <para>
	You can use the Interpret function <!-- !!! menu location --> to modify the velocities
	and timings of notes according to any written or indicated
	dynamics found. The selection of interpretations available is
	as follows:
	
	<variablelist>
	  <varlistentry>
	    <term>Apply text dynamics (p, mf, ff etc)
	    </term>
	    <listitem><para> Sets a velocity to each note
		based on the last piece of text of "Dynamic"
		type seen on the same staff (only texts of the
		form pp, p, mp, mf, f, ff, fff etc are matched).
	      </para></listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term>Apply hairpin dynamics
	    </term>
	    <listitem><para> Makes the notes gradually
		increase or decrease in velocity during a
		crescendo or decrescendo hairpin.
	      </para></listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term>
	      Stress beats
	    </term>
	    <listitem><para> Makes notes that land on bar or
		beat boundaries slightly louder (greater
		velocity) than the surrounding notes.
	      </para></listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term>
	      Articulate slurs, staccato, tenuto etc
	    </term>
	    <listitem><para> Shortens unslurred notes,
		shortens staccato notes more, and gives notes
		inside slurs and tenuto notes their full length.
	      </para></listitem>
	  </varlistentry>
	</variablelist>
	
      </para>
      
    </sect1>

    <!-- Quantization, smoothing, and display of quantized notes -->

    <sect1 id="nv-quantization">
      <title>Notation from performance data</title>

      <para>
	&rosegarden; is a multi-purpose program: it is a notation
	editor, but it is primarily a sequencer and editor for
	performed music.  And in performance, of course, the times
	and durations of notes are rarely as precise as they are on
	a printed score.
      </para>

      <para>
	This means that it's often desirable for &rosegarden; to do
	a lot of tidying of the basic note times and durations when
	attempting to make meaningful notes to show in the notation
	editor.  This is a kind of quantization, but a kind that
	requires a surprising amount of guesswork to do well.
	&rosegarden; includes a quantizer designed to do a slightly
	better job of this than the plain grid quantizer.
      </para>

      <para>Applying
	quantization strictly for notation is rather unimaginatively
	referred to as <quote>notation quantization</quote>: it only
	applies to the notes you see and edit in notation, and
	doesn't affect the notes that play, or that you edit in
	other views such as the matrix.  This quantization is
	automatically applied to music imported or recorded from
	MIDI, although not all of its possible capabilities are
	enabled by default.
      </para>

      <para>
	There are two ways to see which notes have been quantized
	for notation.  By default, each notation view contains a Raw
	Note Ruler (in the group of rulers above the score) showing
	a rectangular block for each note.  This block is positioned
	so as to represent the time and duration of the note as
	performed, but with the top and bottom edges of the
	rectangle extended or shortened to represent the time after
	notation quantization.  If this is too much information for
	you, you can alternatively choose (in the configuration
	dialog) to show in a green colour all note heads in the
	score that have had their timings altered by notation
	quantization.
      </para>

      <para>

	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-notationquantizer.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s notation quantize dialog</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
	If the quantization &rosegarden; has used is not suitable,
	either for the entire score or for a selection of notes, you
	can choose to use a different level of quantization or none
	at all.  To apply a different quantization to some notes,
	select the notes and use the Quantize...
	menu function (tick the box labelled <quote>Quantize for
	  notation only</quote>).  The quantization level or type used
	by default can be changed in the configuration dialog.
      </para>

      <sect2 id="nv-quantization-parameters">
	<title>Configurable parameters for the heuristic notation quantizer</title>

	<sect3 id="nv-quantization-parameters-during">
	  <title>Parameters for quantization itself</title>
	  
	  <variablelist>

	    <varlistentry>
	      <term>Complexity</term>
	      <listitem>
		<para>The "complexity" of a notation quantizer is its
		  most fundamental parameter.  A "complex" quantizer
		  will be more prepared to accept that complex-looking
		  music is in fact intended to be complex, whereas a
		  "simple" quantizer is more likely to assume that
		  complex-looking music results from an imprecise
		  performance of simple music.
		</para>
		<para>The default setting is intended to produce
		  reasonable results for a fairly wide range of music.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>Base grid unit</term>
	      <listitem>
		<para>The base grid unit (set to a note duration
		  value) specifies the absolute minimum unit of note
		  that will be permitted to remain in the score after
		  quantization.  For example, if set to a semiquaver,
		  all notes will be placed on boundaries of a multiple
		  of a semiquaver, with durations also a multiple of a
		  semiquaver.
		</para>
		<para>The setting of the base grid unit is not quite
		  as significant for a notation quantizer as it is for a
		  plain grid quantizer, because all it does is impose an
		  absolute limit on the level of precision permitted by
		  the complexity parameter.  Mostly, when you find a
		  case in which increasing the grid unit produces better
		  results, you've actually found a case in which the
		  quantizer simply didn't do as good a job as it should
		  have been able to with the smaller unit.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>Tuplet level</term>
	      <listitem>
		<para>The notation quantizer is capable of identifying
		  tuplets (triplets and other time-squashed groups),
		  within reasonable limits.  This parameter controls how
		  ambitious it will attempt to be when looking for
		  tuplets, by setting a limit on how many notes per
		  tuplet group it will attempt to identify.  If it is
		  set to <quote>None</quote>, the quantizer will not
		  attempt to identify tuplets at all.
		</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>

	</sect3>

	<sect3 id="nv-quantization-parameters-after">
	  <title>Parameters that control tidying up after quantization</title>

	  <variablelist>

	    <varlistentry>
	      <term>Tie notes at barlines etc</term>
	      <listitem>
		<para>Causes any notes that are still found after
		  quantization to overlap barlines or to have
		  durations not exactly expressible with single note
		  heads to be split into multiple notes appropriately,
		  and tied.  This has the same effect as applying the
		  <!-- !!! link --> "Tie Notes at Barlines" function
		  in the notation view.
		</para>
		<para>
		  This parameter is not set by default because it
		  changes the number of note events, which is
		  undesirable when using &rosegarden; partly or
		  principally as a MIDI sequencer.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>Split-and-tie overlapping chords</term>
	      <listitem>
		<para>
		  Causes overlapping notes to be split and tied, so
		  as to make strict chords with individual noteheads
		  tied as necessary.  This has the same effect as
		  applying the <!-- !!! link --> "Split-and-Tie
		  Overlapping Chords" function in the notation view.
		</para>
		<para>
		  This parameter is not set by default partly because
		  it changes the number of note events, which is
		  undesirable when using &rosegarden; partly or
		  principally as a MIDI sequencer.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>Re-beam</term>
	      <listitem>
		<para>
		  Causes the notes to be re-beamed into groups
		  appropriately after quantization.  This is usually
		  desirable.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>Add articulations (staccato, tenuto,
		slurs)</term>
	      <listitem>
		<para>
		  Causes the quantizer to attempt to identify, based
		  on the durations of individual and consecutive
		  notes, which notes should be notated with staccato
		  marks (for notes that fall significantly short of
		  the following note, but not apparently short
		  enough to merit a rest), tenuto (for notes that
		  almost or just overlap the following note) and
		  slurs (for series of notes that meet or overlap).
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect3>
      </sect2>
    </sect1>


    <sect1 id="nv-note-styles">
      <title>Note styles</title>

      <para>
	&rosegarden; also allows you to change various aspects of the
	way the various types of notes are drawn, such as the choice
	of note heads, the number of tails, whether notes are filled
	or unfilled and so on.
      </para>

      <para>
	A set of standard styles (Classical, Cross, Triangle and
	Mensural) is provided, and you can change the style used for
	individual notes by selecting them and then using the Note
	Style menu options.  Each note remembers which
	style has been chosen for it, and this information is saved
	as part of the composition.  You can also change the default
	style for new notes using the 
	<guimenuitem>Configure Rosegarden...</guimenuitem> option in the 
	<guimenu>Settings</guimenu> menu.
      </para>

      <para>
	It is also possible to create your own note styles by
	describing them in <acronym>XML</acronym> files.  (Even the
	standard styles are defined this way: the only reason the
	editor knows that a Classical semiquaver has a tilted oval
	filled head, a stem, two flags, etc., is that the description
	in Classical.xml says so.)  See <link
	linkend="developers-note-styles">Customising Rosegarden</link>
	for more information.
      </para>
    </sect1>

    <sect1 id="nv-note-fonts">
      <title>Note fonts</title>
      <para>
	&rosegarden; is supplied with a single scalable notation
	font, the Feta font developed by the Lilypond project.  Feta
	is an extremely high quality font that should be suitable
	for nearly all classical work.
      </para>

      <para>&rosegarden; also includes support as standard for a
	number of other notation fonts.  You will need to provide the
	fonts themselves in TrueType (.ttf) or PostScript Type-1
	(.pfb, .pfa) format, and you will need the relevant
	permissions to install them to the same place as &rosegarden;
	was installed.  To install a supported notation font, locate
	the share directory for the &rosegarden; installation (usually
	a subdirectory of the KDE desktop installation tree, such as
	/opt/kde/share/apps/rosegarden).  You will find that this
	directory has a subdirectory called "fonts": copy the font
	files into there, and restart &rosegarden;.  If your font is
	supported, it should now appear on the font menu in the
	notation editor.</para>

      <para>Complete or partial support is currently provided for
	the following fonts: Fughetta, by Blake Hodgetts; Petrucci,
	the "original" Finale font; Maestro, the "new" Finale font;
	Opus, the Sibelius font; Inkpen, the Sibelius jazz font;
	Sonata from Adobe; Steinberg, from the Cubase sequencer; and
	Xinfonia.  (Most of the above font names are registered
	trademarks of the respective companies.)  THE ROSEGARDEN TEAM
	MAKES NO REPRESENTATION AS TO THE LEGAL STATUS OF ANY USE OF
	THESE FONTS WITH ROSEGARDEN.  It is your responsibility to
	ensure you are in compliance with the licence (if any) under
	which a font was provided to you, before attempting to use it.
	If you are not sure whether you have the right to use a font,
	don't: apart from anything else, the standard Feta font is
	better than most of these anyway.</para>

      <para>It is also possible to provide new mapping files so as
	to use new fonts.  For some fonts that have similar mappings
	or metrics to fonts in the above list, this may be as simple
	as editing the name of the font in the mapping file.  See
	<link linkend="developers-note-fonts">Customising Rosegarden</link>
	for more information.

      </para>
    </sect1>


  </chapter>

  <chapter id="event-view">
    <title>The Event List editor</title>
    <sect1 id="ev-introduction">
      <title>Introduction</title>

      <para>

	The &rosegarden; Event List editor shows the events in a
	single segment in a raw form, and enables you to edit the
	precise properties of those events individually.

	<screenshot>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="rg-eventlisteditor.png" format="PNG"/>
      </imageobject>
	<textobject>
	  <phrase>&rosegarden;'s event list editor</phrase>
	</textobject>
      </mediaobject>
      </screenshot>
      </para>
    </sect1>
  </chapter>




  <!--
  **********************************
  
  PART II:
  Command reference

  **********************************
  -->
<!-- NO

  <chapter id="commands">
    <title>Command Reference</title>


    <para></para>

    <sect1 id="commands-main">
      <title>Main window</title>
      <para></para>


      <sect2>
	<title>File menu</title>
	<para>
	  <variablelist>

	    <varlistentry id="commands-main-file-new">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>n</keycap></keycombo>
		  </shortcut>
		  <guimenu>File</guimenu>
		  <guimenuitem>New</guimenuitem>
		</menuchoice></term>
	      <listitem><para><action>Creates a new composition.</action></para></listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-open">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>o</keycap></keycombo>
		  </shortcut>
		  <guimenu>File</guimenu>
		  <guimenuitem>Open</guimenuitem>
		</menuchoice></term>
	      <listitem><para><action>Opens an existing composition from a Rosegarden-4 (.rg) file.</action></para></listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-import">
	      <term><menuchoice>
		  <guimenu>File</guimenu>
		  <guimenuitem>Import</guimenuitem>
		</menuchoice></term>
	      <listitem><para>This submenu contains functions for importing compositions from other file formats.</para>

		<variablelist>

		  <varlistentry id="commands-main-file-import-midi">
		    <term><menuchoice>
			<guimenu>Import</guimenu>
			<guimenuitem>Import &MIDI; file...</guimenuitem>
		    </menuchoice></term>
		    <listitem><para><action>Creates a new composition from the contents of an existing &MIDI; (.mid) file.</action></para></listitem>
		  </varlistentry>

		  <varlistentry id="commands-main-file-import-rg21">
		    <term><menuchoice>
			<guimenu>Import</guimenu>
			<guimenuitem>Import Rosegarden 2.1 file...</guimenuitem>
		      </menuchoice></term>
		    <listitem><para><action>Creates a new composition from the contents of an existing Rosegarden 2.1 (.rose) file.</action></para></listitem>
		  </varlistentry>

		</variablelist>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-merge">
	      <term><menuchoice>
		  <guimenu>File</guimenu>
		  <guimenuitem>Merge</guimenuitem>
		</menuchoice></term>
	      <listitem><para>This submenu contains functions for merging other files into the current composition.</para>

		<variablelist>

		  <varlistentry id="commands-main-file-merge-file">
		    <term><menuchoice>
			<guimenu>Merge</guimenu>
			<guimenuitem>Merge File...</guimenuitem>
		      </menuchoice></term>
		    <listitem><para><action>Merges the contents of an existing Rosegarden (.rg) file into the current composition.  You will be offered a choice of whether to merge the file in new tracks at the start of the composition, or after the end of the current composition.</action></para></listitem>
		  </varlistentry>

		  <varlistentry id="commands-main-file-merge-midi">
		    <term><menuchoice>
			<guimenu>Merge</guimenu>
			<guimenuitem>Merge &MIDI; file...</guimenuitem>
		    </menuchoice></term>
		    <listitem><para><action>Merges the contents of an existing &MIDI; (.mid) file into the current composition.  You will be offered a choice of whether to merge the file in new tracks at the start of the composition, or after the end of the current composition.</action></para></listitem>
		  </varlistentry>

		  <varlistentry id="commands-main-file-merge-rg21">
		    <term><menuchoice>
			<guimenu>Merge</guimenu>
			<guimenuitem>Merge Rosegarden 2.1 file...</guimenuitem>
		      </menuchoice></term>
		    <listitem><para><action>Merges the contents of an existing Rosegarden 2.1 (.rose) file into the current composition.  You will be offered a choice of whether to merge the file in new tracks at the start of the composition, or after the end of the current composition.</action></para></listitem>
		  </varlistentry>

		</variablelist>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-export">
	      <term><menuchoice>
		  <guimenu>File</guimenu>
		  <guimenuitem>Export</guimenuitem>
		</menuchoice></term>
	      <listitem><para>This submenu contains functions for exporting the contents of compositions to other file formats.</para>

		<variablelist>

		  <varlistentry id="commands-main-file-export-midi">
		    <term><menuchoice>
			<guimenu>Export</guimenu>
			<guimenuitem>Export &MIDI; file...</guimenuitem>
		    </menuchoice></term>
		    <listitem><para><action>Saves the contents of the current composition into a new &MIDI; file.</action>  Note that not all data in the Rosegarden composition necessarily can or will be saved in the &MIDI; format.</para></listitem>
		  </varlistentry>

		  <varlistentry id="commands-main-file-export-csound">
		    <term><menuchoice>
			<guimenu>Export</guimenu>
			<guimenuitem>Export Csound score file...</guimenuitem>
		      </menuchoice></term>
		    <listitem><para><action>Saves the contents of the current composition into a new Csound score file.</action>  Together with a suitable orchestra file (not supplied), this can be used to play the composition through <ulink url="http://www.csounds.com/">Csound</ulink>. Note that not all data in the Rosegarden composition necessarily can or will be saved in the Csound format.</para></listitem>
		  </varlistentry>

		  <varlistentry id="commands-main-file-export-lilypond">
		    <term><menuchoice>
			<guimenu>Export</guimenu>
			<guimenuitem>Export Lilypond file...</guimenuitem>
		      </menuchoice></term>
		    <listitem><para><action>Saves the contents of the current composition into a new Lilypond file.</action>  This can then be processed by the <ulink url="http://www.lilypond.org/">Lilypond</ulink> system to produce typeset-quality music, although it is likely that the file may need some tweaking to get really good quality output.  Note that not all data in the Rosegarden composition necessarily can or will be saved in the Lilypond format.</para></listitem>
		  </varlistentry>

		  <varlistentry id="commands-main-file-export-mup">
		    <term><menuchoice>
			<guimenu>Export</guimenu>
			<guimenuitem>Export Mup file...</guimenuitem>
		      </menuchoice></term>
		    <listitem><para><action>Saves the contents of the current composition into a new Mup file.</action>  This can then be processed by the <ulink url="http://www.arkkra.com/">Mup</ulink> music publication system, although it is likely that the file may need some tweaking to get really good quality output.  Note that not all data in the Rosegarden composition necessarily can or will be saved in the Mup format.</para></listitem>
		  </varlistentry>

		  <varlistentry id="commands-main-file-export-musicxml">
		    <term><menuchoice>
			<guimenu>Export</guimenu>
			<guimenuitem>Export MusicXML file...</guimenuitem>
		      </menuchoice></term>
		    <listitem><para><action>Saves the contents of the current composition into a new MusicXML file.</action>  This can then be used with any music software that supports the MusicXML format.  Note that MusicXML support is experimental and has not been well tested.  Not all data in the Rosegarden composition necessarily can or will be saved in the MusicXML format.</para></listitem>
		  </varlistentry>

		</variablelist>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-save">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>s</keycap></keycombo>
		  </shortcut>
		  <guimenu>File</guimenu>
		  <guimenuitem>Save</guimenuitem>
		</menuchoice></term>
	      <listitem><para><action>Saves the composition.</action></para></listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-save-as">
	      <term><menuchoice>
		  <guimenu>File</guimenu>
		  <guimenuitem>Save As...</guimenuitem>
		</menuchoice></term>
	      <listitem><para><action>Saves the composition with a new filename.</action></para></listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-close">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>w</keycap></keycombo>
		  </shortcut>
		  <guimenu>File</guimenu>
		  <guimenuitem>Close</guimenuitem>
		</menuchoice></term>
	      <listitem><para><action>Closes the current composition.</action></para></listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-print">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>p</keycap></keycombo>
		  </shortcut>
		  <guimenu>File</guimenu>
		  <guimenuitem>Print</guimenuitem>
		</menuchoice></term>
	      <listitem><para><action>Prints the current composition.</action> At the time of writing, the print function is incomplete.  We recommend using the <link linkend="commands-main-file-export-lilypond">Export Lilypond file</link> function and printing with Lilypond instead.</para></listitem>
	    </varlistentry>

	    <varlistentry id="commands-main-file-quit">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>q</keycap></keycombo>
		  </shortcut>
		  <guimenu>File</guimenu>
		  <guimenuitem>Quit</guimenuitem>
		</menuchoice></term>
	      <listitem><para><action>Quits &rosegarden;</action></para></listitem>
	    </varlistentry>

	  </variablelist>
	</para>

      </sect2>


      <sect2>
	<title>Edit menu</title>
	<para>
	  <variablelist>

	    <varlistentry id="commands-main-edit-undo">
	      <term>
		<menuchoice>
		  <shortcut>
		    <keycombo>
		      <keycap>Ctrl</keycap>
		      <keycap>z</keycap>
		    </keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Undo</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Reverses the last command performed.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-edit-redo">
	      <term>
		<menuchoice>
		  <shortcut>
		    <keycombo>
		      <keycap>Ctrl</keycap>
		      <keycap>Shift</keycap>
		      <keycap>z</keycap>
		    </keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Redo</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Repeats the last command performed, following an undo.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-edit-cut">
	      <term>
		<menuchoice>
		  <shortcut>
		    <keycombo>
		      <keycap>Ctrl</keycap>
		      <keycap>x</keycap>
		    </keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Cut</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Removes the currently selected segment from the
		    composition view and adds it to the clipboard.  Note that
		    when you have selected a track, all segments in that track
		    are selected.  
		  </action>
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-edit-copy">
	      <term>
		<menuchoice>
		  <shortcut>
		    <keycombo>
		      <keycap>Ctrl</keycap>
		      <keycap>c</keycap>
		    </keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Copy</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Removes the selected segments from the composition and
		    places them in the clipboard to replace any contents the
		    clipboard previously had.
		  </action> 
		  Note that when you have selected a track, all segments in that track
		  are selected.
		</para>
	      </listitem>
	    </varlistentry>  


	    <varlistentry id="commands-main-edit-paste">
	      <term>
		<menuchoice>
		  <shortcut>
		    <keycombo>
		      <keycap>Ctrl</keycap>
		      <keycap>v</keycap>
		    </keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Paste</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Inserts the contents of the clipboard into the composition.
		    Verbage hear stating where the contents are inserted
		    (current track, offset within that track etc).
		  </action>
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-edit-delete">
	      <term>
		<menuchoice>
		  <shortcut>
		    <keycombo>
		      <keycap>Delete</keycap>
		    </keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Delete</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Removes the selected segments from the composition and throws them away.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>  


	    <varlistentry id="commands-main-edit-select-all-segments">
	      <term>
		<menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Select All Segments</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Selects all segments within the composition.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-edit-add-tempo-change">
	      <term>
		<menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Add Tempo Change...</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Invokes a tempo change dialog.
		  </action>
		  This offers a
		  selection of ways to change the tempo of the
		  composition, including changing the tempo from the
		  insert cursor position onwards, from the last
		  tempo change onwards, or for the entire
		  composition.  See 

for more information.

		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-edit-add-time-signature">
	      <term>
		<menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Add Time Signature Change...</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Invokes a time-signature change dialog.
		  </action>

		  This offers a
		  selection of ways to change the tempo of the
		  composition, including changing the time signature
		  from the insert cursor position onwards or from the
		  start of the current bar.  See 

		  for more information.

		</para>
	      </listitem>
	    </varlistentry>  


	    <varlistentry id="commands-main-edit-change-composition-duration">
	      <term>
		<menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Change Composition Duration...</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Invokes a composition duration change dialog.
		  </action>

		  This allows you to change the overall duration of
		  the composition.  This duration sets a hard limit
		  (as a number of bars) on the scrollable width of the
		  main window and the length of time you can play or
		  record before the composition is deemed to have
		  ended.  The default is 100 bars.

		</para>
	      </listitem>
	    </varlistentry>  


	    <varlistentry id="commands-main-edit-document-properties">
	      <term>
		<menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Edit Document Properties...</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Invokes a document properties dialog.
		  </action>

		  The document properties dialog allows you to review and/or modify the current document properties. Note - explain what are properties. Note to developers - It seems kinda weird to have icons on the left for selecting, and tabs in each one.  Why not just tabs or just the things on the left?

		</para>
	      </listitem>
	    </varlistentry>  


	  </variablelist>
	</para>
      </sect2>

      <sect2>
	<title>Segments menu</title>
	<para>
	  <variablelist>
	    
	    <varlistentry id="commands-main-segments-open-default-editor">
	      <term>
		<menuchoice>
		  <shortcut>
		    <keycombo>
		      <keycap>Return</keycap>
		    </keycombo>
		  </shortcut>
		  <guimenu>Segments</guimenu>
		  <guimenuitem>Open in Default Editor</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action> Opens all of the currently
		    selected segments together in a notation editor, or in
		    whichever other editor you have configured as your
		    default. 
		  </action>
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-segments-open-matrix-editor">
	      <term>
		<menuchoice>
		  <guimenu>Segments</guimenu>
		  <guimenuitem>Open in Matrix Editor</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action> Opens all of the currently
		    selected segments in a matrix editor.
		  </action>
		  See <link linkend="matrix-view">matrix editor</link>.
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-segments-open-notation-editor">
	      <term>
		<menuchoice>
		  <guimenu>Segments</guimenu>
		  <guimenuitem>Open in Notation Editor</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action> Opens all of the currently
		    selected segments together in a notation editor.
		  </action>
		  See <link linkend="notation-view">notation editor</link>.
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-segments-open-event-editor">
	      <term>
		<menuchoice>
		  <guimenu>Segments</guimenu>
		  <guimenuitem>Open in Event List Editor</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action> Opens all of the currently
		    selected segments together in a event-list editor.
		  </action>
		  See <link linkend="event-view">event-list editor</link>.
		</para>
	      </listitem>
	    </varlistentry>  


	    <varlistentry id="commands-main-segments-quantize">
	      <term>
		<menuchoice>
		  <guimenu>Segments</guimenu>
		  <guimenuitem>Quantize...</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>Invokes a quantization dialog for quantizing the current selection.
		  </action>
		  See <link linkend="nv-quantization">quantization</link>.
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-segments-rescale">
	      <term>
		<menuchoice>
		  <guimenu>Segments</guimenu>
		  <guimenuitem>Rescale...</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>Allows you to stretch or squash segments in time.
		  </action>

		  This option invokes a rescale dialog, which allows
		  you to specify a ratio of timings that is then
		  applied to the selected segments.  This has the
		  result of stretching (slowing down) or squashing
		  (speeding up) the selected segments, changing their
		  durations accordingly.

		</para>
		<para>
		  This only applies to segments containing MIDI
		  events, not to audio segments. Rosegarden does not
		  currently provide native support for audio
		  time-stretching.
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-segments-auto-split">
	      <term>
		<menuchoice>
		  <guimenu>Segments</guimenu>
		  <guimenuitem>Auto-Split</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>
		    Splits the selected segments on silences.
		  </action>

		  This function works slightly differently depending
		  on whether the selected segments contain audio or
		  MIDI data.  For audio segments, it offers you a
		  dialog in which you can choose a threshold below
		  which the segment is considered "silent"; it then
		  splits the segment whenever its amplitude falls
		  below this threshold.  For MIDI segments, it simply
		  splits the segment everywhere that a full bar of
		  silence occurs.
		</para>
	      </listitem>
	    </varlistentry>  

	    <varlistentry id="commands-main-segments-split-by-pitch">
	      <term>
		<menuchoice>
		  <guimenu>Segments</guimenu>
		  <guimenuitem>Split by Pitch...</guimenuitem>
		</menuchoice>
	      </term>
	      <listitem>
		<para>
		  <action>Splits the currently selected segments into higher and
		    lower parts.
		  </action>

		  This function invokes a dialog allowing you to
		  choose a pitch as a "split point", and then splits
		  the selected segments in half with all the notes on
		  or above that split point in the "higher" segment
		  and all the notes below it in the "lower".

		</para>
		<para>
		  If the music in the segment consists of two separate
		  parts (e.g. left and right hand piano parts) that
		  are not always completely on either side of a single
		  split point, you may with to select the "ranging
		  split-point" option.  If this is selected,
		  Rosegarden will attempt to track the two parts as
		  they move up and down, usually doing a slightly
		  better job of separating out notes that were
		  intended to lie in the two separate parts.

		</para>
		<para>
		  The resulting segments are both created on the same
		  track, with one overlapping the other.
		  
		</para>
	      </listitem>
	    </varlistentry>  




	  </variablelist>
	</para>
      </sect2>
    </sect1>
    
    <sect1 id="commands-nv">
      <title>Notation editor</title>
      <para></para>


      <sect2 id="commands-nv-menu-file">
	<title>File menu</title>
	<para>
	  <variablelist>

	    <varlistentry id="commands-nv-menu-file-close">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>w</keycap></keycombo>
		  </shortcut>
		  <guimenu>File</guimenu>
		  <guimenuitem>Close</guimenuitem>
		</menuchoice></term>
	      <listitem><para><action>Closes the window</action></para></listitem>
	    </varlistentry>

	  </variablelist>
	</para>

      </sect2>

      <sect2 id="commands-nv-menu-edit">
	<title>Edit menu</title>
	<para>
	  <variablelist>

	    <varlistentry id="commands-nv-menu-edit-undo">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>z</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Undo</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>

		    Reverses the last edit.

		  </action> Edits are shared across
		  all views, so if the last edit was not made in
		  this view, undoing it might not appear to change
		  this view either.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-edit-redo">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>z</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Redo</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>

		    Repeats the last edit, following an undo.

		  </action>
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-edit-cut">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>x</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Cut</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>

		    Removes the selected events from the composition
		    and places them in the clipboard to replace any
		    contents the clipboard previously had.

		  </action>
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-edit-copy">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>c</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Copy</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    
		    Copies the selected events to the clipboard
		    to replace any contents the clipboard previously had.

		  </action>
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-edit-paste">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>v</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Paste</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    
		    Copies the contents of the clipboard to the
		    location of the insert cursor in the current
		    composition.

		  </action>

		  The clipboard must not contain
		  multiple segments, and there must be enough
		  space (occupied only by rests) starting at
		  the insert cursor position to accommodate the
		  clipboard's contents.

		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-edit-cut-and-close">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>x</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Cut and Close</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    
		    Removes the selected events from the composition
		    and places them in the clipboard to replace any
		    contents the clipboard previously had, and closes
		    the gap left behind by moving all subsequent
		    events towards the beginning of the composition.

		  </action>
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-edit-paste-dot-dot-dot">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>v</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Paste...</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    
		    Provides a choice of paste mechanisms with the
		    ability to set one as the default for use in the
		    Paste menu function.

		  </action>

		  See the section on <link linkend="nv-paste-types">Paste types</link> for more information.

		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-delete">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Del</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Delete</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Removes the selected events from the composition
		    and throws them away.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-select-from-start">
	      <term><menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Select from Start</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Extends the current selection by selecting
		    all events from the start of the staff up to the
		    current selection (or up to the insert cursor,
		    if no events are currently selected).
		  </action>
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-select-to-end">
	      <term><menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Select to End</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Extends the current selection by selecting
		    all events from the end of the current selection
		    (or from the insert cursor, if no events are
		    currently selected) up to the end of the staff.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-select-whole-staff">
	      <term><menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Select Whole Staff</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Selects all the events on the current staff.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-clear-selection">
	      <term><menuchoice>
		  <shortcut>
		    <keycombo><keycap>Esc</keycap></keycombo>
		  </shortcut>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Clear Selection</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Unselects all events.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>

	    
	    <varlistentry id="commands-nv-menu-edit-filter-selection">
	      <term><menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Filter Selection</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Invokes an event filter dialog.
		  </action>
		  This offers you the ability to filter a range of events in
		  any of several categories out of your selection.
	        </para>
		<para>
		  <screenshot>
		    <mediaobject>
		      <imageobject>
			<imagedata fileref="rg-eventfilter.png" format="PNG"/>
		</imageobject>
		  <textobject>
		    <phrase>The event filter dialog</phrase>
		  </textobject>
		</mediaobject>
		</screenshot>
	        </para>
		<para>
		  All ranges may be either inclusive or exclusive.
		</para>
	        <para>
		  An inclusive range will remove events on either side of it
		  from the selection.  You can use this, for example, to
		  filter everything below middle C and above the A above
		  middle C out of your selection.
		</para>
	        <para>
		  An exclusive range will remove the events within the range
		  itself, leaving everything on either side of it selected.
		  Using the same search points as in the previous example,
		  you would use an exclusive range to remove everything
		  between middle C and the A above middle C from your
		  selection, while leaving everything above and below that
		  range selected.
		</para>
		<para>
		  Once your selection has been filtered, you can manipulate
		  it by any conventional means.
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-add-tempo">
	      <term><menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Add Tempo Change...</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Invokes a tempo change dialog.
		  </action>
		  This offers a
		  selection of ways to change the tempo of the
		  composition, including changing the tempo from the
		  insert cursor position onwards, from the last
		  tempo change onwards, or for the entire
		  composition.  See 

for more information.
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-add-time-signature">
	      <term><menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Add Time Signature Change...</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>

		    Invokes a time-signature change dialog.

		  </action>

		  This offers a
		  selection of ways to change the tempo ofthe
		  composition, including changing the time signature
		  from the insert cursor position onwards or from the
		  start of the current bar.  See 
Changing the Time Signature

		  for more information.

		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-add-clef">
	      <term><menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Add Clef Change...</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>

		    Invokes a clef selection dialog, and inserts the
		    chosen clef at the current insert cursor position.

		  </action>

		  The dialog allows you to choose a clef, but also
		  to choose how you want the clef to be applied, in
		  cases where there are already some notes following
		  the point where the clef is to be inserted.  You
		  must choose one of the following:

		  <variablelist>

		    <varlistentry>
		      <term>Maintain current pitches</term>
		      <listitem>
			<para>
			  Any notes following the clef will keep
			  their current performance pitches.
			</para>
			<para>
			  For example, inserting a
			  tenor clef in the middle of a previously
			  treble-clef section will cause the notes following
			  the clef to be moved an octave
			  higher up the staff, because they will still have
			  their treble-clef pitches.
			</para>
		      </listitem>
		    </varlistentry>

		    <varlistentry>
		      <term>Transpose into appropriate octave</term>
		      <listitem>
			<para>
			  Any notes following the clef will
			  retain their pitch within the octave, but
			  may be moved into a different octave to
			  match the new clef, and therefore will play
			  at a new pitch.
			</para>
			<para>
			  For example, inserting a tenor clef in the
			  middle of a previously treble-clef section
			  will cause the notes following the clef to
			  move by one staff line only to adjust to the new
			  clef, but to play an octave lower than before.
			</para>
		      </listitem>
		    </varlistentry>

		  </variablelist>

		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-edit-add-key-signature">
	      <term><menuchoice>
		  <guimenu>Edit</guimenu>
		  <guimenuitem>Add Key Change...</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    
		  </action>
		</para>
	      </listitem>
	    </varlistentry>


	  </variablelist>
	</para>

      </sect2>

      <sect2 id="commands-nv-menu-group">
	<title>Group menu</title>
	<para>
	  <variablelist>


	    <varlistentry id="commands-nv-menu-group-beam">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Beam Group</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Makes the selected notes into a beamed group.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-group-auto-beam">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Auto-Beam</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Scans the area covered by the selection and attempts
		    to group short notes into plausible beamed groups.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-group-break-group">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Unbeam</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Removes the selected notes from any beamed groups
		    they may be part of, leaving them as separate
		    individuals.
		  </action>
		  If part of a beamed group is selected, the unselected
		  part of the group will remain beamed.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-group-tuplet">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Tuplet</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Makes a triplet or other tuplet group.
		  </action>
		  This function allows you to adjust the timing of a
		  short section of music in the ratio of two
		  durations, for example to indicate that three notes
		  should be played in the time of two (the classic
		  triplet), or nine in the time of six, or whatever.
		  You can set this ratio in a dialog box when you
		  invoke the function.
		</para>
		<para>
		  If you have selected some events before invoking the
		  function, it will assume that you want to make a
		  tuplet group out of the selected region (or as close
		  to its duration as possible) and will adjust the
		  default values available in the dialog accordingly.
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-group-simple-tuplet">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Simple Tuplet</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>

		    Makes a tuplet group (normally of triplets) with
		    the most apparently obvious ratio of durations.

		  </action>
		  Usually this function will attempt to make a triplet
		  group starting at the current insert cursor, or if
		  some events are selected, will attempt to make them
		  into triplets.  It is possible that it might end up
		  making non-triplet groups if there is no obvious
		  valid triplet arrangement.
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-group-grace">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Make Grace Notes</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Converts the selected notes into grace notes.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>



	    <varlistentry id="commands-nv-menu-group-ungrace">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Ungrace</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Converts any grace notes in the selection to
		    normal notes.
		  </action>
		</para>
	      </listitem>
	    </varlistentry>



	    <varlistentry id="commands-nv-menu-group-slur">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Slur</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Adds a slur across the selected notes.
		  </action>
		  To remove the slur, click on it
		  with the erase tool just as you would for a note.
		</para>
	      </listitem>
	    </varlistentry>



	    <varlistentry id="commands-nv-menu-group-crescendo">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Crescendo</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Adds a crescendo (opening hairpin) indication
		    across the selected notes.
		  </action>
		  To remove the crescendo indication, click on it
		  with the erase tool just as you would for a note.
		</para>
	      </listitem>
	    </varlistentry>



	    <varlistentry id="commands-nv-menu-group-decrescendo">
	      <term><menuchoice>
		  <guimenu>Group</guimenu>
		  <guimenuitem>Decrescendo</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Adds a decrescendo (closing hairpin) indication
		    across the selected notes.
		  </action>
		  To remove the decrescendo indication, click on it
		  with the erase tool just as you would for a note.
		</para>
	      </listitem>
	    </varlistentry>


	  </variablelist>
	</para>

      </sect2>

      <sect2 id="commands-nv-menu-notes">
	<title>Notes menu</title>
	<para>
	  <variablelist>

	    <varlistentry id="commands-nv-menu-notes-">
	      <term><menuchoice>
		  <guimenu>Notes</guimenu>
		  <guimenuitem></guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>

		  </action>
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-notes-style-actionmenu">
	      <term><menuchoice>
		  <guimenu>Notes</guimenu>
		  <guimenuitem>Note Style</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Change the note style of the selected notes.
		  </action>
		  This submenu contains an entry for each of the <link
		    linkend="nv-note-styles">note
		    styles</link> that are currently available.  Choosing one
		  will change the note style of the selected notes to
		  that style.
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-notes-stems">
	      <term><menuchoice>
		  <guimenu>Notes</guimenu>
		  <guimenuitem>Stem Direction</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Change the stem
		    direction of the selected notes.
		  </action>
		  This submenu allows you to specify that all the
		  <link linkend="nv-note-qualities">stems</link> of
		  the selected notes should point up or down, plus an
		  entry to reset the stem directions to those that
		  Rosegarden originally chose for the notes.
		</para>
	      </listitem>
	    </varlistentry>


	    <varlistentry id="commands-nv-menu-notes-slashes">
	      <term><menuchoice>
		  <guimenu>Notes</guimenu>
		  <guimenuitem>Slashes</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>
		    Add diagonal
		    slashes across the selected notes' stems.
		  </action>
		  This submenu allows you to choose a number of
		  diagonal strokes or <link linkend="nv-note-qualities">slashes</link> to be drawn across the
		  stems of each of the selected notes.  These may be
		  used, for example, to indicate repetition or rolls
		  to a human reader.  They do not (yet) affect
		  performance using Rosegarden.
		</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	</para>

      </sect2>

      <sect2 id="commands-nv-menu-marks">
	<title>Marks menu</title>
	<para>
	  <variablelist>
	    <varlistentry>
	      <term><menuchoice>
		  <guimenu>blah</guimenu>
		  <guimenuitem>blah</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>to be continued</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</para>

      </sect2>

      <sect2 id="commands-nv-menu-transforms">
	<title>Transforms menu</title>
	<para>
	  <variablelist>

	    <varlistentry id="commands-nv-menu-transforms-normalize-rests">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Normalize Rests</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>Makes the rests in the selection
		    theoretically correct.</action>

		  This function examines each sequence of consecutive
		  rests found in the selection, and adjusts, splits
		  and merges rests as necessary to ensure that the
		  rests have theoretically correct durations and fall
		  on the correct boundaries.
		</para>

		<para>For example, a 4/4 bar containing a crotchet
		  (quarter-note), then a minim (half-note) rest and a
		  crotchet rest will be rearranged to place the crotchet
		  rest first, as the minim rest should not cross the
		  central beat boundary of the bar.
		</para>

		<para>This function is also useful in occasional
		  situations where Rosegarden has made a bad job of
		  maintaining the rests correctly within a bar, for
		  example when editing imported &MIDI; data.  Normalizing
		  the rests will usually make the arrangement of notes
		  in such a situation a bit clearer.  (Rosegarden always
		  normalizes the rests as a matter of course when
		  importing or recording &MIDI;, but things can sometimes
		  get muddled up again.)</para>

	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-collapse-rests">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Collapse Rests</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>Makes multiple short rests into fewer longer
		    ones.</action>

		  This function merges consecutive rests into longer
		  rests, wherever possible.  That is, wherever two
		  consecutive rests in the selection are found to have
		  a total duration expressible as a single longer
		  rest, they will be merged.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-collapse-notes">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Collapse Equal-Pitch Notes</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para>
		  <action>Makes multiple short notes into fewer longer
		    ones.</action>

		  This function merges consecutive notes into longer
		  notes, wherever possible.  That is, wherever two
		  consecutive notes of equal pitch in the selection
		  are found to have a total duration expressible as a
		  single longer note, they will be merged.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-tie-notes">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Tie Equal-Pitch Notes</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Ties consecutive notes whenever possible.</action>

		  This function ties together any consecutive notes of
		  equal pitch found in the selection.  Tied notes are
		  shown with a curved line joining the note heads, and
		  are played as a single long note.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-untie-notes">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Untie Notes</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Breaks ties between notes.</action>

		  Any tied notes found in the selection are untied,
		  and will subsequently be played as separate
		  notes.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-make-viable">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Make Notes Viable</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Splits notes at displayable
		    durations.</action> This function is intended to deal
		  with notes that have excessively long durations that
		  overflow barlines or that are too long to be displayed
		  as a single note.  It takes any such notes and splits
		  them into shorter, tied notes.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-de-counterpoint">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>De-Counterpoint</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Turns counterpoint into a series of split-and-tied notes and chords.</action>

		  &rosegarden; has no explicit support for counterpoint
		  (multiple lines of notes edited separately on the
		  same staff), but it will do its best to approximate
		  it when it finds notes in a segment that are
		  apparently contrapuntal, i.e. that overlap but that
		  are not precise enough to be treated as chords.  For
		  example, when a short note starts shortly after a
		  longer note, Rosegarden will show the longer note
		  and a short <quote>spacing</quote> rest together, followed by the
		  shorter note.  Unfortunately this often isn't what
		  you want.
		</para>

		<para>The De-Counterpoint function can be applied to a
		  selection that contains overlapping notes.  It will
		  split overlapping notes at the point where they
		  overlap, and tie together the resulting split notes,
		  ensuring that the music takes the form of a series of
		  chords and/or single notes starting and ending in neat
		  blocks, with some notes possibly tied.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-quantize">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Quantize...</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Quantizes the selection.</action></para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-fix-smoothing">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Fix Smoothed Values</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Makes the note durations in the current
		    view permanent.</action>

		  When notating recorded or performance &MIDI;,
		  Rosegarden usually has to round off the durations of
		  some notes so that they can be displayed as normal
		  note types.  This is known as <link
		    linkend="nv-quantization">smoothing</link>, and it
		  normally does not affect the notes actually played,
		  it's just a convenience for display.  The Fix
		  Smoothed Values function takes the current smoothed
		  note durations and sets them such that they are used
		  for performance (and editing in the matrix view,
		  etc) as well as for notation.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-interpret">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Interpret...</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Modifies the velocities and timings of
		    notes according to any written or indicated dynamics
		    found.</action> The selection of interpretations
		  available is as follows:

		  <variablelist>
		    <varlistentry>
		      <term>Apply text dynamics (p, mf, ff etc)
		      </term>
		      <listitem><para> Sets a velocity to each note
			  based on the last piece of text of "Dynamic"
			  type seen on the same staff (only texts of the
			  form pp, p, mp, mf, f, ff, fff etc are matched).
			</para></listitem>
		    </varlistentry>

		    <varlistentry>
		      <term>Apply hairpin dynamics
		      </term>
		      <listitem><para> Makes the notes gradually
			  increase or decrease in velocity during a
			  crescendo or decrescendo hairpin.
			</para></listitem>
		    </varlistentry>

		    <varlistentry>
		      <term>
			Stress beats
		      </term>
		      <listitem><para> Makes notes that land on bar or
			  beat boundaries slightly louder (greater
			  velocity) than the surrounding notes.
			</para></listitem>
		    </varlistentry>
		    
		    <varlistentry>
		      <term>
			Articulate slurs, staccato, tenuto etc
		      </term>
		      <listitem><para> Shortens unslurred notes,
			  shortens staccato notes more, and gives notes
			  inside slurs and tenuto notes their full length.
			</para></listitem>
		    </varlistentry>
		  </variablelist>

		</para>

	      </listitem>
	    </varlistentry>

	    <varlistentry id="commands-nv-menu-transforms-transpose">
	      <term><menuchoice>
		  <guimenu>Transforms</guimenu>
		  <guimenuitem>Transpose</guimenuitem>
		</menuchoice></term>
	      <listitem>
		<para><action>Alters the pitch of the selected
		    notes.</action> This submenu contains basic
		  transposition functions which move the selected notes
		  up or down a semitone or a whole octave in pitch, as
		  well as a general transpose function that allows you
		  to choose how far up or down you want to transpose the
		  selection.
		</para>

		<para>These functions simply change the stored pitches
		  of the notes in the selection, so that they both play
		  and appear at the new pitches.  They do not deal with
		  performance transposition (displaying one pitch and
		  playing another), for which see the main window's
		  segment parameter box; nor do they help you with
		  transposing from one key into another, for which see
		  the <link
		    linkend="commands-nv-menu-edit-add-key-signature">key
		    change</link> function.
		</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	</para>

      </sect2>


    </sect1>
  </chapter>

-->


  <!--
  **********************************
  
  PART III:
  Technical material

  **********************************
  -->

  <chapter id="developers">
    <title>Customising Rosegarden</title>

    <sect1 id="developers-note-fonts">
      <title>Configuring custom notation fonts</title>

      <para>If you have a notation font installed on your system in a
	scalable format (TrueType or Type-1) but it is not currently
	supported by Rosegarden, you can create your own mapping XML
	file to describe the font's character map and metrics in a way
	Rosegarden can use.  These files are installed in the
	fonts/mappings subdirectory of the Rosegarden installation
	directory, and a number of samples are included with the
	distribution.</para>

      <para>You can also use these mapping files to define new
	pixmap-based fonts, in which every shape in a particular size is
	loaded from a separate pixmap file.  The two standard notation
	fonts supplied with Rosegarden-4 are pixmap fonts defined in
	exactly this way.
      </para>

      <para>It is even possible to define a notation font as using one
	or more scalable system fonts, augmented with pixmaps for
	particular sizes or for characters not found in the scalable
	fonts.  This is because most of the mapping file format is the
	same for scalable and pixmap fonts, and where there are
	different elements for the different sorts of fonts, it is
	usually possible to include both of them.  Rosegarden will
	usually use pixmaps where available and scalable fonts
	otherwise.
      </para>

      <para>You may also wish to edit the mapping files supplied with
	Rosegarden if you find their measurements for alignment or
	sizing are not to your liking.  (If you believe that any of the
	supplied files are actually wrong, please let us know.)
      </para>

      <sect2 id="developers-note-fonts-codes-glyphs">
        <title>Codes and Glyphs</title>

        <para></para>
      </sect2>

      <sect2 id="developers-note-fonts-mapping-format">
	<title>Notation font mapping XML format</title>

	<para>Here is a summary of the XML elements that may be used
	  in the font mapping file.</para>

	<sect3 id="developers-note-fonts-mapping-format-font-encoding">
	  <title>rosegarden-font-encoding</title>

	  <para>This element must exist in every mapping file, and
	    should contain all the other elements.  The only attribute
	    is "name", which contains the font's name as shown in the
	    font selection dropdown.  Although the file format will
	    permit any name to be used here, Rosegarden will only pick
	    up the font corectly if the XML file has the same name as
	    the contents of this attribute (except that the XML file
	    should be named in lower-case and should end in ".xml").
	  </para>
	</sect3>

	<sect3 id="developers-note-fonts-mapping-format-font-information">
	  <title>font-information</title>

	  <para>This should normally be the first child element of
	    "rosegarden-font-encoding".  It may have any of the
	    following attributes, all of which are optional:

	    <variablelist>
	      <varlistentry>
		<term>origin</term>
		<listitem>
		  <para>A textual description of the likely origin of
		    the mapped font (not the origin of the mapping
		    file).</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term>copyright</term>
		<listitem>
		  <para>A textual description of the likely copyright
		    status of the mapped font (not the copyright status
		    of the mapping file).  Note that because the mapping
		    file contains information such as origin and
		    copyright of the font itself, it is usually
		    advisable to make separate mapping files for
		    separate fonts where practical, even if the fonts
		    share other mapping data.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term>mapped-by</term>
		<listitem>
		  <para>The name of the creator of the mapping file
		    (i.e. you, presumably).</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term>type</term>
		<listitem>
		  <para>The type of the font.  This attribute should
		    contain one of the values "pixmap" or "scalable".
		    Fonts that are loaded into the windowing system and
		    are available to Rosegarden as standard system fonts
		    have type "scalable"; fonts that need to be loaded
		    from pixmap files corresponding to individual sizes
		    of pixmap (such as the feta and rg21 fonts included
		    with Rosegarden) have type "pixmap".</para>

		  <para>This information is only intended for the user
		    reference; it isn't actually used by Rosegarden.  It is
		    legitimate in practice for a font to be a mixture of the
		    two, but in general we will assume in this documentation
		    that a font is either scalable or pixmap.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term>smooth</term>
		<listitem>
		  <para>A boolean attribute indicating whether the
		    font is antialiased (smooth) or not.  Should have
		    the value "true" or "false".  If the font is smooth,
		    other display elements such as beams and slurs that
		    are not generated from the font will also be
		    antialiased.</para>
		</listitem>
	      </varlistentry>

	      <varlistentry>
		<term>autocrop</term>
		<listitem>
		  <para>Only relevant for scalable (system) fonts.
		    Rosegarden usually expects the metrics for a font to
		    contain the vertically smallest bounding boxes for
		    elements such as note heads and accents, rather than
		    including empty space above or below these elements
		    for alignment purposes.  Most fonts do not do what
		    Rosegarden expects.  Therefore for these fonts you
		    should set the autocrop attribute to "true"; then
		    Rosegarden will crop any unnecessary space from the
		    top and bottom of these elements when rendering
		    them.</para>
		</listitem>
	      </varlistentry>

	    </variablelist>

	  </para>
	</sect3>

	<sect3 id="developers-note-fonts-mapping-format-font-requirements">
	  <title>font-requirements</title>
	  <para>
	    This element is only relevant for scalable fonts.  It is
	    used to specify that this font should only be offered if
	    certain system fonts are available, as well as to
	    associate IDs with those system fonts to refer to in the
	    <link
	      linkend="developers-note-fonts-mapping-format-font-symbol-map">font-symbol-map</link>
	    element.  This scheme is used to decide which notation
	    fonts should be offered to the user, and also allows you
	    to compose a Rosegarden notation font from more than one
	    system font if desired.
	  </para>
	  <para>The "font-requirements" element should contain a list
	    of "font-requirement" child elements.  Each of these has two
	    attributes: "font-id", containing a numerical ID of your
	    choice for reference elsewhere in the file, and either a
	    "name" or a "names" attribute.  If "name" is provided, it
	    will be used as the name of a single system font to be
	    associated with the font id; if "names" is provided, it will
	    be treated as a comma-separated list of system fonts and the
	    first one found will be associated with the font id.
	  </para>
	</sect3>

	<sect3 id="developers-note-fonts-mapping-format-font-sizes">
	  <title>font-sizes</title>

	  <para>The "font-sizes" element specifies which notation font
	    sizes are available, and how the nominal font size relates
	    to the dimensions of non-font elements such as stems, staff
	    lines and beams.  The "size" of a notation font is assumed
	    to be the distance in pixels between staff lines, or more
	    precisely, the height of a conventional note head that
	    completely fills the space between lines: the size therefore
	    does not include the thickness of either of the neighbouring
	    staff lines.
	  </para>

	  <para>
	    <!-- !!! TODO throughout this section: how to mark up XML element/attribute names? equiv of <code> in HTML would do -->
	    There are two possible child elements of "font-sizes":
	    "font-scale" and "font-size".  Their use depends on the
	    type of font being described.</para>

	  <para>
	    For pixmap (non-scalable) fonts, the "font-sizes" element
	    should contain a list of "font-size" elements, one for
	    each size of pixmaps available.  The pixmaps themselves
	    must be installed in the
	    fonts/&lt;font-name&gt;/&lt;font-size&gt; subdirectory of
	    the Rosegarden installation directory, where
	    &lt;font-name&gt; is the name of the font (as specified in
	    the "rosegarden-font-encoding" element at the start of the
	    mapping file), or a lower-case version of the name, and
	    &lt;font-size&gt; is the pixel size of the font.  A font
	    size will only be made available to the user if it has an
	    entry in the "font-sizes" list and the pixmap directory is
	    found.
	  </para>
	  
	  <para>
	    For scalable fonts, the "font-sizes" element should
	    contain one "font-scale" element that defines the
	    relationships between font and non-font elements in a
	    general way, and also defines the relationship between
	    Rosegarden's nominal font size and the size of the
	    corresponding system font.  If this "font-scale" element
	    is found, then Rosegarden will assume the font is
	    available in any size.  You can however still include one
	    or more "font-size" elements to define precise proportions
	    for any particular size for which the general proportions
	    do not quite work correctly, for example because of
	    rounding error.
	  </para>

	  <para>
	    The attributes of "font-scale" and "font-size" are very
	    similar.  The main difference is that all attributes of
	    "font-scale" are floating-point values relative to the
	    font size, where 1.0 is the base font size (i.e. the
	    distance between staff lines), whereas attributes of
	    "font-size" are integer pixel values.  The attributes
	    available are as follows.  (Those marked "optional" have
	    vaguely sensible defaults, so it's a good idea to try not
	    setting them first.)
	  </para>
	  
	  <variablelist>

	    <varlistentry>
	      <term>note-height</term>
	      <listitem>
		<para>This attribute is only available for the
		  "font-size" element, and it is mandatory in that
		  element.  It defines the base size of font to which the
		  other attributes in this element apply, and a size that
		  will be offered to the user and used when looking up
		  pixmaps for this font.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>font-height</term>
	      <listitem>
		<para>May be used in either "font-size" or "font-scale".
		  This is only relevant for scalable fonts, but is
		  mandatory for them if used in the "font-scale" element.
		  This defines the size of the system font used to draw a
		  given size of notation font.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>beam-thickness</term>
	      <listitem>
		<para>Optional.  Defines the thickness of a beam.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>staff-line-thickness</term>
	      <listitem>
		<para>Optional.  Defines the thickness of a staff line.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>stem-thickness</term>
	      <listitem>
		<para>Optional.  Defines the thickness of a note stem.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>flag-spacing</term>
	      <listitem>
		<para>Optional.  Defines the gap between note flags in
		  cases where multiple flags are drawn by drawing a single
		  flag several times.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>border-x</term>
	      <listitem>
		<para>Optional.  Specifies that the note head pixmaps
		  have a fixed area to left and right that should not be
		  considered part of the note head.  This attribute gives
		  the thickness of that area.</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>border-y</term>
	      <listitem>
		<para>Optional.  Specifies that the note head pixmaps
		  have a fixed area to top and bottom that should not be
		  considered part of the note head.  This attribute gives
		  the thickness of that area.</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	</sect3>

	<sect3 id="developers-note-fonts-mapping-format-font-symbol-map">
	  <title>font-symbol-map</title>
	  <para>
	    This element lists the symbols available in this notation
	    font, and which pixmap files or system font code points
	    they should be drawn from.</para>

	  <para>It should contain a list of "symbol" elements.  These
	    have several possible attributes, the choice of which will
	    normally depend on whether the font is based on pixmaps or
	    system fonts:
	  </para>

	  <variablelist>
	    <varlistentry>
	      <term>name</term>
	      <listitem>
		<para>Mandatory.  This attribute should contain the
		  name of the notation symbol.  If the symbol exists in
		  the <ulink
		    url="http://www.unicode.org/charts/PDF/U1D100.pdf">Unicode
		    3.2 standard</ulink>, the name should be that used to
		  identify the symbol in the standard.</para>

		<para>Most of the symbols Rosegarden expects to find
		  are in the standard; one exception is that many fonts
		  have a special version of the flag symbol that is
		  intended to be used when composing multiple flags from
		  individual single flags.  Rosegarden refers to this as
		  "MUSICAL SYMBOL COMBINING FLAG-0", a name not used in
		  the Unicode standard (which has flags 1-5 only).</para>

		<para>For a definitive set of the symbol names
		  Rosegarden knows about, see the file
		  "gui/notecharname.cpp" in the Rosegarden source
		  distribution.  Note however that it is possible to use
		  additional symbol names by introducing them in a <link
		    linkend="developers-note-styles">notation
		    style</link>.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>src</term>
	      <listitem>
		<para>The name of the pixmap file from which this
		  symbol should be loaded, without a directory or
		  extension.  This is the usual way of describing a
		  symbol in a pixmap font.  The file itself should be
		  installed to
		  fonts/&lt;font-name&gt;/&lt;font-size&gt;/&lt;src&gt;.xpm
		  under the Rosegarden installation directory.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>inversion-src</term>
	      <listitem>
		<para>The name of a pixmap file from which an inverted
		  version of this symbol may be loaded, without a
		  directory or extension.  If this attribute is absent
		  and an inverted version of the symbol is required, it
		  will be generated simply by loading the normal version
		  and reflecting it in a central x-axis.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>code</term>
	      <listitem>
		<para>The code point at which this symbol may be found
		  in the relevant system font, as a decimal integer.
		  This is a way of describing a symbol in a scalable
		  font.  This attribute will only be referred to if no
		  pixmap file is supplied, or if the pixmap file fails
		  to load.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>inversion-code</term>
	      <listitem>
		<para>The code point at which an inverted version of
		  this symbol may be found in the relevant system font.
		  If this attribute is absent and an inverted version of
		  the symbol is required, it will be generated simply by
		  loading the normal version and reflecting it in a
		  central x-axis.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>glyph</term>
	      <listitem>
		<para>The raw glyph index at which this symbol may be found
		  in the relevant system font, as a decimal integer.
		  This is a way of describing a symbol in a scalable
		  font.  This attribute will only be referred to if no
		  pixmap file is supplied, or if the pixmap file fails
		  to load.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>inversion-glyph</term>
	      <listitem>
		<para>The raw glyph index at which an inverted version of
		  this symbol may be found in the relevant system font.
		  If this attribute is absent and an inverted version of
		  the symbol is required, it will be generated simply by
		  loading the normal version and reflecting it in a
		  central x-axis.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>font-id</term>
	      <listitem>
		<para>The id of the system font from which this symbol
		  should be loaded, as defined in the <link
		    linkend="developers-note-fonts-mapping-format-font-requirements">font-requirements</link>
		  element.  The default is 0.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>codebase</term>
	      <listitem>
		<para>This (decimal integer) attribute may be of use
		  if many of the symbols in a scalable font cover a
		  short range of code points starting at a relatively
		  high code page.  If supplied, the codebase value will
		  be added to each of the subsequent code and
		  inversion-code values when looking up a symbol.
		</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>

	  <para>
	    Although none of these attributes is mandatory except for
	    the name, a symbol obviously needs to supply at least one
	    of "src", "inversion-src", "code", "inversion-code",
	    "glyph", or "inversion-glyph" to stand any chance of being
	    rendered at all.  It is of course perfectly legitimate to
	    supply several or all of these attributes.
	  </para>

	</sect3>

	<sect3 id="developers-note-fonts-mapping-format-font-hotspots">
	  <title>font-hotspots</title>
	  <para>
	  </para>
	</sect3>

      </sect2>
      
    </sect1>
    
    <sect1 id="developers-note-styles">
      <title>Creating new notation styles</title>

      <para>
	Rosegarden's notation editor has the ability to display and
	edit notes in various standard styles: classical, diamond
	heads and so on.  These styles are all defined in XML style
	definition files installed along with the application, and
	it's possible to create a new one by writing a simple XML
	file.  Rosegarden simply looks at the set of installed files
	to determine which styles to offer the user.  You can refer to
	the default set of files in the styles subdirectory of the
	Rosegarden installation directory for examples.
      </para>

      <para>
	The file format is not yet especially comprehensive; at the
	moment it has been designed to be powerful enough to describe
	the standard styles that come with Rosegarden, but not much
	more.  If you should try to create new styles this way, we'd
	be very interested in your feedback on the Rosegarden
	mailing-lists.
      </para>
      
      <sect2 id="developers-note-styles-format">
	<title>Notation style XML format</title>

	<para>
	  Here is a summary of the XML elements that may be used in
	  a style definition file.
	</para>

	<sect3 id="developers-note-styles-note-style">
	  <title>rosegarden-note-style</title>

	  <para>This element must exist in every style file, and
	    should contain all the other elements.  It has one optional
	    attribute, "base-style", which may be used to name a style
	    from which this style takes the default values for any
	    parameters not specified elsewhere in the present file.
	    It's often good practice to define a style in terms of the
	    minimal difference from a given base style: see the supplied
	    Cross.xml for a particularly simple example.
	  </para>

	  <para>Note that the "rosegarden-note-style" element does not
	    give the name of the style being defined, which is instead
	    currently drawn from the name of the file.  At some point in
	    the future we may add internationalizable style name
	    attributes to this element.</para>
	</sect3>

	<sect3 id="developers-note-styles-global-note">
	  <title>global, note</title>
	  
	  <para>Within the "rosegarden-note-style" element, there may
	    be one "global" element and any number of "note" elements.
	    We describe these together, as they have almost identical
	    sets of attributes.  The "global" element simply provides
	    default values for those parameters not specified for a
	    particular note type in any following "note" element.
	  </para>

	  <para>The attributes for these elements are as follows.  All
	    of these are optional except as described:</para>

	  <variablelist>

	    <varlistentry>
	      <term>type</term>
	      <listitem>
		<para>Only relevant to the "note" element, and
		  mandatory for that element.  This attribute specifies
		  which sort of note is being styled.  Legal values are
		  textual American or British note names (from "64th",
		  "sixth-fourth note", "hemidemisemiquaver" etc to
		  "double whole note").
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>shape</term>
	      <listitem>
		<para>Defines a note head shape for this style.  Any
		  string is a legal value, but the only values
		  implemented so far are "angled oval", "level oval",
		  "breve", "cross", "triangle up", "triangle down",
		  "diamond" and "rectangle".  The value "number" is also
		  recognised but not yet implemented.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>charname</term>
	      <listitem>
		<para>Defines a note font character name to be used as
		  the note head for this style.  An element may supply a
		  "shape" or "charname" attribute, but not both.  The
		  name should be one of those defined in the current
		  notation font's <link
		    linkend="developers-note-fonts-mapping-format-font-symbol-map">symbol
		    map</link> (in a "name" attribute).
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>filled</term>
	      <listitem>
		<para>Specifies whether this note should have a filled
		  head (where applicable, i.e. where the shape attribute
		  supplies a shape that is available both filled and
		  unfilled).  Must be "true" or "false".
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>stem</term>
	      <listitem>
		<para>Specifies whether this note should have a stem.
		  Must be "true" or "false".
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>flags</term>
	      <listitem>
		<para>Defines how many flags or beams this note should
		  have.  The valid range is 0 to 4.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>slashes</term>
	      <listitem>
		<para>Defines how many slashes this note should have
		  across its stem.
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>hfixpoint</term>
	      <listitem>
		<para>Specifies in which x position the stem fixes to
		  the note head.  Acceptable values are "normal" (the
		  right side when the stem points up, the left when it
		  points down), "central", and "reversed" (left side
		  when the stem points up, right when it points down).
		</para>
	      </listitem>
	    </varlistentry>

	    <varlistentry>
	      <term>vfixpoint</term>
	      <listitem>
		<para>Specifies in which y position the stem fixes to
		  the note head.  Acceptable values are "near" (the stem
		  fixes to the top when pointing up, the bottom when
		  pointing down), "middle", or "far".
		</para>
	      </listitem>
	    </varlistentry>

	  </variablelist>
	</sect3>
      </sect2>
    </sect1>
    

    <!-- (OPTIONAL) A Programming/Scripting reference chapter should be
    used for apps that use plugins or that provide their own scripting hooks
    and/or development libraries. -->

    <!-- cc: I think we should document the DCOP API here, but I don't
    think we should include extensive developer docs, although we should
    point to where they can be found in the source tree or online. -->
    <!--
    <para>
    Programming <application>Rosegarden</application> plugins is 
    a joy to behold. Just read through the next
    66 pages of <acronym>API</acronym>'s to learn how!
  </para>
    -->
    <!-- Use refentries to describe APIs.  Refentries are fairly
    complicated and you should consult the docbook reference for
    further details. The example below was taken from that reference
    and shortened a bit for readability. -->
    <!--
    <refentry id="re-1007-unmanagechildren-1">
    <refmeta>
    <refentrytitle>XtUnmanageChildren</refentrytitle>
    <refmiscinfo>Xt &ndash; Geometry Management</refmiscinfo>
  </refmeta>
    <refnamediv>
    <refname>XtUnmanageChildren
  </refname>
    <refpurpose>remove a list of children from a parent widget's managed list.
  </refpurpose>
  </refnamediv>
    <refsynopsisdiv>
    <refsynopsisdivinfo>
    <date>4 March 1996</date>
  </refsynopsisdivinfo>
    <synopsis>
    void XtUnmanageChildren(<replaceable>children</replaceable>, <replaceable>num_children</replaceable>)
    WidgetList <replaceable>children</replaceable>;
    Cardinal <replaceable>num_children</replaceable>;
  </synopsis>

    <refsect2 id="r2-1007-unmanagechildren-1">
    <title>Inputs</title>
    <variablelist>
    <varlistentry>
    <term><replaceable>children</replaceable>
  </term>
    <listitem>
    <para>
    Specifies an array of child widgets. Each child must be of
    class RectObj or any subclass thereof.
  </para>
  </listitem>
  </varlistentry>
    <varlistentry>
    <term><replaceable>num_children</replaceable>
  </term>
    <listitem>
    <para>Specifies the number of elements in <replaceable>children</replaceable>.
  </para>
  </listitem>
  </varlistentry>
  </variablelist>
  </refsect2></refsynopsisdiv>

    <refsect1 id="r1-1007-unmanagechildren-1">
    <title>Description
  </title>
    <para>
    <function>XtUnmanageChildren()</function> unmaps the specified widgets
    and removes them from their parent's geometry management.
    The widgets will disappear from the screen, and (depending
    on its parent) may no longer have screen space allocated for
    them.
  </para>
    <para>Each of the widgets in the <replaceable>children</replaceable> array must have
    the same parent.
  </para>
    <para>See the &ldquo;Algorithm&rdquo; section below for full details of the
    widget unmanagement procedure.
  </para>
  </refsect1>

    <refsect1 id="r1-1007-unmanagechildren-2">
    <title>Usage</title>
    <para>
    Unmanaging widgets is the usual method for temporarily
    making them invisible.  They can be re-managed with
    <function>XtManageChildren()</function>.
  </para>
    <para>
    You can unmap a widget, but leave it under geometry
    management by calling <function>XtUnmapWidget()</function>.  You can
    destroy a widget's window without destroying the widget by
    calling <function>XtUnrealizeWidget()</function>.  You can destroy a
    widget completely with <function>XtDestroyWidget()</function>.
  </para>
    <para>
    If you are only going to unmanage a single widget, it is
    more convenient to call <function>XtUnmanageChild()</function>.  It is
    often more convenient to call <function>XtUnmanageChild()</function>
    several times than it is to declare and initialize an array
    of widgets to pass to <function>XtUnmanageChildren()</function>.  Calling
    <function>XtUnmanageChildren()</function> is more efficient, however,
    because it only calls the parent's <function>change_managed()</function>
    method once.
  </para>
  </refsect1>

    <refsect1 id="r1-1007-unmanagechildren-3">
    <title>Algorithm
  </title>
    <para><function>XtUnmanageChildren()</function> performs the following:
  </para>
    <variablelist>
    <varlistentry>
    <term>-
  </term>
    <listitem>
    <para>Ignores the child if it already is unmanaged or is being
    destroyed.
  </para>
  </listitem>
  </varlistentry>
    <varlistentry>
    <term>-
  </term>
    <listitem>
    <para>Otherwise, if the child is realized, it makes it nonvisible
    by unmapping it.
  </para>
  </listitem>
  </varlistentry>
  </variablelist>
    <para>
  </para>
  </refsect1>

    <refsect1 id="r1-1007-unmanagechildren-4">
    <title>Structures</title>
    <para>
    The <type>WidgetList</type> type is simply an array of widgets:
  </para>
    <screen id="sc-1007-unmanagechildren-1">
    typedef Widget *WidgetList;
  </screen>
  </refsect1>
  </refentry>
    -->
  </chapter>


  <chapter id="credits">

    <title>Credits and License</title>

    <para>
      <application>Rosegarden</application>
    </para>
    <para>
      <itemizedlist>
	<listitem>
	  <para>

	    Rosegarden-4 is Copyright 2000-2004 Guillaume Laurent,
	    Chris Cannam and Richard Bown.  The moral rights of
	    Guillaume Laurent, Chris Cannam and Richard Bown to be
	    identified as the authors of this work have been asserted.

	  </para>
	</listitem>

	<listitem>
	  <para>

	    Parts of Rosegarden-4 are derived from Rosegarden 2.1,
	    which is Copyright 1994 &ndash; 2001 Chris Cannam, Andrew Green,
	    Richard Bown and Guillaume Laurent.

	  </para>
	</listitem>

	<listitem>
	  <para>

	    For musical notation display Rosegarden-4 uses pixmaps
	    derived from the Feta font, part of the <ulink
	      url="http://lilypond.org/">Lilypond</ulink> software,
	    which is Copyright 1997 &ndash; 2001 Jan Nieuwenhuizen and
	    Han-Wen Nienhuys.

	  </para>
	</listitem>

	<listitem>
	  <para>

	    Other major contributors include Randall Farmer, Ron
	    Kuris, Hans Kieserman, and Michael McIntyre.

	  </para>
	</listitem>

	<listitem>
	  <para>

	    The Rosegarden splash-screen image is from a 1900 postcard
	    of Thornden Park at Syracuse University, Syracuse, NY,
	    used with thanks to the staff of Syracuse University.

	  </para>
	</listitem>

      </itemizedlist>
    </para>

    <para>
      Documentation copyright 2002-2004 Chris Cannam, Richard Bown, Guillaume Laurent
    </para>
    <!--
    <para>
    Translations done by:
    <itemizedlist>
    <listitem>
    <para>Babel D. Fish <email>babelfish@kde.org</email> (Sanskrit)</para>
  </listitem>
  </itemizedlist>
  </para>
    -->
    <!-- For URL links to common stuff like the one below,
    always use paths like "common/gpl-licence".
    In this path, "common" will be a symbolic link built at "make install" time.
    This link will normally point to $KDEDIR/share/doc/HTML/en/common,
    where "en" should be replaced with the current language. -->

    <para>
      This program is licensed under the terms of the
      <ulink url="common/gpl-license.html">GNU General Public License</ulink>.
    </para>
  </chapter>

    <!-- Note that the revhistory tags apply to the documentation
    version and not to the app version. That is why we use an
    ItemizedList instead for this list of revisions to the app. -->

    <chapter id="rosegarden-revhistory">
      <title>Rosegarden-4 Revision History</title>
      <para>
	<itemizedlist>
	  <listitem><para>
	      0.9.9 &ndash; July 2004: plugin synths, triggered segments, notation improvements
	  </para></listitem>
	  <listitem><para>
	      0.9.8 &ndash; May 2004: better audio subsystem
	  </para></listitem>
	  <listitem><para>
	      0.9.7 &ndash; February 2004: 
	  </para></listitem>
	  <listitem><para>
	      0.9.6 &ndash; December 2003: bug fixes
	  </para></listitem>
	  <listitem><para>
	      0.9.5 &ndash; November 2003: a great many stuff
	  </para></listitem>
	  <listitem><para>
	      0.9.1 &ndash; May 2003: step recording, Mup export, many many bug fixes
	  </para></listitem>
	  <listitem><para>
	      0.9 &ndash; April 2003: many notation improvements, improved bank editor, audio enhancements and refinements, translations
	  </para></listitem>
	  <listitem><para>
	      0.8.5 &ndash; December 2002: bank editor, MIDI filters, panic button
	  </para></listitem>
	  <listitem><para>
	      0.8 &ndash; October 2002: printing, LADSPA plugins, improved Matrix View
	  </para></listitem>
	  <listitem><para>
	      0.2.0 &ndash; August 2002: WAV file support, sweep selections, contrapuntal staves
	  </para></listitem>
	  <listitem><para>
	      0.1.6 &ndash; June 2002: configuration dialog, Lilypond support, quantize dialog
	  </para></listitem>
	  <listitem><para>
	      0.1.5 &ndash; May 2002: KDE 3, ALSA support, JACK audio support
	  </para></listitem>
	  <listitem><para>
	      0.1.4 &ndash; March 2002: more undo, segment editing, audio playback
	  </para></listitem>
	  <listitem><para>
	      0.1.3 &ndash; January 2002: piano-roll/matrix view, &MIDI; recording
	  </para></listitem>
	  <listitem><para>
	      0.1.2 &ndash; November 2001: notation undo, transport dialog, position pointer
	  </para></listitem>
	  <listitem><para>
	      0.1.1 &ndash; October 2001: scalable notation
	  </para></listitem>
	  <listitem><para>
	      0.1   &ndash; June 2001: first public release of Rosegarden-4
	  </para></listitem>
	</itemizedlist>
      </para>
    </chapter>

  &documentation.index; 
</book>
