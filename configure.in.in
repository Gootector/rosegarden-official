#MIN_CONFIG

AM_INIT_AUTOMAKE(rosegarden,4-0.9)

dnl These are common macros that you might or might not want to use

dnl Image readers/writers
KDE_CHECK_KIMGIO
 
dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_TIME
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h stdlib.h paths.h)
AC_CHECK_FUNCS(usleep)
AC_CHECK_LIB(z, gzgets,, AC_MSG_ERROR("gzgets not found in zlib - need zlib-1.0.9 or newer"))

dnl test for sound support at all
AC_ARG_ENABLE(sound,[  --disable-sound         disable sound support (default is enabled for ALSA)],
[
  if test "$enable_sound" = "no";
  then
      with_sound=no
  fi
])

dnl Disable sound system
dnl
if test "$with_sound" = "no";
then
    AC_DEFINE(NO_SOUND, 1, [Define if you don't want sound support - overrides all sound drivers])
else

dnl check whether user wants to use ALSA
AC_ARG_WITH(arts, [  --with-arts             enable aRts support (at cost of ALSA support)],
[
   if test $withval = "yes"; then
     with_alsa=no
   else
     with_alsa=yes
  fi
], with_alsa=yes)

if test "$with_alsa" = "yes"; then
  AM_PATH_ALSA(0.9.0, with_alsa=yes, with_alsa=no)
fi

dnl ARTS if no ALSA
if test "$with_alsa" = "no"; then
  KDE_FIND_PATH(mcopidl, MCOPIDL, [$kde_default_bindirs], [KDE_MISSING_ARTS_ERROR(mcopidl)])
  KDE_FIND_PATH(artsc-config, ARTSCCONFIG, [$kde_default_bindirs], [KDE_MISSING_ARTS_ERROR(artsc-config)])
  AC_SUBST(MCOPIDL)
  AC_SUBST(ARTSCCONFIG)
  AC_CHECK_FILE($kde_includes/arts/artsmidi.idl,, AC_MSG_ERROR("artsmidi.idl missing- you may need to install kdemultimedia, kdemultimedia-devel, and/or kdemultimedia-arts depending on your distro"))
  AC_CHECK_FILE($kde_includes/arts/reference.h,, AC_MSG_ERROR("aRts headers are missing"))
  with_jack=no
  with_ladspa=no
else
  dnl ALSA is good
  AC_DEFINE(HAVE_ALSA, 1, [Define if you have ALSA support])

  dnl check whether user wants to use JACK
  AC_ARG_WITH(jack, [  --with-jack             enable JACK support (enabled by default when installed. requires ALSA.)],
  [
   if test "$withval" = "yes"; then
     with_jack=yes
   else
     with_jack=no
  fi
  ], with_jack=yes)

  dnl only use JACK when jack/jack.h is found
  if test "$with_jack" = "yes"; then
     AC_CHECK_HEADERS(jack/jack.h,,[with_jack=no])
  fi

  if test "$with_jack" = "yes"; then
    AC_CHECK_LIB(rt, shm_open)
    AC_CHECK_LIB(jack, jack_client_new)

    dnl  AC_DEFINE(HAVE_JACK, 1, [Define if you have JACK support])
    dnl  AC_SUBST(JACKLIB)
    dnl  AC_CHECK_FUNCS(libRosegardenSequencer.la, [],
    dnl                 [JACKLIB="-ljack"])

  fi

  dnl check whether user wants to have LADSPA
  AC_ARG_WITH(ladspa, [  --with-ladspa           enable LADSPA plugins (enabled by default when installed)],
  [
    if test "$withval" = "yes"; then
      with_ladspa=yes
    else
      with_ladspa=no
    fi
  ], with_ladspa=yes)

  dnl only use LADSPA when ladspa.h is found
  if test "$with_ladspa" != "yes"; then
    AC_CHECK_HEADERS(ladspa.h,,[with_ladspa=no])
  fi

  if test "$with_ladspa" = "yes"; then
    AC_DEFINE(HAVE_LADSPA, 1, [Define if you have LADSPA])
    AC_CHECK_LIB(lrdf, lrdf_dump)
  fi

dnl fi is for ALSA
fi

dnl fi is for no_sound
fi

dnl append RDKDE3 flag if we've found KDE3
if test $kde_qtver = 3; then
  CXXFLAGS="-DRGKDE3 $CXXFLAGS"
fi

dnl automake conditionals
dnl isn't this redundant to the above AC_DEFINE?
dnl
AM_CONDITIONAL(NO_SOUND, test "$with_sound" = "no")
AM_CONDITIONAL(HAVE_ALSA, test "$with_alsa" = "yes")

###################
# Try to be a bit more clever with kde dirs :
# If we can find a common base between kde_includes and
# kde_libraries, (e.g. /opt/kde/include, /opt/kde/lib => /opt/kde)
# then set our prefix to that.

dir1=$kde_includes
dir2=$kde_libraries

# Remove any trailing slashes
while test $dir1 = ${dir1%?}/; do
dir1=${dir1%?}; done
while test $dir2 = ${dir2%?}/; do
dir2=${dir2%?}; done

lengthDir1=${#dir1}
lengthDir2=${#dir2}

# Make directory paths equal in length
if test $lengthDir1 -gt $lengthDir2
then
    count=$(($lengthDir1 - $lengthDir2))
    while test $count -ne 0
    do
       dir1=${dir1%?}
       count=$(($count - 1))
    done
else
    count=$(($lengthDir2 - $lengthDir1))
    while test $count -ne 0
    do 
       dir2=${dir2%?}
       count=$(($count - 1))
    done
fi

# Chop off a path element at a time until
# we hit root, or they're equal.
while test $dir1 != "/" -a \
        $dir1 != $dir2
do
    dir1=${dir1%/?*}/
    dir2=${dir2%/?*}/
done
matchDir=$dir1        

if test $prefix = "/usr/local/kde"
then
    prefix=$matchDir
fi

echo
echo
echo "Installation Summary"
echo "--------------------"
echo
echo "Install Directory         :  $prefix"
echo
if test "$with_sound" = "no"; then
    echo "No sound support configured"
else
    echo "ALSA MIDI support         : ${with_alsa}"
    echo "JACK audio support        : ${with_jack}"
    echo "LADSPA plugin support     : ${with_ladspa}"

    if test "$with_alsa" = "yes"; then
        echo "aRTS MIDI and audio       : no"
    else
        echo "aRTS MIDI and audio       : yes"
    fi
fi
echo
echo
