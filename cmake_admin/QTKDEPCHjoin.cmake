
MACRO(SEARCH_HEADERS _hprefix _output)
	SET(_regex  "^[^/]*#include +<${_hprefix}")
    EXECUTE_PROCESS(
    	COMMAND find . -type f -name *.h -or -name *.cpp
    	COMMAND xargs egrep -h ${_regex}
    	COMMAND sort -u
    	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        RESULT_VARIABLE _search_RESULT
        ERROR_VARIABLE _search_ERROR
		OUTPUT_VARIABLE _search_OUTPUT )
	#MESSAGE("_search_RESULT: ${_search_RESULT}")
	#MESSAGE("_search_ERROR: ${_search_ERROR}")
	#MESSAGE("_search_OUTPUT: ${_search_OUTPUT}")
	IF(NOT _search_RESULT)
		SET(${_output} ${_search_OUTPUT})
    ELSE(NOT _search_RESULT)
        MESSAGE(FATAL_ERROR "Error in SEARCH_HEADERS rc=${_search_RESULT} msg=${_search_ERROR}")
    ENDIF(NOT _search_RESULT)
ENDMACRO(SEARCH_HEADERS)

MACRO(ADD_QTKDE_PRECOMPILED_HEADERS _output_dir)
	SEARCH_HEADERS("q" QT_HEADERS)
    #MESSAGE("Qt Headers: ${QT_HEADERS}")
	SEARCH_HEADERS("k" KDE_HEADERS)
    #MESSAGE("KDE Headers: ${KDE_HEADERS}")
    SET(_source_file "${CMAKE_CURRENT_BINARY_DIR}/QTandKDEpch.hh")
    FILE(WRITE ${_source_file} "// precompiled headers - autogenerated \n")
   	FILE(APPEND ${_source_file} ${QT_HEADERS})
   	FILE(APPEND ${_source_file} ${KDE_HEADERS})
    MAKE_DIRECTORY("${_output_dir}.gch")
    SET(_output "${_output_dir}.gch/${CMAKE_BUILD_TYPE}.c++")
    SET(_flags_var_name)
    STRING(TOUPPER "CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}" _flags_var_name)
    SET(_compiler_FLAGS ${${_flags_var_name}})
    SEPARATE_ARGUMENTS(_compiler_FLAGS)
    IF(CMAKE_BUILD_TYPE STREQUAL "Release")
        LIST(APPEND _compiler_FLAGS -DNDEBUG)
    ELSE(CMAKE_BUILD_TYPE STREQUAL "Release")
        LIST(APPEND _compiler_FLAGS -DDEBUG)
    ENDIF(CMAKE_BUILD_TYPE STREQUAL "Release")
    #MESSAGE("_compiler_FLAGS: ${_compiler_FLAGS}")
	ADD_CUSTOM_COMMAND(
	    OUTPUT ${_output}
	    COMMAND ${CMAKE_CXX_COMPILER}
	       ${_compiler_FLAGS}
	       -I${QT_INCLUDE_DIR}
	       -I${KDE3_INCLUDE_DIR}
	       ${QT_DEFINITIONS}
	       ${KDE3_DEFINITIONS}
	       -x c++-header
           -o ${_output} ${_source_file}
	    DEPENDS ${_source_file} )
    ADD_CUSTOM_TARGET(precompiled_headers ALL DEPENDS ${_output})
    SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-include ${_output_dir} -Winvalid-pch")
ENDMACRO(ADD_QTKDE_PRECOMPILED_HEADERS)
