/* -*- c-basic-offset: 4 indent-tabs-mode: nil -*- vi:set ts=8 sts=4 sw=4: */

#include "base/NotationTypes.h"
#include "document/io/LilyPondExporter.h"
#include "document/RosegardenDocument.h"
#include "misc/ConfigGroups.h"

#include <QTest>
#include <QDebug>
#include <QProcess>
#include <QSettings>

using namespace Rosegarden;

// Unit test for lilypond export

class TestLilypondExport : public QObject
{
    Q_OBJECT

private Q_SLOTS:
    // QTest special functions...
    // Called once.
    void initTestCase();
    // Called before every test.
    void init();

    // Our test functions.
    void testEmptyDocument();

    // Data-driven testing against the example .rg files.
    // Generate the test data.
    void testExamples_data();
    // Called for each row of test data.
    void testExamples();
};

void TestLilypondExport::initTestCase()
{
    // We certainly don't want to mess up the user's QSettings or allow
    // the user's QSettings to affect the tests.  Use a separate file.
    QCoreApplication::setApplicationName("test_lilypond_export");
}

void TestLilypondExport::init()
{
    // Change the settings so that they are consistent and not affected
    // by defaults.
    // ??? Can't we move this to initTestCase() and get the same effect?
    //     I don't think we need to be doing this for every test case.
    QSettings settings;
    settings.beginGroup(LilyPondExportConfigGroup);
    settings.setValue("lilyfontsize", 12); // the default of 26 is really huge!
    settings.setValue("lilyexportbeamings", false);
    settings.endGroup();
}

// Read an entire file line-by-line.
// This is used by checkFile() to read the expected file and the
// actual file for comparison.
QList<QByteArray> readLines(const QString &fileName)
{
    QList<QByteArray> lines;
    QFile file(fileName);
    if (!file.open(QIODevice::ReadOnly)) {
        qWarning() << "Couldn't open" << fileName;
    } else {
        while (!file.atEnd()) {
            lines.append(file.readLine());
        }
    }
    return lines;
}

const char header1[] =
        "This LilyPond file was generated by Rosegarden";
const char header2[] =
        "Created using Rosegarden ";

// Check the generated file (fileName) against the baseline file.
void checkFile(const QString &fileName, const QString &baseline)
{
    // Read in the files.
    const QList<QByteArray> expected = readLines(baseline);
    QList<QByteArray> actual = readLines(fileName);
    
    // For each line in the files...
    for (int i = 0; i < expected.count() && i < actual.count(); ++i) {
        const QByteArray line = actual.at(i);
        const QByteArray expectedLine = expected.at(i);
        
        // Skip header lines which have rosegarden versions in them.
        if (line.contains(header1) &&
                expectedLine.contains(header1))
            continue;
        if (line.contains(header2) &&
                expectedLine.contains(header2))
            continue;
        
        // Compare the remaining lines.
        QCOMPARE(QString(line), QString(expectedLine));
    }
    
    // Make sure the same number of lines were compared.
    QCOMPARE(actual.count(), expected.count());

    // All good, clean up
    QFile::remove(fileName);
}

void TestLilypondExport::testEmptyDocument()
{
    // GIVEN a document and a lilypond exporter
    RosegardenDocument doc(nullptr, {}, true /*skip autoload*/, true, false /*no sound*/);
    const QString fileName = "out.ly";
    LilyPondExporter exporter(&doc, SegmentSelection(), qstrtostr(fileName));

    // WHEN generating lilypond
    bool result = exporter.write();

    // THEN it should produce the file but return false and a warning message
    QVERIFY(!result);
    QCOMPARE(exporter.getMessage(), QString("Export succeeded, but the composition was empty."));

    // ... and the output file should match "empty.ly"
    checkFile(fileName, QFINDTESTDATA("baseline/empty.ly"));
}

// ??? Why do we have this?  We never use anything other than
//     ExportBeaming.  This can be removed.
enum Option {
    NoOptions = 0,
    ExportBeaming
};
Q_DECLARE_FLAGS(Options, Option)
Q_DECLARE_OPERATORS_FOR_FLAGS(Options)
Q_DECLARE_METATYPE(Options)
Options defaultOptions(ExportBeaming);

void TestLilypondExport::testExamples_data()
{
    // ??? This is always "example".
    QTest::addColumn<QString>("baseDir");
    // ??? This is always the row name.  Can we just use the row name?
    QTest::addColumn<QString>("baseName");
    // ??? This is always defaultOptions.
    QTest::addColumn<Options>("options");

    QTest::newRow("aveverum") <<
            "examples" <<
            "aveverum" <<
            defaultOptions;
    QTest::newRow("aylindaamiga") <<
            "examples" <<
            "aylindaamiga" <<
            defaultOptions;
    QTest::newRow("bogus-surf-jam") <<
            "examples" <<
            "bogus-surf-jam" <<
            defaultOptions;
    QTest::newRow("beaming") <<
            "examples" <<
            "beaming" <<
            defaultOptions;
    QTest::newRow("Brandenburg_No3-BWV_1048") << "examples" << "Brandenburg_No3-BWV_1048" << defaultOptions;
    QTest::newRow("bwv-1060-trumpet-duet-excerpt") << "examples" << "bwv-1060-trumpet-duet-excerpt" << defaultOptions;

    // Those work but are very slow, and the output lots and lots of
    // WARNING: Rosegarden::Exception: "Bad type for Indication model event (expected indication, found controller)"
    //QTest::newRow("children") << "examples" << "children" << defaultOptions;
    //QTest::newRow("Chopin-Prelude-in-E-minor-Aere") << "examples" << "Chopin-Prelude-in-E-minor-Aere" << defaultOptions;

    QTest::newRow("Djer-Fire") << "examples" << "Djer-Fire" << defaultOptions;
    QTest::newRow("doodle-q") << "examples" << "doodle-q" << defaultOptions;
    QTest::newRow("exercise_notation") << "examples" << "exercise_notation" << defaultOptions;
    QTest::newRow("glazunov-for-solo-and-piano-with-cue") << "examples" << "glazunov-for-solo-and-piano-with-cue" << defaultOptions;
    QTest::newRow("glazunov") << "examples" << "glazunov" << defaultOptions;
    QTest::newRow("Hallelujah_Chorus_from_Messiah") << "examples" << "Hallelujah_Chorus_from_Messiah" << defaultOptions;
    QTest::newRow("headers-and-unicode-lyrics") << "examples" << "headers-and-unicode-lyrics" << defaultOptions;
    QTest::newRow("himno_de_riego") << "examples" << "himno_de_riego" << defaultOptions;
    QTest::newRow("interpretation-example") << "examples" << "interpretation-example" << defaultOptions;
    QTest::newRow("let-all-mortal-flesh") << "examples" << "let-all-mortal-flesh" << defaultOptions;
    QTest::newRow("lilypond-alternative-endings_new-way") << "examples" << "lilypond-alternative-endings_new-way" << defaultOptions;
    QTest::newRow("lilypond-alternative-endings") << "examples" << "lilypond-alternative-endings" << defaultOptions;
    QTest::newRow("lilypond-directives") << "examples" << "lilypond-directives" << defaultOptions;
    QTest::newRow("lilypond-up-down") << "examples" << "lilypond-up-down" << defaultOptions;
    QTest::newRow("lilypond-staff-groupings") << "examples" << "lilypond-staff-groupings" << defaultOptions;
    QTest::newRow("lilypond-tied-grace-notes") << "examples" << "lilypond-tied-grace-notes" << defaultOptions;
    QTest::newRow("logical-segments-4") << "examples" << "logical-segments-4" << defaultOptions;
    QTest::newRow("mandolin-sonatina") << "examples" << "mandolin-sonatina" << defaultOptions;
    QTest::newRow("marks-test") << "examples" << "marks-test" << defaultOptions;
    QTest::newRow("mozart-quartet") << "examples" << "mozart-quartet" << defaultOptions;
    QTest::newRow("notation-for-string-orchestra-in-D-minor") << "examples" << "notation-for-string-orchestra-in-D-minor" << defaultOptions;
    QTest::newRow("perfect-moment") << "examples" << "perfect-moment" << defaultOptions;
    QTest::newRow("ravel-pc-gmaj-adagio") << "examples" << "ravel-pc-gmaj-adagio" << defaultOptions;
    QTest::newRow("Romanza") << "examples" << "Romanza" << defaultOptions;

    // THIS ONE FAILS
    // sicut-locutus.ly:98:47: error: syntax error, unexpected '}'
    //                < f g > 2 _\markup { \italic
    //                                              } _\markup { \italic Masked and substituted }  _~ f _~  |
    // ### QTest::newRow("sicut-locutus") << "examples" << "sicut-locutus" << defaultOptions;

    QTest::newRow("stormy-riders") << "examples" << "stormy-riders" << defaultOptions;
    QTest::newRow("test_tuplets") << "examples" << "test_tuplets" << defaultOptions;
    QTest::newRow("the-rose-garden") << "examples" << "the-rose-garden" << defaultOptions;
    QTest::newRow("vivaldi-cs3mv2") << "examples" << "vivaldi-cs3mv2" << defaultOptions;
    QTest::newRow("vivaldi_op44_11_1") << "examples" << "vivaldi_op44_11_1" << defaultOptions;

    // data/regression
    QTest::newRow("export_hidden_key_signatures") << "regression" << "export_hidden_key_signatures" << defaultOptions;
}

void TestLilypondExport::testExamples()
{
    QFETCH(QString, baseDir);
    QFETCH(QString, baseName);
    QFETCH(Options, options);

    // GIVEN
    const QString input = QFINDTESTDATA("../../data/" + baseDir + "/" + baseName + ".rg");
    QVERIFY(!input.isEmpty()); // file not found
    const QString expected = QFINDTESTDATA("baseline/" + baseName + ".ly");

    const QString fileName = baseName + ".ly";
    qDebug() << "Loading" << input << "and exporting to" << fileName;

    QSettings settings;
    settings.beginGroup(LilyPondExportConfigGroup);
    settings.setValue("lilyexportbeamings", (options & ExportBeaming) ? true : false);
    settings.endGroup();

    RosegardenDocument doc(nullptr, {}, true /*skip autoload*/, true, false /*no sequencer*/);
    doc.openDocument(input, false /*not permanent, i.e. don't create midi devices*/, true /*no progress dlg*/);
    LilyPondExporter exporter(&doc, SegmentSelection(), qstrtostr(fileName));

    // WHEN
    QVERIFY(exporter.write());

    // THEN
    if (expected.isEmpty()) {
        // No baseline yet.

        // Use lilypond to check this file compiles before we add it to our baseline
        QProcess proc;
        proc.start("lilypond", QStringList() << "--ps" << fileName);
        proc.waitForStarted();
        proc.waitForFinished();
        QCOMPARE(proc.exitStatus(), QProcess::NormalExit);
        if (proc.exitCode() != 0) {
            qWarning() << "Generated file" << fileName << "does NOT compile!";
        }

        qWarning() << "*********** GENERATING NEW BASELINE FILE (remember to add it to SVN) ***********";
        QFile in(fileName);
        QVERIFY(in.open(QIODevice::ReadOnly));
        QFile out(QFile::decodeName(SRCDIR) + "/baseline/" + baseName + ".ly");
        QVERIFY(!out.exists());
        QVERIFY(out.open(QIODevice::WriteOnly));
        while (!in.atEnd()) {
            out.write(in.readLine());
        }
        QVERIFY(false); // make the test fail, so developers add the baseline to SVN and try again
    }

    // Compare generated file with expected file
    checkFile(fileName, expected);
}

QTEST_MAIN(TestLilypondExport)

#include "lilypond_export_test.moc"
